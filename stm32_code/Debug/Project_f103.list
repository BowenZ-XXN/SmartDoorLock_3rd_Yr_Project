
Project_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006530  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001450  0800663c  0800663c  0001663c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a8c  08007a8c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08007a8c  08007a8c  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a8c  08007a8c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a8c  08007a8c  00017a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08007a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ac  2000008c  08007b20  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  08007b20  00020938  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0a0  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ac5  00000000  00000000  0002e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  00030c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a40  00000000  00000000  000319b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019665  00000000  00000000  000323f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000129bd  00000000  00000000  0004ba55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008891f  00000000  00000000  0005e412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003eb0  00000000  00000000  000e6d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000eabe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006624 	.word	0x08006624

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08006624 	.word	0x08006624

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <MYUSART_SendData>:

uint8_t USART3_RX_STA= 0;//串口是否接收到数据

//串口发送一个字节
static uint8_t MYUSART_SendData(uint8_t data)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	71fb      	strb	r3, [r7, #7]
	if(HAL_UART_Transmit(&AS608_UART,&data,1,0xff) == HAL_OK)
 800016a:	1df9      	adds	r1, r7, #7
 800016c:	23ff      	movs	r3, #255	; 0xff
 800016e:	2201      	movs	r2, #1
 8000170:	4806      	ldr	r0, [pc, #24]	; (800018c <MYUSART_SendData+0x2c>)
 8000172:	f004 faf5 	bl	8004760 <HAL_UART_Transmit>
 8000176:	4603      	mov	r3, r0
 8000178:	2b00      	cmp	r3, #0
 800017a:	d101      	bne.n	8000180 <MYUSART_SendData+0x20>
		return 0;
 800017c:	2300      	movs	r3, #0
 800017e:	e000      	b.n	8000182 <MYUSART_SendData+0x22>
	return 1;
 8000180:	2301      	movs	r3, #1
}
 8000182:	4618      	mov	r0, r3
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	200007a0 	.word	0x200007a0

08000190 <SendHead>:
//发送包头
static void SendHead(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	memset(USART3_RX_BUF,0,sizeof(USART3_RX_BUF));//发送前清空数据，因为所有都要发送包头，所以只需要在发送包头前清空即可
 8000194:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000198:	2100      	movs	r1, #0
 800019a:	4805      	ldr	r0, [pc, #20]	; (80001b0 <SendHead+0x20>)
 800019c:	f005 fae0 	bl	8005760 <memset>
  MYUSART_SendData(0xEF);
 80001a0:	20ef      	movs	r0, #239	; 0xef
 80001a2:	f7ff ffdd 	bl	8000160 <MYUSART_SendData>
  MYUSART_SendData(0x01);
 80001a6:	2001      	movs	r0, #1
 80001a8:	f7ff ffda 	bl	8000160 <MYUSART_SendData>
}
 80001ac:	bf00      	nop
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	200000a8 	.word	0x200000a8

080001b4 <SendAddr>:
//发送地址
static void SendAddr(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
  MYUSART_SendData(AS608Addr >> 24);
 80001b8:	4b0e      	ldr	r3, [pc, #56]	; (80001f4 <SendAddr+0x40>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	0e1b      	lsrs	r3, r3, #24
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	4618      	mov	r0, r3
 80001c2:	f7ff ffcd 	bl	8000160 <MYUSART_SendData>
  MYUSART_SendData(AS608Addr >> 16);
 80001c6:	4b0b      	ldr	r3, [pc, #44]	; (80001f4 <SendAddr+0x40>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	0c1b      	lsrs	r3, r3, #16
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	4618      	mov	r0, r3
 80001d0:	f7ff ffc6 	bl	8000160 <MYUSART_SendData>
  MYUSART_SendData(AS608Addr >> 8);
 80001d4:	4b07      	ldr	r3, [pc, #28]	; (80001f4 <SendAddr+0x40>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	0a1b      	lsrs	r3, r3, #8
 80001da:	b2db      	uxtb	r3, r3
 80001dc:	4618      	mov	r0, r3
 80001de:	f7ff ffbf 	bl	8000160 <MYUSART_SendData>
  MYUSART_SendData(AS608Addr);
 80001e2:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <SendAddr+0x40>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	4618      	mov	r0, r3
 80001ea:	f7ff ffb9 	bl	8000160 <MYUSART_SendData>
}
 80001ee:	bf00      	nop
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	20000000 	.word	0x20000000

080001f8 <SendFlag>:
//发送包标识,
static void SendFlag(uint8_t flag)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	71fb      	strb	r3, [r7, #7]
  MYUSART_SendData(flag);
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	4618      	mov	r0, r3
 8000206:	f7ff ffab 	bl	8000160 <MYUSART_SendData>
}
 800020a:	bf00      	nop
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}

08000212 <SendLength>:
//发送包长度
static void SendLength(int length)
{
 8000212:	b580      	push	{r7, lr}
 8000214:	b082      	sub	sp, #8
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
  MYUSART_SendData(length >> 8);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	121b      	asrs	r3, r3, #8
 800021e:	b2db      	uxtb	r3, r3
 8000220:	4618      	mov	r0, r3
 8000222:	f7ff ff9d 	bl	8000160 <MYUSART_SendData>
  MYUSART_SendData(length);
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	b2db      	uxtb	r3, r3
 800022a:	4618      	mov	r0, r3
 800022c:	f7ff ff98 	bl	8000160 <MYUSART_SendData>
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <Sendcmd>:
//发送指令码
static void Sendcmd(uint8_t cmd)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	71fb      	strb	r3, [r7, #7]
  MYUSART_SendData(cmd);
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	4618      	mov	r0, r3
 8000246:	f7ff ff8b 	bl	8000160 <MYUSART_SendData>
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}

08000252 <SendCheck>:
//发送校验和
static void SendCheck(uint16_t check)
{
 8000252:	b580      	push	{r7, lr}
 8000254:	b082      	sub	sp, #8
 8000256:	af00      	add	r7, sp, #0
 8000258:	4603      	mov	r3, r0
 800025a:	80fb      	strh	r3, [r7, #6]
  MYUSART_SendData(check >> 8);
 800025c:	88fb      	ldrh	r3, [r7, #6]
 800025e:	0a1b      	lsrs	r3, r3, #8
 8000260:	b29b      	uxth	r3, r3
 8000262:	b2db      	uxtb	r3, r3
 8000264:	4618      	mov	r0, r3
 8000266:	f7ff ff7b 	bl	8000160 <MYUSART_SendData>
  MYUSART_SendData(check);
 800026a:	88fb      	ldrh	r3, [r7, #6]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	4618      	mov	r0, r3
 8000270:	f7ff ff76 	bl	8000160 <MYUSART_SendData>
}
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <AS608_Check>:
参数：无
功能描述：模块是否连接检测
返回值：模块连接了返回0 否则返回1
*****************************************/
static uint8_t AS608_Check(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
	USART3_RX_BUF[9] = 1;
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <AS608_Check+0x50>)
 8000284:	2201      	movs	r2, #1
 8000286:	725a      	strb	r2, [r3, #9]

  SendHead();
 8000288:	f7ff ff82 	bl	8000190 <SendHead>
  SendAddr();
 800028c:	f7ff ff92 	bl	80001b4 <SendAddr>
	for(int i = 0; i < 10; i++)
 8000290:	2300      	movs	r3, #0
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	e009      	b.n	80002aa <AS608_Check+0x2e>
	{
		MYUSART_SendData(Get_Device_Code[i]);
 8000296:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <AS608_Check+0x54>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4413      	add	r3, r2
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ff5e 	bl	8000160 <MYUSART_SendData>
	for(int i = 0; i < 10; i++)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	3301      	adds	r3, #1
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2b09      	cmp	r3, #9
 80002ae:	ddf2      	ble.n	8000296 <AS608_Check+0x1a>
	}
	//HAL_UART_Receive(&AS608_UART,USART3_RX_BUF,12,100);//串口三接收12个数据
	delay_ms(200);//等待200ms
 80002b0:	20c8      	movs	r0, #200	; 0xc8
 80002b2:	f000 fdeb 	bl	8000e8c <delay_ms>
	if(USART3_RX_BUF[9] == 0)
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <AS608_Check+0x50>)
 80002b8:	7a5b      	ldrb	r3, [r3, #9]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d101      	bne.n	80002c2 <AS608_Check+0x46>
		return 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	e000      	b.n	80002c4 <AS608_Check+0x48>

  return 1;
 80002c2:	2301      	movs	r3, #1
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	200000a8 	.word	0x200000a8
 80002d0:	20000004 	.word	0x20000004

080002d4 <as608_init>:
/*指纹模块初始化*/
uint8_t as608_init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	//设置uart3接收中断
	HAL_UART_Receive_IT(&AS608_UART,USART3_RX_BUF,sizeof( USART3_RX_BUF));//接收数据，且产生中断
 80002d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80002dc:	4908      	ldr	r1, [pc, #32]	; (8000300 <as608_init+0x2c>)
 80002de:	4809      	ldr	r0, [pc, #36]	; (8000304 <as608_init+0x30>)
 80002e0:	f004 fac9 	bl	8004876 <HAL_UART_Receive_IT>
	//使能空闲中断
	__HAL_UART_ENABLE_IT(&AS608_UART,UART_IT_IDLE);//
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <as608_init+0x30>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	68da      	ldr	r2, [r3, #12]
 80002ea:	4b06      	ldr	r3, [pc, #24]	; (8000304 <as608_init+0x30>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f042 0210 	orr.w	r2, r2, #16
 80002f2:	60da      	str	r2, [r3, #12]

	return AS608_Check();
 80002f4:	f7ff ffc2 	bl	800027c <AS608_Check>
 80002f8:	4603      	mov	r3, r0
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	200000a8 	.word	0x200000a8
 8000304:	200007a0 	.word	0x200007a0

08000308 <JudgeStr>:
//判断中断接收的数组有没有应答包
//waittime为等待中断接收数据的时间（单位1ms）
//返回值：数据包首地址
static uint8_t *JudgeStr(uint16_t waittime)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	80fb      	strh	r3, [r7, #6]
  char *data;
  uint8_t str[8];
  str[0] = 0xef;
 8000312:	23ef      	movs	r3, #239	; 0xef
 8000314:	733b      	strb	r3, [r7, #12]
  str[1] = 0x01;
 8000316:	2301      	movs	r3, #1
 8000318:	737b      	strb	r3, [r7, #13]
  str[2] = AS608Addr >> 24;
 800031a:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <JudgeStr+0x8c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	0e1b      	lsrs	r3, r3, #24
 8000320:	b2db      	uxtb	r3, r3
 8000322:	73bb      	strb	r3, [r7, #14]
  str[3] = AS608Addr >> 16;
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <JudgeStr+0x8c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	0c1b      	lsrs	r3, r3, #16
 800032a:	b2db      	uxtb	r3, r3
 800032c:	73fb      	strb	r3, [r7, #15]
  str[4] = AS608Addr >> 8;
 800032e:	4b19      	ldr	r3, [pc, #100]	; (8000394 <JudgeStr+0x8c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	0a1b      	lsrs	r3, r3, #8
 8000334:	b2db      	uxtb	r3, r3
 8000336:	743b      	strb	r3, [r7, #16]
  str[5] = AS608Addr;
 8000338:	4b16      	ldr	r3, [pc, #88]	; (8000394 <JudgeStr+0x8c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	b2db      	uxtb	r3, r3
 800033e:	747b      	strb	r3, [r7, #17]
  str[6] = 0x07;
 8000340:	2307      	movs	r3, #7
 8000342:	74bb      	strb	r3, [r7, #18]
  str[7] = '\0';
 8000344:	2300      	movs	r3, #0
 8000346:	74fb      	strb	r3, [r7, #19]
  USART3_RX_STA = 0;
 8000348:	4b13      	ldr	r3, [pc, #76]	; (8000398 <JudgeStr+0x90>)
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
  while(--waittime)
 800034e:	e015      	b.n	800037c <JudgeStr+0x74>
  {
    delay_ms(1);
 8000350:	2001      	movs	r0, #1
 8000352:	f000 fd9b 	bl	8000e8c <delay_ms>
    if(USART3_RX_STA) //接收到一次数据
 8000356:	4b10      	ldr	r3, [pc, #64]	; (8000398 <JudgeStr+0x90>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d00e      	beq.n	800037c <JudgeStr+0x74>
    {
      USART3_RX_STA = 0;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <JudgeStr+0x90>)
 8000360:	2200      	movs	r2, #0
 8000362:	701a      	strb	r2, [r3, #0]
      data = strstr((const char*)USART3_RX_BUF, (const char*)str);
 8000364:	f107 030c 	add.w	r3, r7, #12
 8000368:	4619      	mov	r1, r3
 800036a:	480c      	ldr	r0, [pc, #48]	; (800039c <JudgeStr+0x94>)
 800036c:	f005 fa13 	bl	8005796 <strstr>
 8000370:	6178      	str	r0, [r7, #20]
      if(data)
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <JudgeStr+0x74>
        return (uint8_t*)data;
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	e006      	b.n	800038a <JudgeStr+0x82>
  while(--waittime)
 800037c:	88fb      	ldrh	r3, [r7, #6]
 800037e:	3b01      	subs	r3, #1
 8000380:	80fb      	strh	r3, [r7, #6]
 8000382:	88fb      	ldrh	r3, [r7, #6]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d1e3      	bne.n	8000350 <JudgeStr+0x48>
    }
  }
  return 0;
 8000388:	2300      	movs	r3, #0
}
 800038a:	4618      	mov	r0, r3
 800038c:	3718      	adds	r7, #24
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000000 	.word	0x20000000
 8000398:	20000238 	.word	0x20000238
 800039c:	200000a8 	.word	0x200000a8

080003a0 <PS_GetImage>:
//录入图像 PS_GetImage
//功能:探测手指，探测到后录入指纹图像存于ImageBuffer。
//模块返回确认字
uint8_t PS_GetImage(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
  uint16_t temp;
  uint8_t  ensure;
  uint8_t  *data;
  SendHead();
 80003a6:	f7ff fef3 	bl	8000190 <SendHead>
  SendAddr();
 80003aa:	f7ff ff03 	bl	80001b4 <SendAddr>
  SendFlag(0x01);//命令包标识
 80003ae:	2001      	movs	r0, #1
 80003b0:	f7ff ff22 	bl	80001f8 <SendFlag>
  SendLength(0x03);
 80003b4:	2003      	movs	r0, #3
 80003b6:	f7ff ff2c 	bl	8000212 <SendLength>
  Sendcmd(0x01);
 80003ba:	2001      	movs	r0, #1
 80003bc:	f7ff ff3c 	bl	8000238 <Sendcmd>
  temp =  0x01 + 0x03 + 0x01;
 80003c0:	2305      	movs	r3, #5
 80003c2:	80bb      	strh	r3, [r7, #4]
  SendCheck(temp);
 80003c4:	88bb      	ldrh	r3, [r7, #4]
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ff43 	bl	8000252 <SendCheck>
  data = JudgeStr(2000);
 80003cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d0:	f7ff ff9a 	bl	8000308 <JudgeStr>
 80003d4:	6038      	str	r0, [r7, #0]
  if(data)
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d003      	beq.n	80003e4 <PS_GetImage+0x44>
    ensure = data[9];
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	7a5b      	ldrb	r3, [r3, #9]
 80003e0:	71fb      	strb	r3, [r7, #7]
 80003e2:	e001      	b.n	80003e8 <PS_GetImage+0x48>
  else
    ensure = 0xff;
 80003e4:	23ff      	movs	r3, #255	; 0xff
 80003e6:	71fb      	strb	r3, [r7, #7]
  return ensure;
 80003e8:	79fb      	ldrb	r3, [r7, #7]
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}

080003f2 <PS_GenChar>:
//生成特征 PS_GenChar
//功能:将ImageBuffer中的原始图像生成指纹特征文件存于CharBuffer1或CharBuffer2
//参数:BufferID --> charBuffer1:0x01	charBuffer1:0x02
//模块返回确认字
uint8_t PS_GenChar(uint8_t BufferID)
{
 80003f2:	b580      	push	{r7, lr}
 80003f4:	b084      	sub	sp, #16
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	4603      	mov	r3, r0
 80003fa:	71fb      	strb	r3, [r7, #7]
  uint16_t temp;
  uint8_t  ensure;
  uint8_t  *data;
  SendHead();
 80003fc:	f7ff fec8 	bl	8000190 <SendHead>
  SendAddr();
 8000400:	f7ff fed8 	bl	80001b4 <SendAddr>
  SendFlag(0x01);//命令包标识
 8000404:	2001      	movs	r0, #1
 8000406:	f7ff fef7 	bl	80001f8 <SendFlag>
  SendLength(0x04);
 800040a:	2004      	movs	r0, #4
 800040c:	f7ff ff01 	bl	8000212 <SendLength>
  Sendcmd(0x02);
 8000410:	2002      	movs	r0, #2
 8000412:	f7ff ff11 	bl	8000238 <Sendcmd>
  MYUSART_SendData(BufferID);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff fea1 	bl	8000160 <MYUSART_SendData>
  temp = 0x01 + 0x04 + 0x02 + BufferID;
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	b29b      	uxth	r3, r3
 8000422:	3307      	adds	r3, #7
 8000424:	81bb      	strh	r3, [r7, #12]
  SendCheck(temp);
 8000426:	89bb      	ldrh	r3, [r7, #12]
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ff12 	bl	8000252 <SendCheck>
  data = JudgeStr(2000);
 800042e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000432:	f7ff ff69 	bl	8000308 <JudgeStr>
 8000436:	60b8      	str	r0, [r7, #8]
  if(data)
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d003      	beq.n	8000446 <PS_GenChar+0x54>
    ensure = data[9];
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	7a5b      	ldrb	r3, [r3, #9]
 8000442:	73fb      	strb	r3, [r7, #15]
 8000444:	e001      	b.n	800044a <PS_GenChar+0x58>
  else
    ensure = 0xff;
 8000446:	23ff      	movs	r3, #255	; 0xff
 8000448:	73fb      	strb	r3, [r7, #15]
  return ensure;
 800044a:	7bfb      	ldrb	r3, [r7, #15]
}
 800044c:	4618      	mov	r0, r3
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <PS_Match>:
//精确比对两枚指纹特征 PS_Match
//功能:精确比对CharBuffer1 与CharBuffer2 中的特征文件
//模块返回确认字
uint8_t PS_Match(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
  uint16_t temp;
  uint8_t  ensure;
  uint8_t  *data;
  SendHead();
 800045a:	f7ff fe99 	bl	8000190 <SendHead>
  SendAddr();
 800045e:	f7ff fea9 	bl	80001b4 <SendAddr>
  SendFlag(0x01);//命令包标识
 8000462:	2001      	movs	r0, #1
 8000464:	f7ff fec8 	bl	80001f8 <SendFlag>
  SendLength(0x03);
 8000468:	2003      	movs	r0, #3
 800046a:	f7ff fed2 	bl	8000212 <SendLength>
  Sendcmd(0x03);
 800046e:	2003      	movs	r0, #3
 8000470:	f7ff fee2 	bl	8000238 <Sendcmd>
  temp = 0x01 + 0x03 + 0x03;
 8000474:	2307      	movs	r3, #7
 8000476:	80bb      	strh	r3, [r7, #4]
  SendCheck(temp);
 8000478:	88bb      	ldrh	r3, [r7, #4]
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff fee9 	bl	8000252 <SendCheck>
  data = JudgeStr(2000);
 8000480:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000484:	f7ff ff40 	bl	8000308 <JudgeStr>
 8000488:	6038      	str	r0, [r7, #0]
  if(data)
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d003      	beq.n	8000498 <PS_Match+0x44>
    ensure = data[9];
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	7a5b      	ldrb	r3, [r3, #9]
 8000494:	71fb      	strb	r3, [r7, #7]
 8000496:	e001      	b.n	800049c <PS_Match+0x48>
  else
    ensure = 0xff;
 8000498:	23ff      	movs	r3, #255	; 0xff
 800049a:	71fb      	strb	r3, [r7, #7]
  return ensure;
 800049c:	79fb      	ldrb	r3, [r7, #7]
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <PS_RegModel>:
}
//合并特征（生成模板）PS_RegModel
//功能:将CharBuffer1与CharBuffer2中的特征文件合并生成 模板,结果存于CharBuffer1与CharBuffer2
//说明:  模块返回确认字
uint8_t PS_RegModel(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	b082      	sub	sp, #8
 80004aa:	af00      	add	r7, sp, #0
  uint16_t temp;
  uint8_t  ensure;
  uint8_t  *data;
  SendHead();
 80004ac:	f7ff fe70 	bl	8000190 <SendHead>
  SendAddr();
 80004b0:	f7ff fe80 	bl	80001b4 <SendAddr>
  SendFlag(0x01);//命令包标识
 80004b4:	2001      	movs	r0, #1
 80004b6:	f7ff fe9f 	bl	80001f8 <SendFlag>
  SendLength(0x03);
 80004ba:	2003      	movs	r0, #3
 80004bc:	f7ff fea9 	bl	8000212 <SendLength>
  Sendcmd(0x05);
 80004c0:	2005      	movs	r0, #5
 80004c2:	f7ff feb9 	bl	8000238 <Sendcmd>
  temp = 0x01 + 0x03 + 0x05;
 80004c6:	2309      	movs	r3, #9
 80004c8:	80bb      	strh	r3, [r7, #4]
  SendCheck(temp);
 80004ca:	88bb      	ldrh	r3, [r7, #4]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff fec0 	bl	8000252 <SendCheck>
  data = JudgeStr(2000);
 80004d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004d6:	f7ff ff17 	bl	8000308 <JudgeStr>
 80004da:	6038      	str	r0, [r7, #0]
  if(data)
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d003      	beq.n	80004ea <PS_RegModel+0x44>
    ensure = data[9];
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	7a5b      	ldrb	r3, [r3, #9]
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	e001      	b.n	80004ee <PS_RegModel+0x48>
  else
    ensure = 0xff;
 80004ea:	23ff      	movs	r3, #255	; 0xff
 80004ec:	71fb      	strb	r3, [r7, #7]
  return ensure;
 80004ee:	79fb      	ldrb	r3, [r7, #7]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <PS_StoreChar>:
//功能:将 CharBuffer1 或 CharBuffer2 中的模板文件存到 PageID 号flash数据库位置。
//参数:  BufferID @ref charBuffer1:0x01	charBuffer1:0x02
//       PageID（指纹库位置号）
//说明:  模块返回确认字
uint8_t PS_StoreChar(uint8_t BufferID, uint16_t PageID)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	460a      	mov	r2, r1
 8000502:	71fb      	strb	r3, [r7, #7]
 8000504:	4613      	mov	r3, r2
 8000506:	80bb      	strh	r3, [r7, #4]
  uint16_t temp;
  uint8_t  ensure;
  uint8_t  *data;
  SendHead();
 8000508:	f7ff fe42 	bl	8000190 <SendHead>
  SendAddr();
 800050c:	f7ff fe52 	bl	80001b4 <SendAddr>
  SendFlag(0x01);//命令包标识
 8000510:	2001      	movs	r0, #1
 8000512:	f7ff fe71 	bl	80001f8 <SendFlag>
  SendLength(0x06);
 8000516:	2006      	movs	r0, #6
 8000518:	f7ff fe7b 	bl	8000212 <SendLength>
  Sendcmd(0x06);
 800051c:	2006      	movs	r0, #6
 800051e:	f7ff fe8b 	bl	8000238 <Sendcmd>
  MYUSART_SendData(BufferID);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff fe1b 	bl	8000160 <MYUSART_SendData>
  MYUSART_SendData(PageID >> 8);
 800052a:	88bb      	ldrh	r3, [r7, #4]
 800052c:	0a1b      	lsrs	r3, r3, #8
 800052e:	b29b      	uxth	r3, r3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fe14 	bl	8000160 <MYUSART_SendData>
  MYUSART_SendData(PageID);
 8000538:	88bb      	ldrh	r3, [r7, #4]
 800053a:	b2db      	uxtb	r3, r3
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff fe0f 	bl	8000160 <MYUSART_SendData>
  temp = 0x01 + 0x06 + 0x06 + BufferID
         + (PageID >> 8) + (uint8_t)PageID;
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	b29a      	uxth	r2, r3
 8000546:	88bb      	ldrh	r3, [r7, #4]
 8000548:	0a1b      	lsrs	r3, r3, #8
 800054a:	b29b      	uxth	r3, r3
 800054c:	4413      	add	r3, r2
 800054e:	b29a      	uxth	r2, r3
 8000550:	88bb      	ldrh	r3, [r7, #4]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	b29b      	uxth	r3, r3
 8000556:	4413      	add	r3, r2
 8000558:	b29b      	uxth	r3, r3
  temp = 0x01 + 0x06 + 0x06 + BufferID
 800055a:	330d      	adds	r3, #13
 800055c:	81bb      	strh	r3, [r7, #12]
  SendCheck(temp);
 800055e:	89bb      	ldrh	r3, [r7, #12]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fe76 	bl	8000252 <SendCheck>
  data = JudgeStr(2000);
 8000566:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800056a:	f7ff fecd 	bl	8000308 <JudgeStr>
 800056e:	60b8      	str	r0, [r7, #8]
  if(data)
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d003      	beq.n	800057e <PS_StoreChar+0x86>
    ensure = data[9];
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	7a5b      	ldrb	r3, [r3, #9]
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	e001      	b.n	8000582 <PS_StoreChar+0x8a>
  else
    ensure = 0xff;
 800057e:	23ff      	movs	r3, #255	; 0xff
 8000580:	73fb      	strb	r3, [r7, #15]
  return ensure;
 8000582:	7bfb      	ldrb	r3, [r7, #15]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <PS_DeletChar>:
//删除模板 PS_DeletChar
//功能:  删除flash数据库中指定ID号开始的N个指纹模板
//参数:  PageID(指纹库模板号)，N删除的模板个数。
//说明:  模块返回确认字
uint8_t PS_DeletChar(uint16_t PageID, uint16_t N)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	460a      	mov	r2, r1
 8000596:	80fb      	strh	r3, [r7, #6]
 8000598:	4613      	mov	r3, r2
 800059a:	80bb      	strh	r3, [r7, #4]
  uint16_t temp;
  uint8_t  ensure;
  uint8_t  *data;
  SendHead();
 800059c:	f7ff fdf8 	bl	8000190 <SendHead>
  SendAddr();
 80005a0:	f7ff fe08 	bl	80001b4 <SendAddr>
  SendFlag(0x01);//命令包标识
 80005a4:	2001      	movs	r0, #1
 80005a6:	f7ff fe27 	bl	80001f8 <SendFlag>
  SendLength(0x07);
 80005aa:	2007      	movs	r0, #7
 80005ac:	f7ff fe31 	bl	8000212 <SendLength>
  Sendcmd(0x0C);
 80005b0:	200c      	movs	r0, #12
 80005b2:	f7ff fe41 	bl	8000238 <Sendcmd>
  MYUSART_SendData(PageID >> 8);
 80005b6:	88fb      	ldrh	r3, [r7, #6]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff fdce 	bl	8000160 <MYUSART_SendData>
  MYUSART_SendData(PageID);
 80005c4:	88fb      	ldrh	r3, [r7, #6]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fdc9 	bl	8000160 <MYUSART_SendData>
  MYUSART_SendData(N >> 8);
 80005ce:	88bb      	ldrh	r3, [r7, #4]
 80005d0:	0a1b      	lsrs	r3, r3, #8
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fdc2 	bl	8000160 <MYUSART_SendData>
  MYUSART_SendData(N);
 80005dc:	88bb      	ldrh	r3, [r7, #4]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff fdbd 	bl	8000160 <MYUSART_SendData>
  temp = 0x01 + 0x07 + 0x0C
         + (PageID >> 8) + (uint8_t)PageID
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	4413      	add	r3, r2
 80005f4:	b29a      	uxth	r2, r3
         + (N >> 8) + (uint8_t)N;
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	4413      	add	r3, r2
 80005fe:	b29a      	uxth	r2, r3
 8000600:	88bb      	ldrh	r3, [r7, #4]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	b29b      	uxth	r3, r3
 8000606:	4413      	add	r3, r2
 8000608:	b29b      	uxth	r3, r3
  temp = 0x01 + 0x07 + 0x0C
 800060a:	3314      	adds	r3, #20
 800060c:	81bb      	strh	r3, [r7, #12]
  SendCheck(temp);
 800060e:	89bb      	ldrh	r3, [r7, #12]
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff fe1e 	bl	8000252 <SendCheck>
  data = JudgeStr(2000);
 8000616:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800061a:	f7ff fe75 	bl	8000308 <JudgeStr>
 800061e:	60b8      	str	r0, [r7, #8]
  if(data)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d003      	beq.n	800062e <PS_DeletChar+0xa2>
    ensure = data[9];
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	7a5b      	ldrb	r3, [r3, #9]
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	e001      	b.n	8000632 <PS_DeletChar+0xa6>
  else
    ensure = 0xff;
 800062e:	23ff      	movs	r3, #255	; 0xff
 8000630:	73fb      	strb	r3, [r7, #15]
  return ensure;
 8000632:	7bfb      	ldrb	r3, [r7, #15]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <PS_HighSpeedSearch>:
//		  若搜索到，则返回页码,该指令对于的确存在于指纹库中 ，且登录时质量
//		  很好的指纹，会很快给出搜索结果。
//参数:  BufferID， StartPage(起始页)，PageNum（页数）
//说明:  模块返回确认字+页码（相配指纹模板）
uint8_t PS_HighSpeedSearch(uint8_t BufferID, uint16_t StartPage, uint16_t PageNum, SearchResult *p)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4603      	mov	r3, r0
 8000646:	73fb      	strb	r3, [r7, #15]
 8000648:	460b      	mov	r3, r1
 800064a:	81bb      	strh	r3, [r7, #12]
 800064c:	4613      	mov	r3, r2
 800064e:	817b      	strh	r3, [r7, #10]
  uint16_t temp;
  uint8_t  ensure;
  uint8_t  *data;
  SendHead();
 8000650:	f7ff fd9e 	bl	8000190 <SendHead>
  SendAddr();
 8000654:	f7ff fdae 	bl	80001b4 <SendAddr>
  SendFlag(0x01);//命令包标识
 8000658:	2001      	movs	r0, #1
 800065a:	f7ff fdcd 	bl	80001f8 <SendFlag>
  SendLength(0x08);
 800065e:	2008      	movs	r0, #8
 8000660:	f7ff fdd7 	bl	8000212 <SendLength>
  Sendcmd(0x1b);
 8000664:	201b      	movs	r0, #27
 8000666:	f7ff fde7 	bl	8000238 <Sendcmd>
  MYUSART_SendData(BufferID);
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fd77 	bl	8000160 <MYUSART_SendData>
  MYUSART_SendData(StartPage >> 8);
 8000672:	89bb      	ldrh	r3, [r7, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	b29b      	uxth	r3, r3
 8000678:	b2db      	uxtb	r3, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fd70 	bl	8000160 <MYUSART_SendData>
  MYUSART_SendData(StartPage);
 8000680:	89bb      	ldrh	r3, [r7, #12]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fd6b 	bl	8000160 <MYUSART_SendData>
  MYUSART_SendData(PageNum >> 8);
 800068a:	897b      	ldrh	r3, [r7, #10]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	b29b      	uxth	r3, r3
 8000690:	b2db      	uxtb	r3, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff fd64 	bl	8000160 <MYUSART_SendData>
  MYUSART_SendData(PageNum);
 8000698:	897b      	ldrh	r3, [r7, #10]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fd5f 	bl	8000160 <MYUSART_SendData>
  temp = 0x01 + 0x08 + 0x1b + BufferID
         + (StartPage >> 8) + (uint8_t)StartPage
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	89bb      	ldrh	r3, [r7, #12]
 80006a8:	0a1b      	lsrs	r3, r3, #8
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	4413      	add	r3, r2
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	89bb      	ldrh	r3, [r7, #12]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	4413      	add	r3, r2
 80006b8:	b29a      	uxth	r2, r3
         + (PageNum >> 8) + (uint8_t)PageNum;
 80006ba:	897b      	ldrh	r3, [r7, #10]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	b29b      	uxth	r3, r3
 80006c0:	4413      	add	r3, r2
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	897b      	ldrh	r3, [r7, #10]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	4413      	add	r3, r2
 80006cc:	b29b      	uxth	r3, r3
  temp = 0x01 + 0x08 + 0x1b + BufferID
 80006ce:	3324      	adds	r3, #36	; 0x24
 80006d0:	82bb      	strh	r3, [r7, #20]
  SendCheck(temp);
 80006d2:	8abb      	ldrh	r3, [r7, #20]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff fdbc 	bl	8000252 <SendCheck>
  data = JudgeStr(2000);
 80006da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006de:	f7ff fe13 	bl	8000308 <JudgeStr>
 80006e2:	6138      	str	r0, [r7, #16]
  if(data)
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d01f      	beq.n	800072a <PS_HighSpeedSearch+0xee>
  {
    ensure = data[9];
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	7a5b      	ldrb	r3, [r3, #9]
 80006ee:	75fb      	strb	r3, [r7, #23]
    p->pageID 	= (data[10] << 8) + data[11];
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	330a      	adds	r3, #10
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	021b      	lsls	r3, r3, #8
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	330b      	adds	r3, #11
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b29b      	uxth	r3, r3
 8000704:	4413      	add	r3, r2
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	801a      	strh	r2, [r3, #0]
    p->mathscore = (data[12] << 8) + data[13];
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	330c      	adds	r3, #12
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b29b      	uxth	r3, r3
 8000714:	021b      	lsls	r3, r3, #8
 8000716:	b29a      	uxth	r2, r3
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	330d      	adds	r3, #13
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b29b      	uxth	r3, r3
 8000720:	4413      	add	r3, r2
 8000722:	b29a      	uxth	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	805a      	strh	r2, [r3, #2]
 8000728:	e001      	b.n	800072e <PS_HighSpeedSearch+0xf2>
  }
  else
    ensure = 0xff;
 800072a:	23ff      	movs	r3, #255	; 0xff
 800072c:	75fb      	strb	r3, [r7, #23]
  return ensure;
 800072e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <EnsureMessage>:
}
//模块应答包确认码信息解析
//功能：解析确认码错误信息返回信息
//参数: ensure
const char *EnsureMessage(uint8_t ensure)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
    const char *p;
    switch(ensure)
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	2b20      	cmp	r3, #32
 8000746:	f200 8087 	bhi.w	8000858 <EnsureMessage+0x120>
 800074a:	a201      	add	r2, pc, #4	; (adr r2, 8000750 <EnsureMessage+0x18>)
 800074c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000750:	080007d5 	.word	0x080007d5
 8000754:	080007db 	.word	0x080007db
 8000758:	080007e1 	.word	0x080007e1
 800075c:	080007e7 	.word	0x080007e7
 8000760:	080007ed 	.word	0x080007ed
 8000764:	080007f3 	.word	0x080007f3
 8000768:	080007f9 	.word	0x080007f9
 800076c:	080007ff 	.word	0x080007ff
 8000770:	08000805 	.word	0x08000805
 8000774:	0800080b 	.word	0x0800080b
 8000778:	08000811 	.word	0x08000811
 800077c:	08000817 	.word	0x08000817
 8000780:	08000859 	.word	0x08000859
 8000784:	08000859 	.word	0x08000859
 8000788:	08000859 	.word	0x08000859
 800078c:	08000859 	.word	0x08000859
 8000790:	0800081d 	.word	0x0800081d
 8000794:	08000823 	.word	0x08000823
 8000798:	08000859 	.word	0x08000859
 800079c:	08000859 	.word	0x08000859
 80007a0:	08000859 	.word	0x08000859
 80007a4:	08000829 	.word	0x08000829
 80007a8:	08000859 	.word	0x08000859
 80007ac:	08000859 	.word	0x08000859
 80007b0:	0800082f 	.word	0x0800082f
 80007b4:	08000835 	.word	0x08000835
 80007b8:	0800083b 	.word	0x0800083b
 80007bc:	08000841 	.word	0x08000841
 80007c0:	08000847 	.word	0x08000847
 80007c4:	08000859 	.word	0x08000859
 80007c8:	08000859 	.word	0x08000859
 80007cc:	0800084d 	.word	0x0800084d
 80007d0:	08000853 	.word	0x08000853
    {
    case  0x00:
        p = "       OK       ";
 80007d4:	4b25      	ldr	r3, [pc, #148]	; (800086c <EnsureMessage+0x134>)
 80007d6:	60fb      	str	r3, [r7, #12]
        break;
 80007d8:	e041      	b.n	800085e <EnsureMessage+0x126>
    case  0x01:
        p = " Packet receive error ";
 80007da:	4b25      	ldr	r3, [pc, #148]	; (8000870 <EnsureMessage+0x138>)
 80007dc:	60fb      	str	r3, [r7, #12]
        break;
 80007de:	e03e      	b.n	800085e <EnsureMessage+0x126>
    case  0x02:
        p = " No finger on sensor ";
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <EnsureMessage+0x13c>)
 80007e2:	60fb      	str	r3, [r7, #12]
        break;
 80007e4:	e03b      	b.n	800085e <EnsureMessage+0x126>
    case  0x03:
        p = " Failed to capture image ";
 80007e6:	4b24      	ldr	r3, [pc, #144]	; (8000878 <EnsureMessage+0x140>)
 80007e8:	60fb      	str	r3, [r7, #12]
        break;
 80007ea:	e038      	b.n	800085e <EnsureMessage+0x126>
    case  0x04:
        p = " Finger too dry/light ";
 80007ec:	4b23      	ldr	r3, [pc, #140]	; (800087c <EnsureMessage+0x144>)
 80007ee:	60fb      	str	r3, [r7, #12]
        break;
 80007f0:	e035      	b.n	800085e <EnsureMessage+0x126>
    case  0x05:
        p = " Finger too wet/blurred ";
 80007f2:	4b23      	ldr	r3, [pc, #140]	; (8000880 <EnsureMessage+0x148>)
 80007f4:	60fb      	str	r3, [r7, #12]
        break;
 80007f6:	e032      	b.n	800085e <EnsureMessage+0x126>
    case  0x06:
        p = " Fingerprint too messy ";
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <EnsureMessage+0x14c>)
 80007fa:	60fb      	str	r3, [r7, #12]
        break;
 80007fc:	e02f      	b.n	800085e <EnsureMessage+0x126>
    case  0x07:
        p = " Too few features ";
 80007fe:	4b22      	ldr	r3, [pc, #136]	; (8000888 <EnsureMessage+0x150>)
 8000800:	60fb      	str	r3, [r7, #12]
        break;
 8000802:	e02c      	b.n	800085e <EnsureMessage+0x126>
    case  0x08:
        p = " Fingerprint mismatch ";
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <EnsureMessage+0x154>)
 8000806:	60fb      	str	r3, [r7, #12]
        break;
 8000808:	e029      	b.n	800085e <EnsureMessage+0x126>
    case  0x09:
        p = " No fingerprint found ";
 800080a:	4b21      	ldr	r3, [pc, #132]	; (8000890 <EnsureMessage+0x158>)
 800080c:	60fb      	str	r3, [r7, #12]
        break;
 800080e:	e026      	b.n	800085e <EnsureMessage+0x126>
    case  0x0a:
        p = " Feature merge failed ";
 8000810:	4b20      	ldr	r3, [pc, #128]	; (8000894 <EnsureMessage+0x15c>)
 8000812:	60fb      	str	r3, [r7, #12]
        break;
 8000814:	e023      	b.n	800085e <EnsureMessage+0x126>
    case  0x0b:
        p = " Address out of range ";
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <EnsureMessage+0x160>)
 8000818:	60fb      	str	r3, [r7, #12]
        break;
 800081a:	e020      	b.n	800085e <EnsureMessage+0x126>
    case  0x10:
        p = " Template deletion failed ";
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <EnsureMessage+0x164>)
 800081e:	60fb      	str	r3, [r7, #12]
        break;
 8000820:	e01d      	b.n	800085e <EnsureMessage+0x126>
    case  0x11:
        p = " Clear database failed ";
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <EnsureMessage+0x168>)
 8000824:	60fb      	str	r3, [r7, #12]
        break;
 8000826:	e01a      	b.n	800085e <EnsureMessage+0x126>
    case  0x15:
        p = " Invalid image buffer ";
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <EnsureMessage+0x16c>)
 800082a:	60fb      	str	r3, [r7, #12]
        break;
 800082c:	e017      	b.n	800085e <EnsureMessage+0x126>
    case  0x18:
        p = " FLASH read/write error ";
 800082e:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <EnsureMessage+0x170>)
 8000830:	60fb      	str	r3, [r7, #12]
        break;
 8000832:	e014      	b.n	800085e <EnsureMessage+0x126>
    case  0x19:
        p = " Undefined error ";
 8000834:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <EnsureMessage+0x174>)
 8000836:	60fb      	str	r3, [r7, #12]
        break;
 8000838:	e011      	b.n	800085e <EnsureMessage+0x126>
    case  0x1a:
        p = " Invalid register number ";
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <EnsureMessage+0x178>)
 800083c:	60fb      	str	r3, [r7, #12]
        break;
 800083e:	e00e      	b.n	800085e <EnsureMessage+0x126>
    case  0x1b:
        p = " Register content error ";
 8000840:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <EnsureMessage+0x17c>)
 8000842:	60fb      	str	r3, [r7, #12]
        break;
 8000844:	e00b      	b.n	800085e <EnsureMessage+0x126>
    case  0x1c:
        p = " Notepad page error ";
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <EnsureMessage+0x180>)
 8000848:	60fb      	str	r3, [r7, #12]
        break;
 800084a:	e008      	b.n	800085e <EnsureMessage+0x126>
    case  0x1f:
        p = " Fingerprint library full ";
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <EnsureMessage+0x184>)
 800084e:	60fb      	str	r3, [r7, #12]
        break;
 8000850:	e005      	b.n	800085e <EnsureMessage+0x126>
    case  0x20:
        p = " Address error ";
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <EnsureMessage+0x188>)
 8000854:	60fb      	str	r3, [r7, #12]
        break;
 8000856:	e002      	b.n	800085e <EnsureMessage+0x126>
    default :
        p = " Invalid confirmation code ";
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <EnsureMessage+0x18c>)
 800085a:	60fb      	str	r3, [r7, #12]
        break;
 800085c:	bf00      	nop
    }
    return p;
 800085e:	68fb      	ldr	r3, [r7, #12]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	080066e0 	.word	0x080066e0
 8000870:	080066f4 	.word	0x080066f4
 8000874:	0800670c 	.word	0x0800670c
 8000878:	08006724 	.word	0x08006724
 800087c:	08006740 	.word	0x08006740
 8000880:	08006758 	.word	0x08006758
 8000884:	08006774 	.word	0x08006774
 8000888:	0800678c 	.word	0x0800678c
 800088c:	080067a0 	.word	0x080067a0
 8000890:	080067b8 	.word	0x080067b8
 8000894:	080067d0 	.word	0x080067d0
 8000898:	080067e8 	.word	0x080067e8
 800089c:	08006800 	.word	0x08006800
 80008a0:	0800681c 	.word	0x0800681c
 80008a4:	08006834 	.word	0x08006834
 80008a8:	0800684c 	.word	0x0800684c
 80008ac:	08006868 	.word	0x08006868
 80008b0:	0800687c 	.word	0x0800687c
 80008b4:	08006898 	.word	0x08006898
 80008b8:	080068b4 	.word	0x080068b4
 80008bc:	080068cc 	.word	0x080068cc
 80008c0:	080068e8 	.word	0x080068e8
 80008c4:	080068f8 	.word	0x080068f8

080008c8 <ShowErrMessage>:


//显示确认码错误信息
void ShowErrMessage(uint8_t ensure)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	; 0x30
 80008cc:	af02      	add	r7, sp, #8
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
    // 清空屏幕显示错误信息
    ssd1306_Fill(Black);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f001 fdc2 	bl	800245c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80008d8:	2100      	movs	r1, #0
 80008da:	2000      	movs	r0, #0
 80008dc:	f001 ff08 	bl	80026f0 <ssd1306_SetCursor>
    ssd1306_WriteString("Error:", Font_7x10, White);
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <ShowErrMessage+0x80>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	9200      	str	r2, [sp, #0]
 80008e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008e8:	4818      	ldr	r0, [pc, #96]	; (800094c <ShowErrMessage+0x84>)
 80008ea:	f001 fedb 	bl	80026a4 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 80008ee:	2114      	movs	r1, #20
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 fefd 	bl	80026f0 <ssd1306_SetCursor>

    // 将错误信息从 const char* 转为非 const 类型以避免警告
    char errorMessage[32];
    strncpy(errorMessage, EnsureMessage(ensure), sizeof(errorMessage) - 1);
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff1d 	bl	8000738 <EnsureMessage>
 80008fe:	4601      	mov	r1, r0
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	221f      	movs	r2, #31
 8000906:	4618      	mov	r0, r3
 8000908:	f004 ff32 	bl	8005770 <strncpy>
    errorMessage[sizeof(errorMessage) - 1] = '\0'; // 确保字符串以空字符结尾
 800090c:	2300      	movs	r3, #0
 800090e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    ssd1306_WriteString(errorMessage, Font_6x8, White);
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <ShowErrMessage+0x88>)
 8000914:	f107 0008 	add.w	r0, r7, #8
 8000918:	2201      	movs	r2, #1
 800091a:	9200      	str	r2, [sp, #0]
 800091c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800091e:	f001 fec1 	bl	80026a4 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000922:	f001 fdb3 	bl	800248c <ssd1306_UpdateScreen>
    HAL_Delay(1500);
 8000926:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800092a:	f002 fa5d 	bl	8002de8 <HAL_Delay>

    // 同时输出到串口
    printf("%s\r\n", EnsureMessage(ensure));
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff01 	bl	8000738 <EnsureMessage>
 8000936:	4603      	mov	r3, r0
 8000938:	4619      	mov	r1, r3
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <ShowErrMessage+0x8c>)
 800093c:	f004 fdec 	bl	8005518 <iprintf>
}
 8000940:	bf00      	nop
 8000942:	3728      	adds	r7, #40	; 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	08007a20 	.word	0x08007a20
 800094c:	08006914 	.word	0x08006914
 8000950:	08007a14 	.word	0x08007a14
 8000954:	0800691c 	.word	0x0800691c

08000958 <Record_FR>:

//录指纹
extern uint8_t keyPressed;

void Record_FR(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	; 0x30
 800095c:	af02      	add	r7, sp, #8
    uint8_t ensure, step = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t retryCount = 0; // Retry count for each step
 8000964:	2300      	movs	r3, #0
 8000966:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    char message[32];

    extern uint8_t ID_NUM;
    printf("%d\r\n", ID_NUM);
 800096a:	4ba9      	ldr	r3, [pc, #676]	; (8000c10 <Record_FR+0x2b8>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4619      	mov	r1, r3
 8000970:	48a8      	ldr	r0, [pc, #672]	; (8000c14 <Record_FR+0x2bc>)
 8000972:	f004 fdd1 	bl	8005518 <iprintf>

    while (1)
    {
        ssd1306_Fill(Black);
 8000976:	2000      	movs	r0, #0
 8000978:	f001 fd70 	bl	800245c <ssd1306_Fill>
        switch (step)
 800097c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000980:	2b04      	cmp	r3, #4
 8000982:	f200 811e 	bhi.w	8000bc2 <Record_FR+0x26a>
 8000986:	a201      	add	r2, pc, #4	; (adr r2, 800098c <Record_FR+0x34>)
 8000988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098c:	080009a1 	.word	0x080009a1
 8000990:	08000a23 	.word	0x08000a23
 8000994:	08000ab3 	.word	0x08000ab3
 8000998:	08000aff 	.word	0x08000aff
 800099c:	08000b4b 	.word	0x08000b4b
        {
        case 0:
            // Prompt user to place finger
        	if (keyPressed == 'B'){
 80009a0:	4b9d      	ldr	r3, [pc, #628]	; (8000c18 <Record_FR+0x2c0>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b42      	cmp	r3, #66	; 0x42
 80009a6:	d103      	bne.n	80009b0 <Record_FR+0x58>
        		keyPressed = 0;
 80009a8:	4b9b      	ldr	r3, [pc, #620]	; (8000c18 <Record_FR+0x2c0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
        		return;
 80009ae:	e12c      	b.n	8000c0a <Record_FR+0x2b2>
        	}

            ssd1306_SetCursor(0, 0);
 80009b0:	2100      	movs	r1, #0
 80009b2:	2000      	movs	r0, #0
 80009b4:	f001 fe9c 	bl	80026f0 <ssd1306_SetCursor>
            ssd1306_WriteString("Place Finger", Font_7x10, White);
 80009b8:	4b98      	ldr	r3, [pc, #608]	; (8000c1c <Record_FR+0x2c4>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	9200      	str	r2, [sp, #0]
 80009be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009c0:	4897      	ldr	r0, [pc, #604]	; (8000c20 <Record_FR+0x2c8>)
 80009c2:	f001 fe6f 	bl	80026a4 <ssd1306_WriteString>
            ssd1306_SetCursor(0, 20);
 80009c6:	2114      	movs	r1, #20
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 fe91 	bl	80026f0 <ssd1306_SetCursor>
            ssd1306_WriteString("Hold B to exit", Font_7x10, White);
 80009ce:	4b93      	ldr	r3, [pc, #588]	; (8000c1c <Record_FR+0x2c4>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	9200      	str	r2, [sp, #0]
 80009d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009d6:	4893      	ldr	r0, [pc, #588]	; (8000c24 <Record_FR+0x2cc>)
 80009d8:	f001 fe64 	bl	80026a4 <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 80009dc:	f001 fd56 	bl	800248c <ssd1306_UpdateScreen>

            ensure = PS_GetImage();
 80009e0:	f7ff fcde 	bl	80003a0 <PS_GetImage>
 80009e4:	4603      	mov	r3, r0
 80009e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

            if (ensure == 0x00)
 80009ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f040 80e6 	bne.w	8000bc0 <Record_FR+0x268>
            {
                ensure = PS_GenChar(CharBuffer1); // Generate feature from fingerprint
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff fcfc 	bl	80003f2 <PS_GenChar>
 80009fa:	4603      	mov	r3, r0
 80009fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                if (ensure == 0x00)
 8000a00:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d106      	bne.n	8000a16 <Record_FR+0xbe>
                {
                    retryCount = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    step = 1; // Move to the next step
 8000a0e:	2301      	movs	r3, #1
 8000a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                else
                {
                    ShowErrMessage(ensure);
                }
            }
            break;
 8000a14:	e0d4      	b.n	8000bc0 <Record_FR+0x268>
                    ShowErrMessage(ensure);
 8000a16:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ff54 	bl	80008c8 <ShowErrMessage>
            break;
 8000a20:	e0ce      	b.n	8000bc0 <Record_FR+0x268>

        case 1:
            // Prompt user to place finger again
            ssd1306_SetCursor(0, 0);
 8000a22:	2100      	movs	r1, #0
 8000a24:	2000      	movs	r0, #0
 8000a26:	f001 fe63 	bl	80026f0 <ssd1306_SetCursor>
            ssd1306_WriteString("Put away", Font_7x10, White);
 8000a2a:	4b7c      	ldr	r3, [pc, #496]	; (8000c1c <Record_FR+0x2c4>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	9200      	str	r2, [sp, #0]
 8000a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a32:	487d      	ldr	r0, [pc, #500]	; (8000c28 <Record_FR+0x2d0>)
 8000a34:	f001 fe36 	bl	80026a4 <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 8000a38:	f001 fd28 	bl	800248c <ssd1306_UpdateScreen>
            HAL_Delay(1500);
 8000a3c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000a40:	f002 f9d2 	bl	8002de8 <HAL_Delay>
        	ssd1306_SetCursor(0, 0);
 8000a44:	2100      	movs	r1, #0
 8000a46:	2000      	movs	r0, #0
 8000a48:	f001 fe52 	bl	80026f0 <ssd1306_SetCursor>
            ssd1306_WriteString("Place Again", Font_7x10, White);
 8000a4c:	4b73      	ldr	r3, [pc, #460]	; (8000c1c <Record_FR+0x2c4>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	9200      	str	r2, [sp, #0]
 8000a52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a54:	4875      	ldr	r0, [pc, #468]	; (8000c2c <Record_FR+0x2d4>)
 8000a56:	f001 fe25 	bl	80026a4 <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 8000a5a:	f001 fd17 	bl	800248c <ssd1306_UpdateScreen>
            HAL_Delay(1500);
 8000a5e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000a62:	f002 f9c1 	bl	8002de8 <HAL_Delay>

            ensure = PS_GetImage();
 8000a66:	f7ff fc9b 	bl	80003a0 <PS_GetImage>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            if (ensure == 0x00)
 8000a70:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d116      	bne.n	8000aa6 <Record_FR+0x14e>
            {
                ensure = PS_GenChar(CharBuffer2); // Generate second feature
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f7ff fcba 	bl	80003f2 <PS_GenChar>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                if (ensure == 0x00)
 8000a84:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d106      	bne.n	8000a9a <Record_FR+0x142>
                {
                    retryCount = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    step = 2; // Move to the next step
 8000a92:	2302      	movs	r3, #2
 8000a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                ShowErrMessage(ensure);
            }
            break;
 8000a98:	e093      	b.n	8000bc2 <Record_FR+0x26a>
                    ShowErrMessage(ensure);
 8000a9a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ff12 	bl	80008c8 <ShowErrMessage>
            break;
 8000aa4:	e08d      	b.n	8000bc2 <Record_FR+0x26a>
                ShowErrMessage(ensure);
 8000aa6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ff0c 	bl	80008c8 <ShowErrMessage>
            break;
 8000ab0:	e087      	b.n	8000bc2 <Record_FR+0x26a>

        case 2:
            // Match the two features
            ssd1306_SetCursor(0, 0);
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f001 fe1b 	bl	80026f0 <ssd1306_SetCursor>
            ssd1306_WriteString("Matching", Font_7x10, White);
 8000aba:	4b58      	ldr	r3, [pc, #352]	; (8000c1c <Record_FR+0x2c4>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	9200      	str	r2, [sp, #0]
 8000ac0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ac2:	485b      	ldr	r0, [pc, #364]	; (8000c30 <Record_FR+0x2d8>)
 8000ac4:	f001 fdee 	bl	80026a4 <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 8000ac8:	f001 fce0 	bl	800248c <ssd1306_UpdateScreen>
            HAL_Delay(250);
 8000acc:	20fa      	movs	r0, #250	; 0xfa
 8000ace:	f002 f98b 	bl	8002de8 <HAL_Delay>

            ensure = PS_Match();
 8000ad2:	f7ff fcbf 	bl	8000454 <PS_Match>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            if (ensure == 0x00)
 8000adc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d103      	bne.n	8000aec <Record_FR+0x194>
            {
                step = 3; // Move to the next step
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            else
            {
                ShowErrMessage(ensure);
                step = 0; // Restart the process if match fails
            }
            break;
 8000aea:	e06a      	b.n	8000bc2 <Record_FR+0x26a>
                ShowErrMessage(ensure);
 8000aec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fee9 	bl	80008c8 <ShowErrMessage>
                step = 0; // Restart the process if match fails
 8000af6:	2300      	movs	r3, #0
 8000af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8000afc:	e061      	b.n	8000bc2 <Record_FR+0x26a>

        case 3:
            // Register the fingerprint template
            ssd1306_SetCursor(0, 0);
 8000afe:	2100      	movs	r1, #0
 8000b00:	2000      	movs	r0, #0
 8000b02:	f001 fdf5 	bl	80026f0 <ssd1306_SetCursor>
            ssd1306_WriteString("Registering", Font_7x10, White);
 8000b06:	4b45      	ldr	r3, [pc, #276]	; (8000c1c <Record_FR+0x2c4>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	9200      	str	r2, [sp, #0]
 8000b0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b0e:	4849      	ldr	r0, [pc, #292]	; (8000c34 <Record_FR+0x2dc>)
 8000b10:	f001 fdc8 	bl	80026a4 <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 8000b14:	f001 fcba 	bl	800248c <ssd1306_UpdateScreen>
            HAL_Delay(250);
 8000b18:	20fa      	movs	r0, #250	; 0xfa
 8000b1a:	f002 f965 	bl	8002de8 <HAL_Delay>

            ensure = PS_RegModel();
 8000b1e:	f7ff fcc2 	bl	80004a6 <PS_RegModel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            if (ensure == 0x00)
 8000b28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d103      	bne.n	8000b38 <Record_FR+0x1e0>
            {
                step = 4; // Move to the storage step
 8000b30:	2304      	movs	r3, #4
 8000b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            else
            {
                ShowErrMessage(ensure);
                step = 0; // Restart the process if registration fails
            }
            break;
 8000b36:	e044      	b.n	8000bc2 <Record_FR+0x26a>
                ShowErrMessage(ensure);
 8000b38:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fec3 	bl	80008c8 <ShowErrMessage>
                step = 0; // Restart the process if registration fails
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8000b48:	e03b      	b.n	8000bc2 <Record_FR+0x26a>

        case 4:
            // Store the fingerprint template
            ssd1306_SetCursor(0, 0);
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f001 fdcf 	bl	80026f0 <ssd1306_SetCursor>
            ssd1306_WriteString("Storing ID:", Font_7x10, White);
 8000b52:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <Record_FR+0x2c4>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	9200      	str	r2, [sp, #0]
 8000b58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b5a:	4837      	ldr	r0, [pc, #220]	; (8000c38 <Record_FR+0x2e0>)
 8000b5c:	f001 fda2 	bl	80026a4 <ssd1306_WriteString>
            sprintf(message, "ID: %d", ID_NUM);
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <Record_FR+0x2b8>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4934      	ldr	r1, [pc, #208]	; (8000c3c <Record_FR+0x2e4>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f004 fce6 	bl	800553c <siprintf>
            ssd1306_SetCursor(0, 20);
 8000b70:	2114      	movs	r1, #20
 8000b72:	2000      	movs	r0, #0
 8000b74:	f001 fdbc 	bl	80026f0 <ssd1306_SetCursor>
            ssd1306_WriteString(message, Font_7x10, White);
 8000b78:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <Record_FR+0x2c4>)
 8000b7a:	1d38      	adds	r0, r7, #4
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	9200      	str	r2, [sp, #0]
 8000b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b82:	f001 fd8f 	bl	80026a4 <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 8000b86:	f001 fc81 	bl	800248c <ssd1306_UpdateScreen>
            HAL_Delay(1500);
 8000b8a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000b8e:	f002 f92b 	bl	8002de8 <HAL_Delay>

            ensure = PS_StoreChar(CharBuffer2, ID_NUM);
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <Record_FR+0x2b8>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	4619      	mov	r1, r3
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f7ff fcac 	bl	80004f8 <PS_StoreChar>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            if (ensure == 0x00)
 8000ba6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d02c      	beq.n	8000c08 <Record_FR+0x2b0>
            {
                  return; // Successfully recorded and return to menu
            }
            else
            {
                ShowErrMessage(ensure);
 8000bae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fe88 	bl	80008c8 <ShowErrMessage>
                step = 0; // Restart the process if storage fails
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8000bbe:	e000      	b.n	8000bc2 <Record_FR+0x26a>
            break;
 8000bc0:	bf00      	nop
        }

        // Retry handling
        retryCount++;
 8000bc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        if (retryCount >= 5)
 8000bcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d914      	bls.n	8000bfe <Record_FR+0x2a6>
        {
            ssd1306_Fill(Black);
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f001 fc41 	bl	800245c <ssd1306_Fill>
            ssd1306_SetCursor(0, 0);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f001 fd87 	bl	80026f0 <ssd1306_SetCursor>
            ssd1306_WriteString("Timeout!", Font_7x10, White);
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <Record_FR+0x2c4>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	9200      	str	r2, [sp, #0]
 8000be8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bea:	4815      	ldr	r0, [pc, #84]	; (8000c40 <Record_FR+0x2e8>)
 8000bec:	f001 fd5a 	bl	80026a4 <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 8000bf0:	f001 fc4c 	bl	800248c <ssd1306_UpdateScreen>
            HAL_Delay(1500);
 8000bf4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000bf8:	f002 f8f6 	bl	8002de8 <HAL_Delay>
            break; // Return to menu after timeout
 8000bfc:	e005      	b.n	8000c0a <Record_FR+0x2b2>
        }

        HAL_Delay(500);
 8000bfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c02:	f002 f8f1 	bl	8002de8 <HAL_Delay>
        ssd1306_Fill(Black);
 8000c06:	e6b6      	b.n	8000976 <Record_FR+0x1e>
                  return; // Successfully recorded and return to menu
 8000c08:	bf00      	nop
    }
}
 8000c0a:	3728      	adds	r7, #40	; 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200002ad 	.word	0x200002ad
 8000c14:	08006a18 	.word	0x08006a18
 8000c18:	200002a8 	.word	0x200002a8
 8000c1c:	08007a20 	.word	0x08007a20
 8000c20:	08006a20 	.word	0x08006a20
 8000c24:	08006a30 	.word	0x08006a30
 8000c28:	08006a40 	.word	0x08006a40
 8000c2c:	08006a4c 	.word	0x08006a4c
 8000c30:	08006a58 	.word	0x08006a58
 8000c34:	08006a64 	.word	0x08006a64
 8000c38:	08006a70 	.word	0x08006a70
 8000c3c:	08006a7c 	.word	0x08006a7c
 8000c40:	08006a84 	.word	0x08006a84

08000c44 <verify_FR>:

int verify_FR(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af02      	add	r7, sp, #8
  char message[20];

  while(1)
  {
    //key_num = KEY_Scan(0);
    ensure = PS_GetImage();
 8000c4a:	f7ff fba9 	bl	80003a0 <PS_GetImage>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	77fb      	strb	r3, [r7, #31]
    if(ensure == 0x00) //获取图像成功
 8000c52:	7ffb      	ldrb	r3, [r7, #31]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f8      	bne.n	8000c4a <verify_FR+0x6>
    {
      ensure = PS_GenChar(CharBuffer1);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff fbca 	bl	80003f2 <PS_GenChar>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	77fb      	strb	r3, [r7, #31]
      if(ensure == 0x00) //生成特征成功
 8000c62:	7ffb      	ldrb	r3, [r7, #31]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1f0      	bne.n	8000c4a <verify_FR+0x6>
      {
        ensure = PS_HighSpeedSearch(CharBuffer1, 0, 99, &seach);
 8000c68:	f107 0318 	add.w	r3, r7, #24
 8000c6c:	2263      	movs	r2, #99	; 0x63
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2001      	movs	r0, #1
 8000c72:	f7ff fce3 	bl	800063c <PS_HighSpeedSearch>
 8000c76:	4603      	mov	r3, r0
 8000c78:	77fb      	strb	r3, [r7, #31]
        if(ensure == 0x00) //搜索成功
 8000c7a:	7ffb      	ldrb	r3, [r7, #31]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d127      	bne.n	8000cd0 <verify_FR+0x8c>
        {
          ssd1306_Fill(Black);
 8000c80:	2000      	movs	r0, #0
 8000c82:	f001 fbeb 	bl	800245c <ssd1306_Fill>
          ssd1306_SetCursor(0, 0);
 8000c86:	2100      	movs	r1, #0
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f001 fd31 	bl	80026f0 <ssd1306_SetCursor>
          ssd1306_WriteString("Unlock!", Font_7x10, White); // 显示解锁成功
 8000c8e:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <verify_FR+0xd4>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	9200      	str	r2, [sp, #0]
 8000c94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c96:	4821      	ldr	r0, [pc, #132]	; (8000d1c <verify_FR+0xd8>)
 8000c98:	f001 fd04 	bl	80026a4 <ssd1306_WriteString>

          sprintf(message, "ID: %d", seach.pageID); // 将 ID 转换为字符串
 8000c9c:	8b3b      	ldrh	r3, [r7, #24]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	491f      	ldr	r1, [pc, #124]	; (8000d20 <verify_FR+0xdc>)
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f004 fc49 	bl	800553c <siprintf>
          ssd1306_SetCursor(0, 20);
 8000caa:	2114      	movs	r1, #20
 8000cac:	2000      	movs	r0, #0
 8000cae:	f001 fd1f 	bl	80026f0 <ssd1306_SetCursor>
          ssd1306_WriteString(message, Font_7x10, White); // Show fingerprint ID
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <verify_FR+0xd4>)
 8000cb4:	1d38      	adds	r0, r7, #4
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	9200      	str	r2, [sp, #0]
 8000cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cbc:	f001 fcf2 	bl	80026a4 <ssd1306_WriteString>

          ssd1306_UpdateScreen();
 8000cc0:	f001 fbe4 	bl	800248c <ssd1306_UpdateScreen>
          HAL_Delay(2000);
 8000cc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cc8:	f002 f88e 	bl	8002de8 <HAL_Delay>
          return 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e01f      	b.n	8000d10 <verify_FR+0xcc>
        }
        else
        {
          ssd1306_Fill(Black);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f001 fbc3 	bl	800245c <ssd1306_Fill>
          ssd1306_SetCursor(0, 0);
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f001 fd09 	bl	80026f0 <ssd1306_SetCursor>
          ssd1306_WriteString("Verification", Font_7x10, White);
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <verify_FR+0xd4>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	9200      	str	r2, [sp, #0]
 8000ce4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ce6:	480f      	ldr	r0, [pc, #60]	; (8000d24 <verify_FR+0xe0>)
 8000ce8:	f001 fcdc 	bl	80026a4 <ssd1306_WriteString>
          ssd1306_SetCursor(0, 11);
 8000cec:	210b      	movs	r1, #11
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f001 fcfe 	bl	80026f0 <ssd1306_SetCursor>
          ssd1306_WriteString("Failed!", Font_7x10, White);
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <verify_FR+0xd4>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	9200      	str	r2, [sp, #0]
 8000cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cfc:	480a      	ldr	r0, [pc, #40]	; (8000d28 <verify_FR+0xe4>)
 8000cfe:	f001 fcd1 	bl	80026a4 <ssd1306_WriteString>
          ssd1306_UpdateScreen();
 8000d02:	f001 fbc3 	bl	800248c <ssd1306_UpdateScreen>
          HAL_Delay(2000); // show for 2 seconds
 8000d06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d0a:	f002 f86d 	bl	8002de8 <HAL_Delay>
          return 0;
 8000d0e:	2300      	movs	r3, #0
        }
      }
    }
  }
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3720      	adds	r7, #32
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	08007a20 	.word	0x08007a20
 8000d1c:	08006a90 	.word	0x08006a90
 8000d20:	08006a7c 	.word	0x08006a7c
 8000d24:	08006a98 	.word	0x08006a98
 8000d28:	08006aa8 	.word	0x08006aa8

08000d2c <Del_FR>:

void Del_FR(uint16_t id) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af02      	add	r7, sp, #8
 8000d32:	4603      	mov	r3, r0
 8000d34:	80fb      	strh	r3, [r7, #6]
    uint8_t ensure;
    ssd1306_Fill(Black);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f001 fb90 	bl	800245c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f001 fcd6 	bl	80026f0 <ssd1306_SetCursor>
    ssd1306_WriteString("Deleting ID:", Font_7x10, White);
 8000d44:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <Del_FR+0xbc>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	9200      	str	r2, [sp, #0]
 8000d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d4c:	4827      	ldr	r0, [pc, #156]	; (8000dec <Del_FR+0xc0>)
 8000d4e:	f001 fca9 	bl	80026a4 <ssd1306_WriteString>

    char message[20];
    sprintf(message, "ID: %d", id);
 8000d52:	88fa      	ldrh	r2, [r7, #6]
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	4925      	ldr	r1, [pc, #148]	; (8000df0 <Del_FR+0xc4>)
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f004 fbee 	bl	800553c <siprintf>
    ssd1306_SetCursor(0, 20);
 8000d60:	2114      	movs	r1, #20
 8000d62:	2000      	movs	r0, #0
 8000d64:	f001 fcc4 	bl	80026f0 <ssd1306_SetCursor>
    ssd1306_WriteString(message, Font_7x10, White);
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <Del_FR+0xbc>)
 8000d6a:	f107 0008 	add.w	r0, r7, #8
 8000d6e:	2201      	movs	r2, #1
 8000d70:	9200      	str	r2, [sp, #0]
 8000d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d74:	f001 fc96 	bl	80026a4 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000d78:	f001 fb88 	bl	800248c <ssd1306_UpdateScreen>
    HAL_Delay(2000);
 8000d7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d80:	f002 f832 	bl	8002de8 <HAL_Delay>

    ensure = PS_DeletChar(id, 1);
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	2101      	movs	r1, #1
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fbff 	bl	800058c <PS_DeletChar>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	77fb      	strb	r3, [r7, #31]
    if (ensure == 0x00) {
 8000d92:	7ffb      	ldrb	r3, [r7, #31]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d119      	bne.n	8000dcc <Del_FR+0xa0>
        ssd1306_Fill(Black);
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f001 fb5f 	bl	800245c <ssd1306_Fill>
        ssd1306_SetCursor(0, 20);
 8000d9e:	2114      	movs	r1, #20
 8000da0:	2000      	movs	r0, #0
 8000da2:	f001 fca5 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString("Deleted", Font_7x10, White);
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <Del_FR+0xbc>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	9200      	str	r2, [sp, #0]
 8000dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dae:	4811      	ldr	r0, [pc, #68]	; (8000df4 <Del_FR+0xc8>)
 8000db0:	f001 fc78 	bl	80026a4 <ssd1306_WriteString>
        ssd1306_SetCursor(0, 40);
 8000db4:	2128      	movs	r1, #40	; 0x28
 8000db6:	2000      	movs	r0, #0
 8000db8:	f001 fc9a 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString("Successfully", Font_7x10, White);
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <Del_FR+0xbc>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	9200      	str	r2, [sp, #0]
 8000dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <Del_FR+0xcc>)
 8000dc6:	f001 fc6d 	bl	80026a4 <ssd1306_WriteString>
 8000dca:	e003      	b.n	8000dd4 <Del_FR+0xa8>
    } else {
        ShowErrMessage(ensure);
 8000dcc:	7ffb      	ldrb	r3, [r7, #31]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fd7a 	bl	80008c8 <ShowErrMessage>
    }
    ssd1306_UpdateScreen();
 8000dd4:	f001 fb5a 	bl	800248c <ssd1306_UpdateScreen>
    HAL_Delay(2000);
 8000dd8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ddc:	f002 f804 	bl	8002de8 <HAL_Delay>
}
 8000de0:	bf00      	nop
 8000de2:	3720      	adds	r7, #32
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	08007a20 	.word	0x08007a20
 8000dec:	08006ab0 	.word	0x08006ab0
 8000df0:	08006a7c 	.word	0x08006a7c
 8000df4:	08006ac0 	.word	0x08006ac0
 8000df8:	08006ac8 	.word	0x08006ac8

08000dfc <delay_us>:

#include "delay.h"

#define CPU_FREQUENCY_MHZ    72		// STM32时钟主频
void delay_us(__IO uint32_t delay)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
    int last, curr, val;
    int temp;

    while (delay != 0)
 8000e04:	e037      	b.n	8000e76 <delay_us+0x7a>
    {
        temp = delay > 900 ? 900 : delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000e0c:	d801      	bhi.n	8000e12 <delay_us+0x16>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	e001      	b.n	8000e16 <delay_us+0x1a>
 8000e12:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000e16:	617b      	str	r3, [r7, #20]
        last = SysTick->VAL;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <delay_us+0x8c>)
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	613b      	str	r3, [r7, #16]
        curr = last - CPU_FREQUENCY_MHZ * temp;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	f06f 0247 	mvn.w	r2, #71	; 0x47
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
        if (curr >= 0)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0b      	blt.n	8000e4c <delay_us+0x50>
        {
            do
            {
                val = SysTick->VAL;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <delay_us+0x8c>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	60bb      	str	r3, [r7, #8]
            }
            while ((val < last) && (val >= curr));
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	da15      	bge.n	8000e6e <delay_us+0x72>
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	daf4      	bge.n	8000e34 <delay_us+0x38>
 8000e4a:	e010      	b.n	8000e6e <delay_us+0x72>
        }
        else
        {
            curr += CPU_FREQUENCY_MHZ * 1000;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000e52:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000e56:	60fb      	str	r3, [r7, #12]
            do
            {
                val = SysTick->VAL;
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <delay_us+0x8c>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	60bb      	str	r3, [r7, #8]
            }
            while ((val <= last) || (val > curr));
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	ddf8      	ble.n	8000e58 <delay_us+0x5c>
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	dcf4      	bgt.n	8000e58 <delay_us+0x5c>
        }
        delay -= temp;
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	607b      	str	r3, [r7, #4]
    while (delay != 0)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1c4      	bne.n	8000e06 <delay_us+0xa>
    }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	371c      	adds	r7, #28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <delay_ms>:
/***************
	* 毫秒级延时
	*HAL函数HAL_Delay();
	******************/
void delay_ms(uint32_t ms)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
    uint32_t i;
    for(i = 0; i < ms; i++)
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	e006      	b.n	8000ea8 <delay_ms+0x1c>
        delay_us(1000);
 8000e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e9e:	f7ff ffad 	bl	8000dfc <delay_us>
    for(i = 0; i < ms; i++)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d3f4      	bcc.n	8000e9a <delay_ms+0xe>
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <MX_GPIO_Init+0xc8>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a2b      	ldr	r2, [pc, #172]	; (8000f84 <MX_GPIO_Init+0xc8>)
 8000ed6:	f043 0320 	orr.w	r3, r3, #32
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <MX_GPIO_Init+0xc8>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0320 	and.w	r3, r3, #32
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <MX_GPIO_Init+0xc8>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a25      	ldr	r2, [pc, #148]	; (8000f84 <MX_GPIO_Init+0xc8>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <MX_GPIO_Init+0xc8>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <MX_GPIO_Init+0xc8>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a1f      	ldr	r2, [pc, #124]	; (8000f84 <MX_GPIO_Init+0xc8>)
 8000f06:	f043 0308 	orr.w	r3, r3, #8
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <MX_GPIO_Init+0xc8>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0308 	and.w	r3, r3, #8
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f1e:	481a      	ldr	r0, [pc, #104]	; (8000f88 <MX_GPIO_Init+0xcc>)
 8000f20:	f002 fae1 	bl	80034e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f24:	23f0      	movs	r3, #240	; 0xf0
 8000f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_GPIO_Init+0xd0>)
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4619      	mov	r1, r3
 8000f36:	4816      	ldr	r0, [pc, #88]	; (8000f90 <MX_GPIO_Init+0xd4>)
 8000f38:	f002 f93a 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f3c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	4619      	mov	r1, r3
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <MX_GPIO_Init+0xcc>)
 8000f56:	f002 f92b 	bl	80031b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	200a      	movs	r0, #10
 8000f60:	f002 f83d 	bl	8002fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f64:	200a      	movs	r0, #10
 8000f66:	f002 f856 	bl	8003016 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2017      	movs	r0, #23
 8000f70:	f002 f835 	bl	8002fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f74:	2017      	movs	r0, #23
 8000f76:	f002 f84e 	bl	8003016 <HAL_NVIC_EnableIRQ>

}
 8000f7a:	bf00      	nop
 8000f7c:	3720      	adds	r7, #32
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010c00 	.word	0x40010c00
 8000f8c:	10110000 	.word	0x10110000
 8000f90:	40010800 	.word	0x40010800

08000f94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_I2C1_Init+0x50>)
 8000f9a:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <MX_I2C1_Init+0x54>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_I2C1_Init+0x50>)
 8000fa0:	4a12      	ldr	r2, [pc, #72]	; (8000fec <MX_I2C1_Init+0x58>)
 8000fa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_I2C1_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_I2C1_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_I2C1_Init+0x50>)
 8000fb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fb6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <MX_I2C1_Init+0x50>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_I2C1_Init+0x50>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <MX_I2C1_Init+0x50>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <MX_I2C1_Init+0x50>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd0:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <MX_I2C1_Init+0x50>)
 8000fd2:	f002 fab9 	bl	8003548 <HAL_I2C_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fdc:	f000 fb48 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000023c 	.word	0x2000023c
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	000186a0 	.word	0x000186a0

08000ff0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a15      	ldr	r2, [pc, #84]	; (8001060 <HAL_I2C_MspInit+0x70>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d123      	bne.n	8001058 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_I2C_MspInit+0x74>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a13      	ldr	r2, [pc, #76]	; (8001064 <HAL_I2C_MspInit+0x74>)
 8001016:	f043 0308 	orr.w	r3, r3, #8
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_I2C_MspInit+0x74>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001028:	23c0      	movs	r3, #192	; 0xc0
 800102a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102c:	2312      	movs	r3, #18
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	4619      	mov	r1, r3
 800103a:	480b      	ldr	r0, [pc, #44]	; (8001068 <HAL_I2C_MspInit+0x78>)
 800103c:	f002 f8b8 	bl	80031b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_I2C_MspInit+0x74>)
 8001042:	69db      	ldr	r3, [r3, #28]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_I2C_MspInit+0x74>)
 8001046:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800104a:	61d3      	str	r3, [r2, #28]
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_I2C_MspInit+0x74>)
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001058:	bf00      	nop
 800105a:	3720      	adds	r7, #32
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40005400 	.word	0x40005400
 8001064:	40021000 	.word	0x40021000
 8001068:	40010c00 	.word	0x40010c00

0800106c <HAL_UART_RxCpltCallback>:
uint8_t RX_dat = 0;
uint8_t BT_Flag;
uint8_t facial_flag = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // interrupt function
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    if ((flag == 0) && (huart->Instance == USART2)) // make sure the message comes from UART2
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <HAL_UART_RxCpltCallback+0x64>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10b      	bne.n	8001094 <HAL_UART_RxCpltCallback+0x28>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <HAL_UART_RxCpltCallback+0x68>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d106      	bne.n	8001094 <HAL_UART_RxCpltCallback+0x28>
    {
        if (RX_dat == 'o') // when the board receives 'o'
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_UART_RxCpltCallback+0x6c>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b6f      	cmp	r3, #111	; 0x6f
 800108c:	d102      	bne.n	8001094 <HAL_UART_RxCpltCallback+0x28>
        {
            BT_Flag = 1;
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <HAL_UART_RxCpltCallback+0x70>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
        }
    }


    if ((flag == 13) && (huart->Instance == USART1)) // make sure the message comes from UART2
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_UART_RxCpltCallback+0x64>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b0d      	cmp	r3, #13
 800109a:	d110      	bne.n	80010be <HAL_UART_RxCpltCallback+0x52>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <HAL_UART_RxCpltCallback+0x74>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d10b      	bne.n	80010be <HAL_UART_RxCpltCallback+0x52>
    {
        if (RX_dat == 'B') // when the board receives 'o'
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <HAL_UART_RxCpltCallback+0x6c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b42      	cmp	r3, #66	; 0x42
 80010ac:	d102      	bne.n	80010b4 <HAL_UART_RxCpltCallback+0x48>
        {
            facial_flag = 1;
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <HAL_UART_RxCpltCallback+0x78>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1, &RX_dat, 1); // enable interrupt again
 80010b4:	2201      	movs	r2, #1
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <HAL_UART_RxCpltCallback+0x6c>)
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <HAL_UART_RxCpltCallback+0x7c>)
 80010ba:	f003 fbdc 	bl	8004876 <HAL_UART_Receive_IT>
    }
    HAL_UART_Receive_IT(&huart2, &RX_dat, 1); // enable interrupt again
 80010be:	2201      	movs	r2, #1
 80010c0:	4905      	ldr	r1, [pc, #20]	; (80010d8 <HAL_UART_RxCpltCallback+0x6c>)
 80010c2:	480a      	ldr	r0, [pc, #40]	; (80010ec <HAL_UART_RxCpltCallback+0x80>)
 80010c4:	f003 fbd7 	bl	8004876 <HAL_UART_Receive_IT>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200002a9 	.word	0x200002a9
 80010d4:	40004400 	.word	0x40004400
 80010d8:	200002aa 	.word	0x200002aa
 80010dc:	200002ab 	.word	0x200002ab
 80010e0:	40013800 	.word	0x40013800
 80010e4:	200002ac 	.word	0x200002ac
 80010e8:	20000710 	.word	0x20000710
 80010ec:	20000758 	.word	0x20000758

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f4:	f001 fe16 	bl	8002d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f8:	f000 f8d0 	bl	800129c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fc:	f7ff fede 	bl	8000ebc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001100:	f7ff ff48 	bl	8000f94 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001104:	f001 fc92 	bl	8002a2c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001108:	f001 fce4 	bl	8002ad4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800110c:	f001 fcb8 	bl	8002a80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8001110:	f001 f93a 	bl	8002388 <ssd1306_Init>
  as608_init();
 8001114:	f7ff f8de 	bl	80002d4 <as608_init>
  HAL_UART_Receive_IT(&huart2,&RX_dat,1);//turn on the interrupt of uart2
 8001118:	2201      	movs	r2, #1
 800111a:	495b      	ldr	r1, [pc, #364]	; (8001288 <main+0x198>)
 800111c:	485b      	ldr	r0, [pc, #364]	; (800128c <main+0x19c>)
 800111e:	f003 fbaa 	bl	8004876 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      switch (flag) {
 8001122:	4b5b      	ldr	r3, [pc, #364]	; (8001290 <main+0x1a0>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b23      	cmp	r3, #35	; 0x23
 8001128:	f200 80a8 	bhi.w	800127c <main+0x18c>
 800112c:	a201      	add	r2, pc, #4	; (adr r2, 8001134 <main+0x44>)
 800112e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001132:	bf00      	nop
 8001134:	080011c5 	.word	0x080011c5
 8001138:	080011d3 	.word	0x080011d3
 800113c:	0800121b 	.word	0x0800121b
 8001140:	08001229 	.word	0x08001229
 8001144:	0800127d 	.word	0x0800127d
 8001148:	0800127d 	.word	0x0800127d
 800114c:	0800127d 	.word	0x0800127d
 8001150:	0800127d 	.word	0x0800127d
 8001154:	0800127d 	.word	0x0800127d
 8001158:	0800127d 	.word	0x0800127d
 800115c:	0800127d 	.word	0x0800127d
 8001160:	080011e1 	.word	0x080011e1
 8001164:	080011ef 	.word	0x080011ef
 8001168:	080011fd 	.word	0x080011fd
 800116c:	0800127d 	.word	0x0800127d
 8001170:	0800127d 	.word	0x0800127d
 8001174:	0800127d 	.word	0x0800127d
 8001178:	0800127d 	.word	0x0800127d
 800117c:	0800127d 	.word	0x0800127d
 8001180:	0800127d 	.word	0x0800127d
 8001184:	0800127d 	.word	0x0800127d
 8001188:	0800127d 	.word	0x0800127d
 800118c:	0800127d 	.word	0x0800127d
 8001190:	0800127d 	.word	0x0800127d
 8001194:	0800127d 	.word	0x0800127d
 8001198:	0800127d 	.word	0x0800127d
 800119c:	0800127d 	.word	0x0800127d
 80011a0:	0800127d 	.word	0x0800127d
 80011a4:	0800127d 	.word	0x0800127d
 80011a8:	0800127d 	.word	0x0800127d
 80011ac:	0800127d 	.word	0x0800127d
 80011b0:	08001237 	.word	0x08001237
 80011b4:	08001245 	.word	0x08001245
 80011b8:	08001253 	.word	0x08001253
 80011bc:	08001261 	.word	0x08001261
 80011c0:	0800126f 	.word	0x0800126f
          case 0: // Initial menu
              flag = initial_menu();
 80011c4:	f000 fa5a 	bl	800167c <initial_menu>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	4b30      	ldr	r3, [pc, #192]	; (8001290 <main+0x1a0>)
 80011ce:	701a      	strb	r2, [r3, #0]
              break;
 80011d0:	e058      	b.n	8001284 <main+0x194>

          case 1: // Menu to check Door PIN
        	  flag = menu_pin();
 80011d2:	f000 fadd 	bl	8001790 <menu_pin>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <main+0x1a0>)
 80011dc:	701a      	strb	r2, [r3, #0]
              break;
 80011de:	e051      	b.n	8001284 <main+0x194>

          case 11: // Menu to check Door PIN
        	  flag = unlock_method();
 80011e0:	f000 fbf0 	bl	80019c4 <unlock_method>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b29      	ldr	r3, [pc, #164]	; (8001290 <main+0x1a0>)
 80011ea:	701a      	strb	r2, [r3, #0]
              break;
 80011ec:	e04a      	b.n	8001284 <main+0x194>

          case 12: // Menu to check Door PIN
        	  flag = menu_fingerprint_check();
 80011ee:	f000 fc3b 	bl	8001a68 <menu_fingerprint_check>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <main+0x1a0>)
 80011f8:	701a      	strb	r2, [r3, #0]
              break;
 80011fa:	e043      	b.n	8001284 <main+0x194>

          case 13:
        	  HAL_UART_Receive_IT(&huart1,&RX_dat,1);//turn on the interrupt of uart2
 80011fc:	2201      	movs	r2, #1
 80011fe:	4922      	ldr	r1, [pc, #136]	; (8001288 <main+0x198>)
 8001200:	4824      	ldr	r0, [pc, #144]	; (8001294 <main+0x1a4>)
 8001202:	f003 fb38 	bl	8004876 <HAL_UART_Receive_IT>
              facial_flag = 0;
 8001206:	4b24      	ldr	r3, [pc, #144]	; (8001298 <main+0x1a8>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
        	  flag = menu_facial_check();
 800120c:	f000 fc50 	bl	8001ab0 <menu_facial_check>
 8001210:	4603      	mov	r3, r0
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <main+0x1a0>)
 8001216:	701a      	strb	r2, [r3, #0]
        	  break;
 8001218:	e034      	b.n	8001284 <main+0x194>

          case 2: // Menu to check System PIN
        	  flag = menu_settings_check();
 800121a:	f000 fcaf 	bl	8001b7c <menu_settings_check>
 800121e:	4603      	mov	r3, r0
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <main+0x1a0>)
 8001224:	701a      	strb	r2, [r3, #0]
        	  break;
 8001226:	e02d      	b.n	8001284 <main+0x194>

          case 3: // Menu to choose to edit system settings
        	  flag = menu_settings();
 8001228:	f000 fdcc 	bl	8001dc4 <menu_settings>
 800122c:	4603      	mov	r3, r0
 800122e:	b2da      	uxtb	r2, r3
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <main+0x1a0>)
 8001232:	701a      	strb	r2, [r3, #0]
        	  break;
 8001234:	e026      	b.n	8001284 <main+0x194>

          case 31: // To change the Door PIN
        	  flag = set_doorPIN();
 8001236:	f000 fe21 	bl	8001e7c <set_doorPIN>
 800123a:	4603      	mov	r3, r0
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <main+0x1a0>)
 8001240:	701a      	strb	r2, [r3, #0]
        	  break;
 8001242:	e01f      	b.n	8001284 <main+0x194>

          case 32:
        	  flag = menu_modify_FR();
 8001244:	f000 feee 	bl	8002024 <menu_modify_FR>
 8001248:	4603      	mov	r3, r0
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <main+0x1a0>)
 800124e:	701a      	strb	r2, [r3, #0]
        	  break;
 8001250:	e018      	b.n	8001284 <main+0x194>

          case 33:
              flag = menu_record_FR();
 8001252:	f000 ff93 	bl	800217c <menu_record_FR>
 8001256:	4603      	mov	r3, r0
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <main+0x1a0>)
 800125c:	701a      	strb	r2, [r3, #0]
              break;
 800125e:	e011      	b.n	8001284 <main+0x194>

          case 34:
              flag = menu_delete_FR();
 8001260:	f000 ff26 	bl	80020b0 <menu_delete_FR>
 8001264:	4603      	mov	r3, r0
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <main+0x1a0>)
 800126a:	701a      	strb	r2, [r3, #0]
              break;
 800126c:	e00a      	b.n	8001284 <main+0x194>

          case 35:
        	  flag = menu_modify_Facial();
 800126e:	f000 fffb 	bl	8002268 <menu_modify_Facial>
 8001272:	4603      	mov	r3, r0
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <main+0x1a0>)
 8001278:	701a      	strb	r2, [r3, #0]
			  break;
 800127a:	e003      	b.n	8001284 <main+0x194>

          default:
              flag = 0; // In case unexpected value occurs, go back to main menu
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <main+0x1a0>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
              break;
 8001282:	bf00      	nop
      switch (flag) {
 8001284:	e74d      	b.n	8001122 <main+0x32>
 8001286:	bf00      	nop
 8001288:	200002aa 	.word	0x200002aa
 800128c:	20000758 	.word	0x20000758
 8001290:	200002a9 	.word	0x200002a9
 8001294:	20000710 	.word	0x20000710
 8001298:	200002ac 	.word	0x200002ac

0800129c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b090      	sub	sp, #64	; 0x40
 80012a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a2:	f107 0318 	add.w	r3, r7, #24
 80012a6:	2228      	movs	r2, #40	; 0x28
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f004 fa58 	bl	8005760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012be:	2301      	movs	r3, #1
 80012c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012cc:	2301      	movs	r3, #1
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d0:	2302      	movs	r3, #2
 80012d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 fddb 	bl	8003ea0 <HAL_RCC_OscConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012f0:	f000 f9be 	bl	8001670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f4:	230f      	movs	r3, #15
 80012f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f8:	2302      	movs	r3, #2
 80012fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2102      	movs	r1, #2
 800130e:	4618      	mov	r0, r3
 8001310:	f003 f848 	bl	80043a4 <HAL_RCC_ClockConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800131a:	f000 f9a9 	bl	8001670 <Error_Handler>
  }
}
 800131e:	bf00      	nop
 8001320:	3740      	adds	r7, #64	; 0x40
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
  currentMillis = HAL_GetTick();
 8001332:	f001 fd4f 	bl	8002dd4 <HAL_GetTick>
 8001336:	4603      	mov	r3, r0
 8001338:	4aa4      	ldr	r2, [pc, #656]	; (80015cc <HAL_GPIO_EXTI_Callback+0x2a4>)
 800133a:	6013      	str	r3, [r2, #0]
  if (currentMillis - previousMillis > 200) {
 800133c:	4ba3      	ldr	r3, [pc, #652]	; (80015cc <HAL_GPIO_EXTI_Callback+0x2a4>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4ba3      	ldr	r3, [pc, #652]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2bc8      	cmp	r3, #200	; 0xc8
 8001348:	f240 817f 	bls.w	800164a <HAL_GPIO_EXTI_Callback+0x322>
    // Configure GPIO pins : PA4 PA5 PA6 PA7 to GPIO_INPUT
    GPIO_InitStructPrivate.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800134c:	4ba1      	ldr	r3, [pc, #644]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800134e:	22f0      	movs	r2, #240	; 0xf0
 8001350:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001352:	4ba0      	ldr	r3, [pc, #640]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001354:	2200      	movs	r2, #0
 8001356:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001358:	4b9e      	ldr	r3, [pc, #632]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	4b9d      	ldr	r3, [pc, #628]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001360:	2202      	movs	r2, #2
 8001362:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 8001364:	499b      	ldr	r1, [pc, #620]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001366:	489c      	ldr	r0, [pc, #624]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001368:	f001 ff22 	bl	80031b0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001372:	489a      	ldr	r0, [pc, #616]	; (80015dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001374:	f002 f8b7 	bl	80034e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800137e:	4897      	ldr	r0, [pc, #604]	; (80015dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001380:	f002 f8b1 	bl	80034e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138a:	4894      	ldr	r0, [pc, #592]	; (80015dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 800138c:	f002 f8ab 	bl	80034e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001396:	4891      	ldr	r0, [pc, #580]	; (80015dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001398:	f002 f8a5 	bl	80034e6 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_4 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	2b10      	cmp	r3, #16
 80013a0:	d10a      	bne.n	80013b8 <HAL_GPIO_EXTI_Callback+0x90>
 80013a2:	2110      	movs	r1, #16
 80013a4:	488c      	ldr	r0, [pc, #560]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80013a6:	f002 f887 	bl	80034b8 <HAL_GPIO_ReadPin>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_EXTI_Callback+0x90>
    {
      keyPressed = 68; // ASCII value of D
 80013b0:	4b8b      	ldr	r3, [pc, #556]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80013b2:	2244      	movs	r2, #68	; 0x44
 80013b4:	701a      	strb	r2, [r3, #0]
 80013b6:	e028      	b.n	800140a <HAL_GPIO_EXTI_Callback+0xe2>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	2b20      	cmp	r3, #32
 80013bc:	d10a      	bne.n	80013d4 <HAL_GPIO_EXTI_Callback+0xac>
 80013be:	2120      	movs	r1, #32
 80013c0:	4885      	ldr	r0, [pc, #532]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80013c2:	f002 f879 	bl	80034b8 <HAL_GPIO_ReadPin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_EXTI_Callback+0xac>
    {
      keyPressed = 67; // ASCII value of C
 80013cc:	4b84      	ldr	r3, [pc, #528]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80013ce:	2243      	movs	r2, #67	; 0x43
 80013d0:	701a      	strb	r2, [r3, #0]
 80013d2:	e01a      	b.n	800140a <HAL_GPIO_EXTI_Callback+0xe2>
    }
    else if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	2b40      	cmp	r3, #64	; 0x40
 80013d8:	d10a      	bne.n	80013f0 <HAL_GPIO_EXTI_Callback+0xc8>
 80013da:	2140      	movs	r1, #64	; 0x40
 80013dc:	487e      	ldr	r0, [pc, #504]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80013de:	f002 f86b 	bl	80034b8 <HAL_GPIO_ReadPin>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_EXTI_Callback+0xc8>
    {
      keyPressed = 66; // ASCII value of B
 80013e8:	4b7d      	ldr	r3, [pc, #500]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80013ea:	2242      	movs	r2, #66	; 0x42
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	e00c      	b.n	800140a <HAL_GPIO_EXTI_Callback+0xe2>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	2b80      	cmp	r3, #128	; 0x80
 80013f4:	d109      	bne.n	800140a <HAL_GPIO_EXTI_Callback+0xe2>
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	4877      	ldr	r0, [pc, #476]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80013fa:	f002 f85d 	bl	80034b8 <HAL_GPIO_ReadPin>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <HAL_GPIO_EXTI_Callback+0xe2>
    {
      keyPressed = 65; // ASCII value of A
 8001404:	4b76      	ldr	r3, [pc, #472]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001406:	2241      	movs	r2, #65	; 0x41
 8001408:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 800140a:	2201      	movs	r2, #1
 800140c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001410:	4872      	ldr	r0, [pc, #456]	; (80015dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001412:	f002 f868 	bl	80034e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800141c:	486f      	ldr	r0, [pc, #444]	; (80015dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 800141e:	f002 f862 	bl	80034e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001428:	486c      	ldr	r0, [pc, #432]	; (80015dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 800142a:	f002 f85c 	bl	80034e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001434:	4869      	ldr	r0, [pc, #420]	; (80015dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001436:	f002 f856 	bl	80034e6 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_4 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	2b10      	cmp	r3, #16
 800143e:	d10a      	bne.n	8001456 <HAL_GPIO_EXTI_Callback+0x12e>
 8001440:	2110      	movs	r1, #16
 8001442:	4865      	ldr	r0, [pc, #404]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001444:	f002 f838 	bl	80034b8 <HAL_GPIO_ReadPin>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_EXTI_Callback+0x12e>
    {
      keyPressed = 35; // ASCII value of #
 800144e:	4b64      	ldr	r3, [pc, #400]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001450:	2223      	movs	r2, #35	; 0x23
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	e028      	b.n	80014a8 <HAL_GPIO_EXTI_Callback+0x180>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	2b20      	cmp	r3, #32
 800145a:	d10a      	bne.n	8001472 <HAL_GPIO_EXTI_Callback+0x14a>
 800145c:	2120      	movs	r1, #32
 800145e:	485e      	ldr	r0, [pc, #376]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001460:	f002 f82a 	bl	80034b8 <HAL_GPIO_ReadPin>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_EXTI_Callback+0x14a>
    {
      keyPressed = 57; // ASCII value of 9
 800146a:	4b5d      	ldr	r3, [pc, #372]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800146c:	2239      	movs	r2, #57	; 0x39
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	e01a      	b.n	80014a8 <HAL_GPIO_EXTI_Callback+0x180>
    }
    else if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	2b40      	cmp	r3, #64	; 0x40
 8001476:	d10a      	bne.n	800148e <HAL_GPIO_EXTI_Callback+0x166>
 8001478:	2140      	movs	r1, #64	; 0x40
 800147a:	4857      	ldr	r0, [pc, #348]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800147c:	f002 f81c 	bl	80034b8 <HAL_GPIO_ReadPin>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_EXTI_Callback+0x166>
    {
      keyPressed = 54; // ASCII value of 6
 8001486:	4b56      	ldr	r3, [pc, #344]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001488:	2236      	movs	r2, #54	; 0x36
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e00c      	b.n	80014a8 <HAL_GPIO_EXTI_Callback+0x180>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	2b80      	cmp	r3, #128	; 0x80
 8001492:	d109      	bne.n	80014a8 <HAL_GPIO_EXTI_Callback+0x180>
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	4850      	ldr	r0, [pc, #320]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001498:	f002 f80e 	bl	80034b8 <HAL_GPIO_ReadPin>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <HAL_GPIO_EXTI_Callback+0x180>
    {
      keyPressed = 51; // ASCII value of 3
 80014a2:	4b4f      	ldr	r3, [pc, #316]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80014a4:	2233      	movs	r2, #51	; 0x33
 80014a6:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ae:	484b      	ldr	r0, [pc, #300]	; (80015dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 80014b0:	f002 f819 	bl	80034e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80014b4:	2201      	movs	r2, #1
 80014b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ba:	4848      	ldr	r0, [pc, #288]	; (80015dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 80014bc:	f002 f813 	bl	80034e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c6:	4845      	ldr	r0, [pc, #276]	; (80015dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 80014c8:	f002 f80d 	bl	80034e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d2:	4842      	ldr	r0, [pc, #264]	; (80015dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 80014d4:	f002 f807 	bl	80034e6 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_4 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	2b10      	cmp	r3, #16
 80014dc:	d10a      	bne.n	80014f4 <HAL_GPIO_EXTI_Callback+0x1cc>
 80014de:	2110      	movs	r1, #16
 80014e0:	483d      	ldr	r0, [pc, #244]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80014e2:	f001 ffe9 	bl	80034b8 <HAL_GPIO_ReadPin>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_EXTI_Callback+0x1cc>
    {
      keyPressed = 48; // ASCII value of 0
 80014ec:	4b3c      	ldr	r3, [pc, #240]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80014ee:	2230      	movs	r2, #48	; 0x30
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	e028      	b.n	8001546 <HAL_GPIO_EXTI_Callback+0x21e>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	2b20      	cmp	r3, #32
 80014f8:	d10a      	bne.n	8001510 <HAL_GPIO_EXTI_Callback+0x1e8>
 80014fa:	2120      	movs	r1, #32
 80014fc:	4836      	ldr	r0, [pc, #216]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80014fe:	f001 ffdb 	bl	80034b8 <HAL_GPIO_ReadPin>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_EXTI_Callback+0x1e8>
    {
      keyPressed = 56; // ASCII value of 8
 8001508:	4b35      	ldr	r3, [pc, #212]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800150a:	2238      	movs	r2, #56	; 0x38
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	e01a      	b.n	8001546 <HAL_GPIO_EXTI_Callback+0x21e>
    }
    else if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	2b40      	cmp	r3, #64	; 0x40
 8001514:	d10a      	bne.n	800152c <HAL_GPIO_EXTI_Callback+0x204>
 8001516:	2140      	movs	r1, #64	; 0x40
 8001518:	482f      	ldr	r0, [pc, #188]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800151a:	f001 ffcd 	bl	80034b8 <HAL_GPIO_ReadPin>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_EXTI_Callback+0x204>
    {
      keyPressed = 53; // ASCII value of 5
 8001524:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001526:	2235      	movs	r2, #53	; 0x35
 8001528:	701a      	strb	r2, [r3, #0]
 800152a:	e00c      	b.n	8001546 <HAL_GPIO_EXTI_Callback+0x21e>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	2b80      	cmp	r3, #128	; 0x80
 8001530:	d109      	bne.n	8001546 <HAL_GPIO_EXTI_Callback+0x21e>
 8001532:	2180      	movs	r1, #128	; 0x80
 8001534:	4828      	ldr	r0, [pc, #160]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001536:	f001 ffbf 	bl	80034b8 <HAL_GPIO_ReadPin>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <HAL_GPIO_EXTI_Callback+0x21e>
    {
      keyPressed = 50; // ASCII value of 2
 8001540:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001542:	2232      	movs	r2, #50	; 0x32
 8001544:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800154c:	4823      	ldr	r0, [pc, #140]	; (80015dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 800154e:	f001 ffca 	bl	80034e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001558:	4820      	ldr	r0, [pc, #128]	; (80015dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 800155a:	f001 ffc4 	bl	80034e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 800155e:	2201      	movs	r2, #1
 8001560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001564:	481d      	ldr	r0, [pc, #116]	; (80015dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001566:	f001 ffbe 	bl	80034e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001570:	481a      	ldr	r0, [pc, #104]	; (80015dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001572:	f001 ffb8 	bl	80034e6 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_4 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	2b10      	cmp	r3, #16
 800157a:	d10a      	bne.n	8001592 <HAL_GPIO_EXTI_Callback+0x26a>
 800157c:	2110      	movs	r1, #16
 800157e:	4816      	ldr	r0, [pc, #88]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001580:	f001 ff9a 	bl	80034b8 <HAL_GPIO_ReadPin>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_EXTI_Callback+0x26a>
    {
      keyPressed = 42; // ASCII value of *
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800158c:	222a      	movs	r2, #42	; 0x2a
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	e035      	b.n	80015fe <HAL_GPIO_EXTI_Callback+0x2d6>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	2b20      	cmp	r3, #32
 8001596:	d10a      	bne.n	80015ae <HAL_GPIO_EXTI_Callback+0x286>
 8001598:	2120      	movs	r1, #32
 800159a:	480f      	ldr	r0, [pc, #60]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800159c:	f001 ff8c 	bl	80034b8 <HAL_GPIO_ReadPin>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_EXTI_Callback+0x286>
    {
      keyPressed = 55; // ASCII value of 7
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80015a8:	2237      	movs	r2, #55	; 0x37
 80015aa:	701a      	strb	r2, [r3, #0]
 80015ac:	e027      	b.n	80015fe <HAL_GPIO_EXTI_Callback+0x2d6>
    }
    else if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	2b40      	cmp	r3, #64	; 0x40
 80015b2:	d117      	bne.n	80015e4 <HAL_GPIO_EXTI_Callback+0x2bc>
 80015b4:	2140      	movs	r1, #64	; 0x40
 80015b6:	4808      	ldr	r0, [pc, #32]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80015b8:	f001 ff7e 	bl	80034b8 <HAL_GPIO_ReadPin>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d010      	beq.n	80015e4 <HAL_GPIO_EXTI_Callback+0x2bc>
    {
      keyPressed = 52; // ASCII value of 4
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80015c4:	2234      	movs	r2, #52	; 0x34
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	e019      	b.n	80015fe <HAL_GPIO_EXTI_Callback+0x2d6>
 80015ca:	bf00      	nop
 80015cc:	200002a4 	.word	0x200002a4
 80015d0:	200002a0 	.word	0x200002a0
 80015d4:	20000290 	.word	0x20000290
 80015d8:	40010800 	.word	0x40010800
 80015dc:	40010c00 	.word	0x40010c00
 80015e0:	200002a8 	.word	0x200002a8
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	2b80      	cmp	r3, #128	; 0x80
 80015e8:	d109      	bne.n	80015fe <HAL_GPIO_EXTI_Callback+0x2d6>
 80015ea:	2180      	movs	r1, #128	; 0x80
 80015ec:	4819      	ldr	r0, [pc, #100]	; (8001654 <HAL_GPIO_EXTI_Callback+0x32c>)
 80015ee:	f001 ff63 	bl	80034b8 <HAL_GPIO_ReadPin>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <HAL_GPIO_EXTI_Callback+0x2d6>
    {
      keyPressed = 49; // ASCII value of 1
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_GPIO_EXTI_Callback+0x330>)
 80015fa:	2231      	movs	r2, #49	; 0x31
 80015fc:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80015fe:	2201      	movs	r2, #1
 8001600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001604:	4815      	ldr	r0, [pc, #84]	; (800165c <HAL_GPIO_EXTI_Callback+0x334>)
 8001606:	f001 ff6e 	bl	80034e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800160a:	2201      	movs	r2, #1
 800160c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001610:	4812      	ldr	r0, [pc, #72]	; (800165c <HAL_GPIO_EXTI_Callback+0x334>)
 8001612:	f001 ff68 	bl	80034e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8001616:	2201      	movs	r2, #1
 8001618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800161c:	480f      	ldr	r0, [pc, #60]	; (800165c <HAL_GPIO_EXTI_Callback+0x334>)
 800161e:	f001 ff62 	bl	80034e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001622:	2201      	movs	r2, #1
 8001624:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <HAL_GPIO_EXTI_Callback+0x334>)
 800162a:	f001 ff5c 	bl	80034e6 <HAL_GPIO_WritePin>
    // Configure GPIO pins : PA4 PA5 PA6 PA7 back to EXTI
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_GPIO_EXTI_Callback+0x338>)
 8001630:	4a0c      	ldr	r2, [pc, #48]	; (8001664 <HAL_GPIO_EXTI_Callback+0x33c>)
 8001632:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_GPIO_EXTI_Callback+0x338>)
 8001636:	2202      	movs	r2, #2
 8001638:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 800163a:	4909      	ldr	r1, [pc, #36]	; (8001660 <HAL_GPIO_EXTI_Callback+0x338>)
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <HAL_GPIO_EXTI_Callback+0x32c>)
 800163e:	f001 fdb7 	bl	80031b0 <HAL_GPIO_Init>
    previousMillis = currentMillis;
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_GPIO_EXTI_Callback+0x340>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <HAL_GPIO_EXTI_Callback+0x344>)
 8001648:	6013      	str	r3, [r2, #0]
  }
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40010800 	.word	0x40010800
 8001658:	200002a8 	.word	0x200002a8
 800165c:	40010c00 	.word	0x40010c00
 8001660:	20000290 	.word	0x20000290
 8001664:	10110000 	.word	0x10110000
 8001668:	200002a4 	.word	0x200002a4
 800166c:	200002a0 	.word	0x200002a0

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001678:	e7fe      	b.n	8001678 <Error_Handler+0x8>
	...

0800167c <initial_menu>:
extern char DoorPin[];
extern uint8_t BT_Flag;
extern uint8_t facial_flag;

int initial_menu(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af02      	add	r7, sp, #8
    static uint32_t delayStartTime = 0; // Stores the start time for non-blocking delay
    static int delayInProgress = 0; // Indicates if a non-blocking delay is active

    if (!delayInProgress) { // Only update screen when not in a delay period
 8001682:	4b39      	ldr	r3, [pc, #228]	; (8001768 <initial_menu+0xec>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d125      	bne.n	80016d6 <initial_menu+0x5a>
        ssd1306_Fill(Black);
 800168a:	2000      	movs	r0, #0
 800168c:	f000 fee6 	bl	800245c <ssd1306_Fill>
        ssd1306_SetCursor(11, 10);
 8001690:	210a      	movs	r1, #10
 8001692:	200b      	movs	r0, #11
 8001694:	f001 f82c 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString("Smart Door Lock", Font_7x10, White);
 8001698:	4b34      	ldr	r3, [pc, #208]	; (800176c <initial_menu+0xf0>)
 800169a:	2201      	movs	r2, #1
 800169c:	9200      	str	r2, [sp, #0]
 800169e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a0:	4833      	ldr	r0, [pc, #204]	; (8001770 <initial_menu+0xf4>)
 80016a2:	f000 ffff 	bl	80026a4 <ssd1306_WriteString>
        ssd1306_SetCursor(0, 30);
 80016a6:	211e      	movs	r1, #30
 80016a8:	2000      	movs	r0, #0
 80016aa:	f001 f821 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString("Press C to Continue", Font_6x8, White);
 80016ae:	4b31      	ldr	r3, [pc, #196]	; (8001774 <initial_menu+0xf8>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	9200      	str	r2, [sp, #0]
 80016b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b6:	4830      	ldr	r0, [pc, #192]	; (8001778 <initial_menu+0xfc>)
 80016b8:	f000 fff4 	bl	80026a4 <ssd1306_WriteString>
        ssd1306_SetCursor(0, 40);
 80016bc:	2128      	movs	r1, #40	; 0x28
 80016be:	2000      	movs	r0, #0
 80016c0:	f001 f816 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString("Press A to Settings", Font_6x8, White);
 80016c4:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <initial_menu+0xf8>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	9200      	str	r2, [sp, #0]
 80016ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016cc:	482b      	ldr	r0, [pc, #172]	; (800177c <initial_menu+0x100>)
 80016ce:	f000 ffe9 	bl	80026a4 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 80016d2:	f000 fedb 	bl	800248c <ssd1306_UpdateScreen>
    }

    if (delayInProgress) {
 80016d6:	4b24      	ldr	r3, [pc, #144]	; (8001768 <initial_menu+0xec>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d012      	beq.n	8001704 <initial_menu+0x88>
        // **Non-blocking delay: Wait for 2 seconds**
        if (HAL_GetTick() - delayStartTime >= 2000) {
 80016de:	f001 fb79 	bl	8002dd4 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	4b26      	ldr	r3, [pc, #152]	; (8001780 <initial_menu+0x104>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016ee:	d307      	bcc.n	8001700 <initial_menu+0x84>
            delayInProgress = 0; // End delay
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <initial_menu+0xec>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
            BT_Flag = 0; // Reset Bluetooth unlock flag
 80016f6:	4b23      	ldr	r3, [pc, #140]	; (8001784 <initial_menu+0x108>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
            return 0; // Return to the main menu
 80016fc:	2300      	movs	r3, #0
 80016fe:	e030      	b.n	8001762 <initial_menu+0xe6>
        }
        return 0; // Stay in the current menu during the delay period
 8001700:	2300      	movs	r3, #0
 8001702:	e02e      	b.n	8001762 <initial_menu+0xe6>
    }

    if (keyPressed == 'C') { // 'C' key pressed
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <initial_menu+0x10c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b43      	cmp	r3, #67	; 0x43
 800170a:	d104      	bne.n	8001716 <initial_menu+0x9a>
        keyPressed = 0;
 800170c:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <initial_menu+0x10c>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
        return 1; // Switch to the next menu
 8001712:	2301      	movs	r3, #1
 8001714:	e025      	b.n	8001762 <initial_menu+0xe6>
    } else if (keyPressed == 'A') { // 'A' key pressed
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <initial_menu+0x10c>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b41      	cmp	r3, #65	; 0x41
 800171c:	d104      	bne.n	8001728 <initial_menu+0xac>
        keyPressed = 0;
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <initial_menu+0x10c>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
        return 2; // Switch to settings menu
 8001724:	2302      	movs	r3, #2
 8001726:	e01c      	b.n	8001762 <initial_menu+0xe6>
    } else if (BT_Flag == 1) { // Bluetooth unlock triggered
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <initial_menu+0x108>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d117      	bne.n	8001760 <initial_menu+0xe4>
        ssd1306_Fill(Black);
 8001730:	2000      	movs	r0, #0
 8001732:	f000 fe93 	bl	800245c <ssd1306_Fill>
        ssd1306_SetCursor(0, 0);
 8001736:	2100      	movs	r1, #0
 8001738:	2000      	movs	r0, #0
 800173a:	f000 ffd9 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString("Unlock!", Font_7x10, White);
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <initial_menu+0xf0>)
 8001740:	2201      	movs	r2, #1
 8001742:	9200      	str	r2, [sp, #0]
 8001744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001746:	4811      	ldr	r0, [pc, #68]	; (800178c <initial_menu+0x110>)
 8001748:	f000 ffac 	bl	80026a4 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 800174c:	f000 fe9e 	bl	800248c <ssd1306_UpdateScreen>

        delayStartTime = HAL_GetTick(); // Record start time
 8001750:	f001 fb40 	bl	8002dd4 <HAL_GetTick>
 8001754:	4603      	mov	r3, r0
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <initial_menu+0x104>)
 8001758:	6013      	str	r3, [r2, #0]
        delayInProgress = 1; // Activate non-blocking delay
 800175a:	4b03      	ldr	r3, [pc, #12]	; (8001768 <initial_menu+0xec>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]
    }

    return 0; // Stay in the initial menu
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200002b0 	.word	0x200002b0
 800176c:	08007a20 	.word	0x08007a20
 8001770:	08006ad8 	.word	0x08006ad8
 8001774:	08007a14 	.word	0x08007a14
 8001778:	08006ae8 	.word	0x08006ae8
 800177c:	08006afc 	.word	0x08006afc
 8001780:	200002b4 	.word	0x200002b4
 8001784:	200002ab 	.word	0x200002ab
 8001788:	200002a8 	.word	0x200002a8
 800178c:	08006b10 	.word	0x08006b10

08001790 <menu_pin>:


int menu_pin(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af02      	add	r7, sp, #8
    static uint8_t InputIndex = 0;   // Current PIN input length
    static uint32_t delayStartTime = 0;  // Records non-blocking delay start time
    static int delayInProgress = 0;  // Indicates if a non-blocking delay is active
    static int nextState = 1;  // Stores the next state to return after delay

    if (!delayInProgress) { // Only update the screen when no delay is active
 8001796:	4b7d      	ldr	r3, [pc, #500]	; (800198c <menu_pin+0x1fc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d125      	bne.n	80017ea <menu_pin+0x5a>
        ssd1306_Fill(Black);
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 fe5c 	bl	800245c <ssd1306_Fill>
        ssd1306_SetCursor(0, 0);
 80017a4:	2100      	movs	r1, #0
 80017a6:	2000      	movs	r0, #0
 80017a8:	f000 ffa2 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString("Enter Door Pin", Font_7x10, White);
 80017ac:	4b78      	ldr	r3, [pc, #480]	; (8001990 <menu_pin+0x200>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	9200      	str	r2, [sp, #0]
 80017b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b4:	4877      	ldr	r0, [pc, #476]	; (8001994 <menu_pin+0x204>)
 80017b6:	f000 ff75 	bl	80026a4 <ssd1306_WriteString>
        ssd1306_SetCursor(0, 40);
 80017ba:	2128      	movs	r1, #40	; 0x28
 80017bc:	2000      	movs	r0, #0
 80017be:	f000 ff97 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString("Press B to Go back", Font_6x8, White);
 80017c2:	4b75      	ldr	r3, [pc, #468]	; (8001998 <menu_pin+0x208>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	9200      	str	r2, [sp, #0]
 80017c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ca:	4874      	ldr	r0, [pc, #464]	; (800199c <menu_pin+0x20c>)
 80017cc:	f000 ff6a 	bl	80026a4 <ssd1306_WriteString>
        ssd1306_SetCursor(0, 20);
 80017d0:	2114      	movs	r1, #20
 80017d2:	2000      	movs	r0, #0
 80017d4:	f000 ff8c 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString(userInput, Font_7x10, White);
 80017d8:	4b6d      	ldr	r3, [pc, #436]	; (8001990 <menu_pin+0x200>)
 80017da:	2201      	movs	r2, #1
 80017dc:	9200      	str	r2, [sp, #0]
 80017de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e0:	486f      	ldr	r0, [pc, #444]	; (80019a0 <menu_pin+0x210>)
 80017e2:	f000 ff5f 	bl	80026a4 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 80017e6:	f000 fe51 	bl	800248c <ssd1306_UpdateScreen>
    }

    if (delayInProgress) {
 80017ea:	4b68      	ldr	r3, [pc, #416]	; (800198c <menu_pin+0x1fc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d018      	beq.n	8001824 <menu_pin+0x94>
        // **Non-blocking delay: Wait for 0.5s or 2s**
        if (HAL_GetTick() - delayStartTime >= 2000) {
 80017f2:	f001 faef 	bl	8002dd4 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <menu_pin+0x214>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001802:	d30d      	bcc.n	8001820 <menu_pin+0x90>
            delayInProgress = 0; // End non-blocking delay
 8001804:	4b61      	ldr	r3, [pc, #388]	; (800198c <menu_pin+0x1fc>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
            InputIndex = 0; // Reset PIN input
 800180a:	4b67      	ldr	r3, [pc, #412]	; (80019a8 <menu_pin+0x218>)
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
            memset(userInput, 0, sizeof(userInput)); // Clear input
 8001810:	2205      	movs	r2, #5
 8001812:	2100      	movs	r1, #0
 8001814:	4862      	ldr	r0, [pc, #392]	; (80019a0 <menu_pin+0x210>)
 8001816:	f003 ffa3 	bl	8005760 <memset>
            return nextState;  // Return predefined state (11=success, 1=failure)
 800181a:	4b64      	ldr	r3, [pc, #400]	; (80019ac <menu_pin+0x21c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	e0b1      	b.n	8001984 <menu_pin+0x1f4>
        }
        return 1;  // Stay in the current menu during delay
 8001820:	2301      	movs	r3, #1
 8001822:	e0af      	b.n	8001984 <menu_pin+0x1f4>
    }

    if (keyPressed >= '0' && keyPressed <= '9') { // Numeric input detection
 8001824:	4b62      	ldr	r3, [pc, #392]	; (80019b0 <menu_pin+0x220>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b2f      	cmp	r3, #47	; 0x2f
 800182a:	d91c      	bls.n	8001866 <menu_pin+0xd6>
 800182c:	4b60      	ldr	r3, [pc, #384]	; (80019b0 <menu_pin+0x220>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b39      	cmp	r3, #57	; 0x39
 8001832:	d818      	bhi.n	8001866 <menu_pin+0xd6>
        if (InputIndex < 4) { // Limit input to 4 digits
 8001834:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <menu_pin+0x218>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b03      	cmp	r3, #3
 800183a:	d810      	bhi.n	800185e <menu_pin+0xce>
            userInput[InputIndex++] = keyPressed;
 800183c:	4b5a      	ldr	r3, [pc, #360]	; (80019a8 <menu_pin+0x218>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	b2d1      	uxtb	r1, r2
 8001844:	4a58      	ldr	r2, [pc, #352]	; (80019a8 <menu_pin+0x218>)
 8001846:	7011      	strb	r1, [r2, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b59      	ldr	r3, [pc, #356]	; (80019b0 <menu_pin+0x220>)
 800184c:	7819      	ldrb	r1, [r3, #0]
 800184e:	4b54      	ldr	r3, [pc, #336]	; (80019a0 <menu_pin+0x210>)
 8001850:	5499      	strb	r1, [r3, r2]
            userInput[InputIndex] = '\0';
 8001852:	4b55      	ldr	r3, [pc, #340]	; (80019a8 <menu_pin+0x218>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	4b51      	ldr	r3, [pc, #324]	; (80019a0 <menu_pin+0x210>)
 800185a:	2100      	movs	r1, #0
 800185c:	5499      	strb	r1, [r3, r2]
        }
        keyPressed = 0; // Clear key press status
 800185e:	4b54      	ldr	r3, [pc, #336]	; (80019b0 <menu_pin+0x220>)
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	e08d      	b.n	8001982 <menu_pin+0x1f2>
    } else if (keyPressed == 'C') { // Confirm input
 8001866:	4b52      	ldr	r3, [pc, #328]	; (80019b0 <menu_pin+0x220>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b43      	cmp	r3, #67	; 0x43
 800186c:	d161      	bne.n	8001932 <menu_pin+0x1a2>
        keyPressed = 0;
 800186e:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <menu_pin+0x220>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
        if (InputIndex == 4) { // Only verify PIN if 4 digits are entered
 8001874:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <menu_pin+0x218>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b04      	cmp	r3, #4
 800187a:	d13e      	bne.n	80018fa <menu_pin+0x16a>
            if (strcmp(userInput, DoorPin) == 0) { // Correct PIN
 800187c:	494d      	ldr	r1, [pc, #308]	; (80019b4 <menu_pin+0x224>)
 800187e:	4848      	ldr	r0, [pc, #288]	; (80019a0 <menu_pin+0x210>)
 8001880:	f7fe fc64 	bl	800014c <strcmp>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d11b      	bne.n	80018c2 <menu_pin+0x132>
                ssd1306_Fill(Black);
 800188a:	2000      	movs	r0, #0
 800188c:	f000 fde6 	bl	800245c <ssd1306_Fill>
                ssd1306_SetCursor(0, 40);
 8001890:	2128      	movs	r1, #40	; 0x28
 8001892:	2000      	movs	r0, #0
 8001894:	f000 ff2c 	bl	80026f0 <ssd1306_SetCursor>
                ssd1306_WriteString("PIN Correct!", Font_7x10, White);
 8001898:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <menu_pin+0x200>)
 800189a:	2201      	movs	r2, #1
 800189c:	9200      	str	r2, [sp, #0]
 800189e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018a0:	4845      	ldr	r0, [pc, #276]	; (80019b8 <menu_pin+0x228>)
 80018a2:	f000 feff 	bl	80026a4 <ssd1306_WriteString>
                ssd1306_UpdateScreen();
 80018a6:	f000 fdf1 	bl	800248c <ssd1306_UpdateScreen>

                delayStartTime = HAL_GetTick(); // Record start time
 80018aa:	f001 fa93 	bl	8002dd4 <HAL_GetTick>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a3c      	ldr	r2, [pc, #240]	; (80019a4 <menu_pin+0x214>)
 80018b2:	6013      	str	r3, [r2, #0]
                delayInProgress = 1; // Activate non-blocking delay
 80018b4:	4b35      	ldr	r3, [pc, #212]	; (800198c <menu_pin+0x1fc>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]
                nextState = 11; // Return to the main menu after 2s
 80018ba:	4b3c      	ldr	r3, [pc, #240]	; (80019ac <menu_pin+0x21c>)
 80018bc:	220b      	movs	r2, #11
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e05f      	b.n	8001982 <menu_pin+0x1f2>
            } else { // Incorrect PIN
                ssd1306_Fill(Black);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f000 fdca 	bl	800245c <ssd1306_Fill>
                ssd1306_SetCursor(0, 40);
 80018c8:	2128      	movs	r1, #40	; 0x28
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 ff10 	bl	80026f0 <ssd1306_SetCursor>
                ssd1306_WriteString("Fail to Unlock!", Font_7x10, White);
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <menu_pin+0x200>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	9200      	str	r2, [sp, #0]
 80018d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018d8:	4838      	ldr	r0, [pc, #224]	; (80019bc <menu_pin+0x22c>)
 80018da:	f000 fee3 	bl	80026a4 <ssd1306_WriteString>
                ssd1306_UpdateScreen();
 80018de:	f000 fdd5 	bl	800248c <ssd1306_UpdateScreen>

                delayStartTime = HAL_GetTick();
 80018e2:	f001 fa77 	bl	8002dd4 <HAL_GetTick>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a2e      	ldr	r2, [pc, #184]	; (80019a4 <menu_pin+0x214>)
 80018ea:	6013      	str	r3, [r2, #0]
                delayInProgress = 1;
 80018ec:	4b27      	ldr	r3, [pc, #156]	; (800198c <menu_pin+0x1fc>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	601a      	str	r2, [r3, #0]
                nextState = 1; // Retry after 2s
 80018f2:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <menu_pin+0x21c>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e043      	b.n	8001982 <menu_pin+0x1f2>
            }
        } else { // PIN is not complete
            ssd1306_Fill(Black);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f000 fdae 	bl	800245c <ssd1306_Fill>
            ssd1306_SetCursor(0, 40);
 8001900:	2128      	movs	r1, #40	; 0x28
 8001902:	2000      	movs	r0, #0
 8001904:	f000 fef4 	bl	80026f0 <ssd1306_SetCursor>
            ssd1306_WriteString("Incomplete PIN!", Font_7x10, White);
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <menu_pin+0x200>)
 800190a:	2201      	movs	r2, #1
 800190c:	9200      	str	r2, [sp, #0]
 800190e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001910:	482b      	ldr	r0, [pc, #172]	; (80019c0 <menu_pin+0x230>)
 8001912:	f000 fec7 	bl	80026a4 <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 8001916:	f000 fdb9 	bl	800248c <ssd1306_UpdateScreen>

            delayStartTime = HAL_GetTick();
 800191a:	f001 fa5b 	bl	8002dd4 <HAL_GetTick>
 800191e:	4603      	mov	r3, r0
 8001920:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <menu_pin+0x214>)
 8001922:	6013      	str	r3, [r2, #0]
            delayInProgress = 1;
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <menu_pin+0x1fc>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]
            nextState = 1; // Retry after 2s
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <menu_pin+0x21c>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	e027      	b.n	8001982 <menu_pin+0x1f2>
        }
    } else if (keyPressed == 'B') { // Return to the main menu
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <menu_pin+0x220>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b42      	cmp	r3, #66	; 0x42
 8001938:	d10c      	bne.n	8001954 <menu_pin+0x1c4>
        keyPressed = 0;
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <menu_pin+0x220>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
        InputIndex = 0;
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <menu_pin+0x218>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
        memset(userInput, 0, sizeof(userInput));
 8001946:	2205      	movs	r2, #5
 8001948:	2100      	movs	r1, #0
 800194a:	4815      	ldr	r0, [pc, #84]	; (80019a0 <menu_pin+0x210>)
 800194c:	f003 ff08 	bl	8005760 <memset>
        return 0;
 8001950:	2300      	movs	r3, #0
 8001952:	e017      	b.n	8001984 <menu_pin+0x1f4>
    } else if (keyPressed == 'D') { // Backspace function
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <menu_pin+0x220>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b44      	cmp	r3, #68	; 0x44
 800195a:	d112      	bne.n	8001982 <menu_pin+0x1f2>
        keyPressed = 0;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <menu_pin+0x220>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
        if (InputIndex > 0) {
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <menu_pin+0x218>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00b      	beq.n	8001982 <menu_pin+0x1f2>
            InputIndex--;
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <menu_pin+0x218>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	3b01      	subs	r3, #1
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <menu_pin+0x218>)
 8001974:	701a      	strb	r2, [r3, #0]
            userInput[InputIndex] = '\0';
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <menu_pin+0x218>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <menu_pin+0x210>)
 800197e:	2100      	movs	r1, #0
 8001980:	5499      	strb	r1, [r3, r2]
        }
    }

    return 1; // Stay in the current menu
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200002b8 	.word	0x200002b8
 8001990:	08007a20 	.word	0x08007a20
 8001994:	08006b18 	.word	0x08006b18
 8001998:	08007a14 	.word	0x08007a14
 800199c:	08006b28 	.word	0x08006b28
 80019a0:	200002bc 	.word	0x200002bc
 80019a4:	200002c4 	.word	0x200002c4
 80019a8:	200002c8 	.word	0x200002c8
 80019ac:	20000018 	.word	0x20000018
 80019b0:	200002a8 	.word	0x200002a8
 80019b4:	20000010 	.word	0x20000010
 80019b8:	08006b3c 	.word	0x08006b3c
 80019bc:	08006b4c 	.word	0x08006b4c
 80019c0:	08006b5c 	.word	0x08006b5c

080019c4 <unlock_method>:


int unlock_method(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 80019ca:	2000      	movs	r0, #0
 80019cc:	f000 fd46 	bl	800245c <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 80019d0:	2100      	movs	r1, #0
 80019d2:	2000      	movs	r0, #0
 80019d4:	f000 fe8c 	bl	80026f0 <ssd1306_SetCursor>
    ssd1306_WriteString("1.Fingerprint", Font_7x10, White);
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <unlock_method+0x90>)
 80019da:	2201      	movs	r2, #1
 80019dc:	9200      	str	r2, [sp, #0]
 80019de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019e0:	481d      	ldr	r0, [pc, #116]	; (8001a58 <unlock_method+0x94>)
 80019e2:	f000 fe5f 	bl	80026a4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 20);
 80019e6:	2114      	movs	r1, #20
 80019e8:	2000      	movs	r0, #0
 80019ea:	f000 fe81 	bl	80026f0 <ssd1306_SetCursor>
    ssd1306_WriteString("2.Facial", Font_7x10, White);
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <unlock_method+0x90>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	9200      	str	r2, [sp, #0]
 80019f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019f6:	4819      	ldr	r0, [pc, #100]	; (8001a5c <unlock_method+0x98>)
 80019f8:	f000 fe54 	bl	80026a4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 40);
 80019fc:	2128      	movs	r1, #40	; 0x28
 80019fe:	2000      	movs	r0, #0
 8001a00:	f000 fe76 	bl	80026f0 <ssd1306_SetCursor>
    ssd1306_WriteString("3.Gesture", Font_7x10, White);
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <unlock_method+0x90>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	9200      	str	r2, [sp, #0]
 8001a0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a0c:	4814      	ldr	r0, [pc, #80]	; (8001a60 <unlock_method+0x9c>)
 8001a0e:	f000 fe49 	bl	80026a4 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001a12:	f000 fd3b 	bl	800248c <ssd1306_UpdateScreen>
    if (keyPressed == '1') {
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <unlock_method+0xa0>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b31      	cmp	r3, #49	; 0x31
 8001a1c:	d104      	bne.n	8001a28 <unlock_method+0x64>
    	keyPressed = 0;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <unlock_method+0xa0>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
        return 12; // Switch to the next menu
 8001a24:	230c      	movs	r3, #12
 8001a26:	e012      	b.n	8001a4e <unlock_method+0x8a>
    }else if (keyPressed == '2'){
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <unlock_method+0xa0>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b32      	cmp	r3, #50	; 0x32
 8001a2e:	d104      	bne.n	8001a3a <unlock_method+0x76>
    	keyPressed =0;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <unlock_method+0xa0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
    	return 13;
 8001a36:	230d      	movs	r3, #13
 8001a38:	e009      	b.n	8001a4e <unlock_method+0x8a>
    }else if (keyPressed == 'B'){
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <unlock_method+0xa0>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b42      	cmp	r3, #66	; 0x42
 8001a40:	d104      	bne.n	8001a4c <unlock_method+0x88>
    	keyPressed = 0;
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <unlock_method+0xa0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
    	return 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e000      	b.n	8001a4e <unlock_method+0x8a>
    }
    return 11;
 8001a4c:	230b      	movs	r3, #11
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	08007a20 	.word	0x08007a20
 8001a58:	08006b6c 	.word	0x08006b6c
 8001a5c:	08006b7c 	.word	0x08006b7c
 8001a60:	08006b88 	.word	0x08006b88
 8001a64:	200002a8 	.word	0x200002a8

08001a68 <menu_fingerprint_check>:

int menu_fingerprint_check(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f000 fcf4 	bl	800245c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8001a74:	2100      	movs	r1, #0
 8001a76:	2000      	movs	r0, #0
 8001a78:	f000 fe3a 	bl	80026f0 <ssd1306_SetCursor>
    ssd1306_WriteString("Place Finger", Font_7x10, White); // 提示用户放置手指
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <menu_fingerprint_check+0x40>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	9200      	str	r2, [sp, #0]
 8001a82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a84:	4809      	ldr	r0, [pc, #36]	; (8001aac <menu_fingerprint_check+0x44>)
 8001a86:	f000 fe0d 	bl	80026a4 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001a8a:	f000 fcff 	bl	800248c <ssd1306_UpdateScreen>


    int fingerprint_result = verify_FR();//刷指纹测试
 8001a8e:	f7ff f8d9 	bl	8000c44 <verify_FR>
 8001a92:	6078      	str	r0, [r7, #4]
    if (fingerprint_result == 1) { // 验证成功
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <menu_fingerprint_check+0x36>

        return 0; // 返回主菜单
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <menu_fingerprint_check+0x38>

    } else { // 验证失败

        return 11; // return to the menu to choose verify method
 8001a9e:	230b      	movs	r3, #11

    }
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	08007a20 	.word	0x08007a20
 8001aac:	08006b94 	.word	0x08006b94

08001ab0 <menu_facial_check>:

int menu_facial_check(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af02      	add	r7, sp, #8
    static uint32_t delayStartTime = 0; // Stores the start time for non-blocking delay
    static int delayInProgress = 0; // Indicates if a non-blocking delay is active

    if (!delayInProgress) { // Only update screen when not in a delay period
 8001ab6:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <menu_facial_check+0xb0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10f      	bne.n	8001ade <menu_facial_check+0x2e>
        ssd1306_Fill(Black);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f000 fccc 	bl	800245c <ssd1306_Fill>
        ssd1306_SetCursor(0, 0);
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f000 fe12 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString("Watch camera", Font_7x10, White); // Prompt user to face the camera
 8001acc:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <menu_facial_check+0xb4>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	9200      	str	r2, [sp, #0]
 8001ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ad4:	4824      	ldr	r0, [pc, #144]	; (8001b68 <menu_facial_check+0xb8>)
 8001ad6:	f000 fde5 	bl	80026a4 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8001ada:	f000 fcd7 	bl	800248c <ssd1306_UpdateScreen>
    }

    if (delayInProgress) {
 8001ade:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <menu_facial_check+0xb0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00f      	beq.n	8001b06 <menu_facial_check+0x56>
        // **Non-blocking delay: Wait for 2 seconds**
        if (HAL_GetTick() - delayStartTime >= 2000) {
 8001ae6:	f001 f975 	bl	8002dd4 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <menu_facial_check+0xbc>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001af6:	d304      	bcc.n	8001b02 <menu_facial_check+0x52>
            delayInProgress = 0; // End delay
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <menu_facial_check+0xb0>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
            return 0; // Return to the main menu
 8001afe:	2300      	movs	r3, #0
 8001b00:	e02b      	b.n	8001b5a <menu_facial_check+0xaa>
        }
        return 13; // Stay in the facial recognition menu during delay
 8001b02:	230d      	movs	r3, #13
 8001b04:	e029      	b.n	8001b5a <menu_facial_check+0xaa>
    }

    if (facial_flag == 1) { // If facial recognition is successful
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <menu_facial_check+0xc0>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d11b      	bne.n	8001b46 <menu_facial_check+0x96>
        facial_flag = 0; // Reset flag
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <menu_facial_check+0xc0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
        ssd1306_Fill(Black);
 8001b14:	2000      	movs	r0, #0
 8001b16:	f000 fca1 	bl	800245c <ssd1306_Fill>
        ssd1306_SetCursor(0, 0);
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f000 fde7 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString("Unlock!", Font_7x10, White); // Display unlock message
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <menu_facial_check+0xb4>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	9200      	str	r2, [sp, #0]
 8001b28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b2a:	4812      	ldr	r0, [pc, #72]	; (8001b74 <menu_facial_check+0xc4>)
 8001b2c:	f000 fdba 	bl	80026a4 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8001b30:	f000 fcac 	bl	800248c <ssd1306_UpdateScreen>

        delayStartTime = HAL_GetTick(); // Record start time
 8001b34:	f001 f94e 	bl	8002dd4 <HAL_GetTick>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <menu_facial_check+0xbc>)
 8001b3c:	6013      	str	r3, [r2, #0]
        delayInProgress = 1; // Activate non-blocking delay
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <menu_facial_check+0xb0>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e008      	b.n	8001b58 <menu_facial_check+0xa8>
    }

    else if (keyPressed == 'B')
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <menu_facial_check+0xc8>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b42      	cmp	r3, #66	; 0x42
 8001b4c:	d104      	bne.n	8001b58 <menu_facial_check+0xa8>
    {
        	keyPressed = 0;
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <menu_facial_check+0xc8>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
        	return 11;
 8001b54:	230b      	movs	r3, #11
 8001b56:	e000      	b.n	8001b5a <menu_facial_check+0xaa>
    }

    return 13; // Stay in the current menu
 8001b58:	230d      	movs	r3, #13
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200002cc 	.word	0x200002cc
 8001b64:	08007a20 	.word	0x08007a20
 8001b68:	08006ba4 	.word	0x08006ba4
 8001b6c:	200002d0 	.word	0x200002d0
 8001b70:	200002ac 	.word	0x200002ac
 8001b74:	08006b10 	.word	0x08006b10
 8001b78:	200002a8 	.word	0x200002a8

08001b7c <menu_settings_check>:

int menu_settings_check(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af02      	add	r7, sp, #8
    static char userPin[7] = {0}; // Stores the user-entered PIN (max 6 digits)
    static uint8_t pinIndex = 0;  // Current PIN input length
    static uint32_t delayStartTime = 0;  // Stores the start time for non-blocking delay
    static int delayInProgress = 0;  // Indicates if a non-blocking delay is active
    static int nextState = 2;  // Stores the next state after delay
    const char systemPin[] = "970329"; // Predefined system PIN
 8001b82:	4a83      	ldr	r2, [pc, #524]	; (8001d90 <menu_settings_check+0x214>)
 8001b84:	463b      	mov	r3, r7
 8001b86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b8a:	6018      	str	r0, [r3, #0]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	8019      	strh	r1, [r3, #0]
 8001b90:	3302      	adds	r3, #2
 8001b92:	0c0a      	lsrs	r2, r1, #16
 8001b94:	701a      	strb	r2, [r3, #0]

    if (!delayInProgress) { // Update screen only if not in a delay period
 8001b96:	4b7f      	ldr	r3, [pc, #508]	; (8001d94 <menu_settings_check+0x218>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d125      	bne.n	8001bea <menu_settings_check+0x6e>
        ssd1306_Fill(Black);
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f000 fc5c 	bl	800245c <ssd1306_Fill>
        ssd1306_SetCursor(0, 0);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 fda2 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString("Enter System PIN", Font_7x10, White);
 8001bac:	4b7a      	ldr	r3, [pc, #488]	; (8001d98 <menu_settings_check+0x21c>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	9200      	str	r2, [sp, #0]
 8001bb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bb4:	4879      	ldr	r0, [pc, #484]	; (8001d9c <menu_settings_check+0x220>)
 8001bb6:	f000 fd75 	bl	80026a4 <ssd1306_WriteString>
        ssd1306_SetCursor(0, 15);
 8001bba:	210f      	movs	r1, #15
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f000 fd97 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString("to Access Settings", Font_7x10, White);
 8001bc2:	4b75      	ldr	r3, [pc, #468]	; (8001d98 <menu_settings_check+0x21c>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	9200      	str	r2, [sp, #0]
 8001bc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bca:	4875      	ldr	r0, [pc, #468]	; (8001da0 <menu_settings_check+0x224>)
 8001bcc:	f000 fd6a 	bl	80026a4 <ssd1306_WriteString>
        ssd1306_SetCursor(0, 30);
 8001bd0:	211e      	movs	r1, #30
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f000 fd8c 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString(userPin, Font_7x10, White);
 8001bd8:	4b6f      	ldr	r3, [pc, #444]	; (8001d98 <menu_settings_check+0x21c>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	9200      	str	r2, [sp, #0]
 8001bde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001be0:	4870      	ldr	r0, [pc, #448]	; (8001da4 <menu_settings_check+0x228>)
 8001be2:	f000 fd5f 	bl	80026a4 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8001be6:	f000 fc51 	bl	800248c <ssd1306_UpdateScreen>
    }

    if (delayInProgress) {
 8001bea:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <menu_settings_check+0x218>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d018      	beq.n	8001c24 <menu_settings_check+0xa8>
        // **Non-blocking delay: Wait for 1 second**
        if (HAL_GetTick() - delayStartTime >= 1000) {
 8001bf2:	f001 f8ef 	bl	8002dd4 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	4b6b      	ldr	r3, [pc, #428]	; (8001da8 <menu_settings_check+0x22c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c02:	d30d      	bcc.n	8001c20 <menu_settings_check+0xa4>
            delayInProgress = 0; // End non-blocking delay
 8001c04:	4b63      	ldr	r3, [pc, #396]	; (8001d94 <menu_settings_check+0x218>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
            pinIndex = 0; // Reset PIN input
 8001c0a:	4b68      	ldr	r3, [pc, #416]	; (8001dac <menu_settings_check+0x230>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
            memset(userPin, 0, sizeof(userPin)); // Clear input
 8001c10:	2207      	movs	r2, #7
 8001c12:	2100      	movs	r1, #0
 8001c14:	4863      	ldr	r0, [pc, #396]	; (8001da4 <menu_settings_check+0x228>)
 8001c16:	f003 fda3 	bl	8005760 <memset>
            return nextState;  // Return to the next menu (3 = success, 2 = failure)
 8001c1a:	4b65      	ldr	r3, [pc, #404]	; (8001db0 <menu_settings_check+0x234>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	e0b2      	b.n	8001d86 <menu_settings_check+0x20a>
        }
        return 2;  // Stay in the current menu during the delay period
 8001c20:	2302      	movs	r3, #2
 8001c22:	e0b0      	b.n	8001d86 <menu_settings_check+0x20a>
    }

    if (keyPressed >= '0' && keyPressed <= '9') { // Detect numeric input
 8001c24:	4b63      	ldr	r3, [pc, #396]	; (8001db4 <menu_settings_check+0x238>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b2f      	cmp	r3, #47	; 0x2f
 8001c2a:	d91c      	bls.n	8001c66 <menu_settings_check+0xea>
 8001c2c:	4b61      	ldr	r3, [pc, #388]	; (8001db4 <menu_settings_check+0x238>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b39      	cmp	r3, #57	; 0x39
 8001c32:	d818      	bhi.n	8001c66 <menu_settings_check+0xea>
        if (pinIndex < 6) { // Ensure PIN does not exceed 6 digits
 8001c34:	4b5d      	ldr	r3, [pc, #372]	; (8001dac <menu_settings_check+0x230>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	d810      	bhi.n	8001c5e <menu_settings_check+0xe2>
            userPin[pinIndex++] = keyPressed; // Store the entered digit
 8001c3c:	4b5b      	ldr	r3, [pc, #364]	; (8001dac <menu_settings_check+0x230>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	b2d1      	uxtb	r1, r2
 8001c44:	4a59      	ldr	r2, [pc, #356]	; (8001dac <menu_settings_check+0x230>)
 8001c46:	7011      	strb	r1, [r2, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b5a      	ldr	r3, [pc, #360]	; (8001db4 <menu_settings_check+0x238>)
 8001c4c:	7819      	ldrb	r1, [r3, #0]
 8001c4e:	4b55      	ldr	r3, [pc, #340]	; (8001da4 <menu_settings_check+0x228>)
 8001c50:	5499      	strb	r1, [r3, r2]
            userPin[pinIndex] = '\0'; // Ensure null termination
 8001c52:	4b56      	ldr	r3, [pc, #344]	; (8001dac <menu_settings_check+0x230>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b52      	ldr	r3, [pc, #328]	; (8001da4 <menu_settings_check+0x228>)
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	5499      	strb	r1, [r3, r2]
        }
        keyPressed = 0; // Clear key press status
 8001c5e:	4b55      	ldr	r3, [pc, #340]	; (8001db4 <menu_settings_check+0x238>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	e08e      	b.n	8001d84 <menu_settings_check+0x208>
    } else if (keyPressed == 'C') { // Confirm input
 8001c66:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <menu_settings_check+0x238>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b43      	cmp	r3, #67	; 0x43
 8001c6c:	d162      	bne.n	8001d34 <menu_settings_check+0x1b8>
        keyPressed = 0;
 8001c6e:	4b51      	ldr	r3, [pc, #324]	; (8001db4 <menu_settings_check+0x238>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
        if (pinIndex == 6) { // Ensure PIN has the correct length
 8001c74:	4b4d      	ldr	r3, [pc, #308]	; (8001dac <menu_settings_check+0x230>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b06      	cmp	r3, #6
 8001c7a:	d13f      	bne.n	8001cfc <menu_settings_check+0x180>
            if (strcmp(userPin, systemPin) == 0) { // Validate PIN
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4848      	ldr	r0, [pc, #288]	; (8001da4 <menu_settings_check+0x228>)
 8001c82:	f7fe fa63 	bl	800014c <strcmp>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d11b      	bne.n	8001cc4 <menu_settings_check+0x148>
                ssd1306_Fill(Black);
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f000 fbe5 	bl	800245c <ssd1306_Fill>
                ssd1306_SetCursor(0, 40);
 8001c92:	2128      	movs	r1, #40	; 0x28
 8001c94:	2000      	movs	r0, #0
 8001c96:	f000 fd2b 	bl	80026f0 <ssd1306_SetCursor>
                ssd1306_WriteString("PIN Correct!", Font_7x10, White);
 8001c9a:	4b3f      	ldr	r3, [pc, #252]	; (8001d98 <menu_settings_check+0x21c>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	9200      	str	r2, [sp, #0]
 8001ca0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ca2:	4845      	ldr	r0, [pc, #276]	; (8001db8 <menu_settings_check+0x23c>)
 8001ca4:	f000 fcfe 	bl	80026a4 <ssd1306_WriteString>
                ssd1306_UpdateScreen();
 8001ca8:	f000 fbf0 	bl	800248c <ssd1306_UpdateScreen>

                delayStartTime = HAL_GetTick(); // Record start time
 8001cac:	f001 f892 	bl	8002dd4 <HAL_GetTick>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4a3d      	ldr	r2, [pc, #244]	; (8001da8 <menu_settings_check+0x22c>)
 8001cb4:	6013      	str	r3, [r2, #0]
                delayInProgress = 1; // Activate non-blocking delay
 8001cb6:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <menu_settings_check+0x218>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
                nextState = 3; // Move to the settings menu after 1 second
 8001cbc:	4b3c      	ldr	r3, [pc, #240]	; (8001db0 <menu_settings_check+0x234>)
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e05f      	b.n	8001d84 <menu_settings_check+0x208>
            } else { // Incorrect PIN
                ssd1306_Fill(Black);
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f000 fbc9 	bl	800245c <ssd1306_Fill>
                ssd1306_SetCursor(0, 40);
 8001cca:	2128      	movs	r1, #40	; 0x28
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f000 fd0f 	bl	80026f0 <ssd1306_SetCursor>
                ssd1306_WriteString("PIN Incorrect!", Font_7x10, White);
 8001cd2:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <menu_settings_check+0x21c>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	9200      	str	r2, [sp, #0]
 8001cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cda:	4838      	ldr	r0, [pc, #224]	; (8001dbc <menu_settings_check+0x240>)
 8001cdc:	f000 fce2 	bl	80026a4 <ssd1306_WriteString>
                ssd1306_UpdateScreen();
 8001ce0:	f000 fbd4 	bl	800248c <ssd1306_UpdateScreen>

                delayStartTime = HAL_GetTick();
 8001ce4:	f001 f876 	bl	8002dd4 <HAL_GetTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4a2f      	ldr	r2, [pc, #188]	; (8001da8 <menu_settings_check+0x22c>)
 8001cec:	6013      	str	r3, [r2, #0]
                delayInProgress = 1;
 8001cee:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <menu_settings_check+0x218>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
                nextState = 2; // Retry after 1 second
 8001cf4:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <menu_settings_check+0x234>)
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e043      	b.n	8001d84 <menu_settings_check+0x208>
            }
        } else { // PIN not complete
            ssd1306_Fill(Black);
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f000 fbad 	bl	800245c <ssd1306_Fill>
            ssd1306_SetCursor(0, 40);
 8001d02:	2128      	movs	r1, #40	; 0x28
 8001d04:	2000      	movs	r0, #0
 8001d06:	f000 fcf3 	bl	80026f0 <ssd1306_SetCursor>
            ssd1306_WriteString("Incomplete PIN!", Font_7x10, White);
 8001d0a:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <menu_settings_check+0x21c>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	9200      	str	r2, [sp, #0]
 8001d10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d12:	482b      	ldr	r0, [pc, #172]	; (8001dc0 <menu_settings_check+0x244>)
 8001d14:	f000 fcc6 	bl	80026a4 <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 8001d18:	f000 fbb8 	bl	800248c <ssd1306_UpdateScreen>

            delayStartTime = HAL_GetTick();
 8001d1c:	f001 f85a 	bl	8002dd4 <HAL_GetTick>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4a21      	ldr	r2, [pc, #132]	; (8001da8 <menu_settings_check+0x22c>)
 8001d24:	6013      	str	r3, [r2, #0]
            delayInProgress = 1;
 8001d26:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <menu_settings_check+0x218>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
            nextState = 2; // Retry after 1 second
 8001d2c:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <menu_settings_check+0x234>)
 8001d2e:	2202      	movs	r2, #2
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e027      	b.n	8001d84 <menu_settings_check+0x208>
        }
    } else if (keyPressed == 'B') { // Return to main menu
 8001d34:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <menu_settings_check+0x238>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b42      	cmp	r3, #66	; 0x42
 8001d3a:	d10c      	bne.n	8001d56 <menu_settings_check+0x1da>
        keyPressed = 0;
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <menu_settings_check+0x238>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
        pinIndex = 0;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <menu_settings_check+0x230>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
        memset(userPin, 0, sizeof(userPin));
 8001d48:	2207      	movs	r2, #7
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4815      	ldr	r0, [pc, #84]	; (8001da4 <menu_settings_check+0x228>)
 8001d4e:	f003 fd07 	bl	8005760 <memset>
        return 0; // Return to main menu
 8001d52:	2300      	movs	r3, #0
 8001d54:	e017      	b.n	8001d86 <menu_settings_check+0x20a>
    } else if (keyPressed == 'D') { // Backspace function
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <menu_settings_check+0x238>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b44      	cmp	r3, #68	; 0x44
 8001d5c:	d112      	bne.n	8001d84 <menu_settings_check+0x208>
        keyPressed = 0;
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <menu_settings_check+0x238>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
        if (pinIndex > 0) {
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <menu_settings_check+0x230>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00b      	beq.n	8001d84 <menu_settings_check+0x208>
            pinIndex--;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <menu_settings_check+0x230>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <menu_settings_check+0x230>)
 8001d76:	701a      	strb	r2, [r3, #0]
            userPin[pinIndex] = '\0';
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <menu_settings_check+0x230>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <menu_settings_check+0x228>)
 8001d80:	2100      	movs	r1, #0
 8001d82:	5499      	strb	r1, [r3, r2]
        }
    }

    return 2; // Stay in the current menu
 8001d84:	2302      	movs	r3, #2
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	08006bec 	.word	0x08006bec
 8001d94:	200002d4 	.word	0x200002d4
 8001d98:	08007a20 	.word	0x08007a20
 8001d9c:	08006bb4 	.word	0x08006bb4
 8001da0:	08006bc8 	.word	0x08006bc8
 8001da4:	200002d8 	.word	0x200002d8
 8001da8:	200002e0 	.word	0x200002e0
 8001dac:	200002e4 	.word	0x200002e4
 8001db0:	2000001c 	.word	0x2000001c
 8001db4:	200002a8 	.word	0x200002a8
 8001db8:	08006b3c 	.word	0x08006b3c
 8001dbc:	08006bdc 	.word	0x08006bdc
 8001dc0:	08006b5c 	.word	0x08006b5c

08001dc4 <menu_settings>:


int menu_settings(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f000 fb46 	bl	800245c <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f000 fc8c 	bl	80026f0 <ssd1306_SetCursor>
    ssd1306_WriteString("1.Edit Door PIN", Font_6x8, White);
 8001dd8:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <menu_settings+0xa4>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	9200      	str	r2, [sp, #0]
 8001dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001de0:	4822      	ldr	r0, [pc, #136]	; (8001e6c <menu_settings+0xa8>)
 8001de2:	f000 fc5f 	bl	80026a4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 20);
 8001de6:	2114      	movs	r1, #20
 8001de8:	2000      	movs	r0, #0
 8001dea:	f000 fc81 	bl	80026f0 <ssd1306_SetCursor>
    ssd1306_WriteString("2.Edit Fingerprint", Font_6x8, White);
 8001dee:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <menu_settings+0xa4>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	9200      	str	r2, [sp, #0]
 8001df4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001df6:	481e      	ldr	r0, [pc, #120]	; (8001e70 <menu_settings+0xac>)
 8001df8:	f000 fc54 	bl	80026a4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 40);
 8001dfc:	2128      	movs	r1, #40	; 0x28
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f000 fc76 	bl	80026f0 <ssd1306_SetCursor>
    ssd1306_WriteString("3.Edit Facial", Font_6x8, White);
 8001e04:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <menu_settings+0xa4>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	9200      	str	r2, [sp, #0]
 8001e0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0c:	4819      	ldr	r0, [pc, #100]	; (8001e74 <menu_settings+0xb0>)
 8001e0e:	f000 fc49 	bl	80026a4 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001e12:	f000 fb3b 	bl	800248c <ssd1306_UpdateScreen>
    if (keyPressed == '1') {
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <menu_settings+0xb4>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b31      	cmp	r3, #49	; 0x31
 8001e1c:	d104      	bne.n	8001e28 <menu_settings+0x64>
    	keyPressed = 0;
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <menu_settings+0xb4>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
        return 31; // Switch to the next menu
 8001e24:	231f      	movs	r3, #31
 8001e26:	e01b      	b.n	8001e60 <menu_settings+0x9c>
    }else if (keyPressed == 'B'){
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <menu_settings+0xb4>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b42      	cmp	r3, #66	; 0x42
 8001e2e:	d104      	bne.n	8001e3a <menu_settings+0x76>
    	keyPressed = 0;
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <menu_settings+0xb4>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
    	return 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e012      	b.n	8001e60 <menu_settings+0x9c>
    }else if (keyPressed == '2'){
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <menu_settings+0xb4>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b32      	cmp	r3, #50	; 0x32
 8001e40:	d104      	bne.n	8001e4c <menu_settings+0x88>
    	keyPressed = 0;
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <menu_settings+0xb4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
    	return 32;
 8001e48:	2320      	movs	r3, #32
 8001e4a:	e009      	b.n	8001e60 <menu_settings+0x9c>
    }else if (keyPressed == '3'){
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <menu_settings+0xb4>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b33      	cmp	r3, #51	; 0x33
 8001e52:	d104      	bne.n	8001e5e <menu_settings+0x9a>
    	keyPressed = 0;
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <menu_settings+0xb4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
    	return 35;
 8001e5a:	2323      	movs	r3, #35	; 0x23
 8001e5c:	e000      	b.n	8001e60 <menu_settings+0x9c>
    }
    return 3;
 8001e5e:	2303      	movs	r3, #3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	08007a14 	.word	0x08007a14
 8001e6c:	08006bf4 	.word	0x08006bf4
 8001e70:	08006c04 	.word	0x08006c04
 8001e74:	08006c18 	.word	0x08006c18
 8001e78:	200002a8 	.word	0x200002a8

08001e7c <set_doorPIN>:

int set_doorPIN(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af02      	add	r7, sp, #8
    static uint8_t InputIndex = 0;  // Current PIN input length
    static uint32_t delayStartTime = 0;  // Stores the start time for non-blocking delay
    static int delayInProgress = 0;  // Indicates if a non-blocking delay is active
    static int nextState = 31;  // Stores the next state after delay

    if (!delayInProgress) { // Only update screen when no delay is active
 8001e82:	4b5c      	ldr	r3, [pc, #368]	; (8001ff4 <set_doorPIN+0x178>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d11a      	bne.n	8001ec0 <set_doorPIN+0x44>
        ssd1306_Fill(Black);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f000 fae6 	bl	800245c <ssd1306_Fill>
        ssd1306_SetCursor(0, 0);
 8001e90:	2100      	movs	r1, #0
 8001e92:	2000      	movs	r0, #0
 8001e94:	f000 fc2c 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString("Enter New Door PIN", Font_6x8, White);
 8001e98:	4b57      	ldr	r3, [pc, #348]	; (8001ff8 <set_doorPIN+0x17c>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	9200      	str	r2, [sp, #0]
 8001e9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ea0:	4856      	ldr	r0, [pc, #344]	; (8001ffc <set_doorPIN+0x180>)
 8001ea2:	f000 fbff 	bl	80026a4 <ssd1306_WriteString>
        ssd1306_SetCursor(0, 20);
 8001ea6:	2114      	movs	r1, #20
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f000 fc21 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString(userInput, Font_6x8, White);
 8001eae:	4b52      	ldr	r3, [pc, #328]	; (8001ff8 <set_doorPIN+0x17c>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	9200      	str	r2, [sp, #0]
 8001eb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb6:	4852      	ldr	r0, [pc, #328]	; (8002000 <set_doorPIN+0x184>)
 8001eb8:	f000 fbf4 	bl	80026a4 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8001ebc:	f000 fae6 	bl	800248c <ssd1306_UpdateScreen>
    }

    if (delayInProgress) {
 8001ec0:	4b4c      	ldr	r3, [pc, #304]	; (8001ff4 <set_doorPIN+0x178>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d018      	beq.n	8001efa <set_doorPIN+0x7e>
        // **Non-blocking delay: Wait for 2 seconds**
        if (HAL_GetTick() - delayStartTime >= 2000) {
 8001ec8:	f000 ff84 	bl	8002dd4 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b4d      	ldr	r3, [pc, #308]	; (8002004 <set_doorPIN+0x188>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ed8:	d30d      	bcc.n	8001ef6 <set_doorPIN+0x7a>
            delayInProgress = 0; // End non-blocking delay
 8001eda:	4b46      	ldr	r3, [pc, #280]	; (8001ff4 <set_doorPIN+0x178>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
            InputIndex = 0; // Reset PIN input
 8001ee0:	4b49      	ldr	r3, [pc, #292]	; (8002008 <set_doorPIN+0x18c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
            memset(userInput, 0, sizeof(userInput)); // Clear input
 8001ee6:	2205      	movs	r2, #5
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4845      	ldr	r0, [pc, #276]	; (8002000 <set_doorPIN+0x184>)
 8001eec:	f003 fc38 	bl	8005760 <memset>
            return nextState;  // Return to the main menu
 8001ef0:	4b46      	ldr	r3, [pc, #280]	; (800200c <set_doorPIN+0x190>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	e07b      	b.n	8001fee <set_doorPIN+0x172>
        }
        return 31;  // Stay in the current menu during the delay
 8001ef6:	231f      	movs	r3, #31
 8001ef8:	e079      	b.n	8001fee <set_doorPIN+0x172>
    }

    if (keyPressed >= '0' && keyPressed <= '9') { // Detect numeric input
 8001efa:	4b45      	ldr	r3, [pc, #276]	; (8002010 <set_doorPIN+0x194>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b2f      	cmp	r3, #47	; 0x2f
 8001f00:	d91c      	bls.n	8001f3c <set_doorPIN+0xc0>
 8001f02:	4b43      	ldr	r3, [pc, #268]	; (8002010 <set_doorPIN+0x194>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b39      	cmp	r3, #57	; 0x39
 8001f08:	d818      	bhi.n	8001f3c <set_doorPIN+0xc0>
        if (InputIndex < 4) { // Ensure PIN does not exceed 4 digits
 8001f0a:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <set_doorPIN+0x18c>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d810      	bhi.n	8001f34 <set_doorPIN+0xb8>
            userInput[InputIndex++] = keyPressed; // Store the entered digit
 8001f12:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <set_doorPIN+0x18c>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	b2d1      	uxtb	r1, r2
 8001f1a:	4a3b      	ldr	r2, [pc, #236]	; (8002008 <set_doorPIN+0x18c>)
 8001f1c:	7011      	strb	r1, [r2, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4b3b      	ldr	r3, [pc, #236]	; (8002010 <set_doorPIN+0x194>)
 8001f22:	7819      	ldrb	r1, [r3, #0]
 8001f24:	4b36      	ldr	r3, [pc, #216]	; (8002000 <set_doorPIN+0x184>)
 8001f26:	5499      	strb	r1, [r3, r2]
            userInput[InputIndex] = '\0'; // Ensure null termination
 8001f28:	4b37      	ldr	r3, [pc, #220]	; (8002008 <set_doorPIN+0x18c>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b34      	ldr	r3, [pc, #208]	; (8002000 <set_doorPIN+0x184>)
 8001f30:	2100      	movs	r1, #0
 8001f32:	5499      	strb	r1, [r3, r2]
        }
        keyPressed = 0; // Clear key press status
 8001f34:	4b36      	ldr	r3, [pc, #216]	; (8002010 <set_doorPIN+0x194>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
 8001f3a:	e057      	b.n	8001fec <set_doorPIN+0x170>
    } else if (keyPressed == 'C') { // Confirm input
 8001f3c:	4b34      	ldr	r3, [pc, #208]	; (8002010 <set_doorPIN+0x194>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b43      	cmp	r3, #67	; 0x43
 8001f42:	d142      	bne.n	8001fca <set_doorPIN+0x14e>
        keyPressed = 0;
 8001f44:	4b32      	ldr	r3, [pc, #200]	; (8002010 <set_doorPIN+0x194>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
        if (InputIndex == 4) { // Only save PIN if 4 digits are entered
 8001f4a:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <set_doorPIN+0x18c>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d11f      	bne.n	8001f92 <set_doorPIN+0x116>
            strcpy(DoorPin, userInput);
 8001f52:	492b      	ldr	r1, [pc, #172]	; (8002000 <set_doorPIN+0x184>)
 8001f54:	482f      	ldr	r0, [pc, #188]	; (8002014 <set_doorPIN+0x198>)
 8001f56:	f003 fca8 	bl	80058aa <strcpy>
            ssd1306_Fill(Black);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f000 fa7e 	bl	800245c <ssd1306_Fill>
            ssd1306_SetCursor(0, 0);
 8001f60:	2100      	movs	r1, #0
 8001f62:	2000      	movs	r0, #0
 8001f64:	f000 fbc4 	bl	80026f0 <ssd1306_SetCursor>
            ssd1306_WriteString("PIN SET OK", Font_7x10, White);
 8001f68:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <set_doorPIN+0x19c>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	9200      	str	r2, [sp, #0]
 8001f6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f70:	482a      	ldr	r0, [pc, #168]	; (800201c <set_doorPIN+0x1a0>)
 8001f72:	f000 fb97 	bl	80026a4 <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 8001f76:	f000 fa89 	bl	800248c <ssd1306_UpdateScreen>

            delayStartTime = HAL_GetTick(); // Record start time
 8001f7a:	f000 ff2b 	bl	8002dd4 <HAL_GetTick>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4a20      	ldr	r2, [pc, #128]	; (8002004 <set_doorPIN+0x188>)
 8001f82:	6013      	str	r3, [r2, #0]
            delayInProgress = 1; // Activate non-blocking delay
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <set_doorPIN+0x178>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
            nextState = 0; // Move to the main menu after 2 seconds
 8001f8a:	4b20      	ldr	r3, [pc, #128]	; (800200c <set_doorPIN+0x190>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	e02c      	b.n	8001fec <set_doorPIN+0x170>
        } else { // Incomplete PIN
            ssd1306_Fill(Black);
 8001f92:	2000      	movs	r0, #0
 8001f94:	f000 fa62 	bl	800245c <ssd1306_Fill>
            ssd1306_SetCursor(0, 40);
 8001f98:	2128      	movs	r1, #40	; 0x28
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f000 fba8 	bl	80026f0 <ssd1306_SetCursor>
            ssd1306_WriteString("Incomplete PIN!", Font_7x10, White);
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <set_doorPIN+0x19c>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	9200      	str	r2, [sp, #0]
 8001fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa8:	481d      	ldr	r0, [pc, #116]	; (8002020 <set_doorPIN+0x1a4>)
 8001faa:	f000 fb7b 	bl	80026a4 <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 8001fae:	f000 fa6d 	bl	800248c <ssd1306_UpdateScreen>

            delayStartTime = HAL_GetTick();
 8001fb2:	f000 ff0f 	bl	8002dd4 <HAL_GetTick>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4a12      	ldr	r2, [pc, #72]	; (8002004 <set_doorPIN+0x188>)
 8001fba:	6013      	str	r3, [r2, #0]
            delayInProgress = 1;
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <set_doorPIN+0x178>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
            nextState = 31; // Retry after 2 seconds
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <set_doorPIN+0x190>)
 8001fc4:	221f      	movs	r2, #31
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e010      	b.n	8001fec <set_doorPIN+0x170>
        }
    } else if (keyPressed == 'B') { // Return to the main menu
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <set_doorPIN+0x194>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b42      	cmp	r3, #66	; 0x42
 8001fd0:	d10c      	bne.n	8001fec <set_doorPIN+0x170>
        keyPressed = 0;
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <set_doorPIN+0x194>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
        InputIndex = 0;
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <set_doorPIN+0x18c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
        memset(userInput, 0, sizeof(userInput));
 8001fde:	2205      	movs	r2, #5
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4807      	ldr	r0, [pc, #28]	; (8002000 <set_doorPIN+0x184>)
 8001fe4:	f003 fbbc 	bl	8005760 <memset>
        return 3; // Return to the main menu
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e000      	b.n	8001fee <set_doorPIN+0x172>
    }

    return 31; // Stay in the current menu
 8001fec:	231f      	movs	r3, #31
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	200002e8 	.word	0x200002e8
 8001ff8:	08007a14 	.word	0x08007a14
 8001ffc:	08006c28 	.word	0x08006c28
 8002000:	200002ec 	.word	0x200002ec
 8002004:	200002f4 	.word	0x200002f4
 8002008:	200002f8 	.word	0x200002f8
 800200c:	20000020 	.word	0x20000020
 8002010:	200002a8 	.word	0x200002a8
 8002014:	20000010 	.word	0x20000010
 8002018:	08007a20 	.word	0x08007a20
 800201c:	08006c3c 	.word	0x08006c3c
 8002020:	08006b5c 	.word	0x08006b5c

08002024 <menu_modify_FR>:

int menu_modify_FR(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 800202a:	2000      	movs	r0, #0
 800202c:	f000 fa16 	bl	800245c <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8002030:	2100      	movs	r1, #0
 8002032:	2000      	movs	r0, #0
 8002034:	f000 fb5c 	bl	80026f0 <ssd1306_SetCursor>
    ssd1306_WriteString("1.Add Fingerprint", Font_6x8, White);
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <menu_modify_FR+0x7c>)
 800203a:	2201      	movs	r2, #1
 800203c:	9200      	str	r2, [sp, #0]
 800203e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002040:	4818      	ldr	r0, [pc, #96]	; (80020a4 <menu_modify_FR+0x80>)
 8002042:	f000 fb2f 	bl	80026a4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 20);
 8002046:	2114      	movs	r1, #20
 8002048:	2000      	movs	r0, #0
 800204a:	f000 fb51 	bl	80026f0 <ssd1306_SetCursor>
    ssd1306_WriteString("2.Delete Fingerprint", Font_6x8, White);
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <menu_modify_FR+0x7c>)
 8002050:	2201      	movs	r2, #1
 8002052:	9200      	str	r2, [sp, #0]
 8002054:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002056:	4814      	ldr	r0, [pc, #80]	; (80020a8 <menu_modify_FR+0x84>)
 8002058:	f000 fb24 	bl	80026a4 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800205c:	f000 fa16 	bl	800248c <ssd1306_UpdateScreen>
    if (keyPressed == 'B'){
 8002060:	4b12      	ldr	r3, [pc, #72]	; (80020ac <menu_modify_FR+0x88>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b42      	cmp	r3, #66	; 0x42
 8002066:	d104      	bne.n	8002072 <menu_modify_FR+0x4e>
    	keyPressed = 0;
 8002068:	4b10      	ldr	r3, [pc, #64]	; (80020ac <menu_modify_FR+0x88>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
    	return 3;
 800206e:	2303      	movs	r3, #3
 8002070:	e012      	b.n	8002098 <menu_modify_FR+0x74>
    }
    else if (keyPressed == '1'){
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <menu_modify_FR+0x88>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b31      	cmp	r3, #49	; 0x31
 8002078:	d104      	bne.n	8002084 <menu_modify_FR+0x60>
    	keyPressed = 0;
 800207a:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <menu_modify_FR+0x88>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
    	return 33;
 8002080:	2321      	movs	r3, #33	; 0x21
 8002082:	e009      	b.n	8002098 <menu_modify_FR+0x74>
    }
    else if (keyPressed == '2') {
 8002084:	4b09      	ldr	r3, [pc, #36]	; (80020ac <menu_modify_FR+0x88>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b32      	cmp	r3, #50	; 0x32
 800208a:	d104      	bne.n	8002096 <menu_modify_FR+0x72>
        keyPressed = 0;
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <menu_modify_FR+0x88>)
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
        return 34; // 进入删除指纹菜单
 8002092:	2322      	movs	r3, #34	; 0x22
 8002094:	e000      	b.n	8002098 <menu_modify_FR+0x74>
    }
    return 32;
 8002096:	2320      	movs	r3, #32
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	08007a14 	.word	0x08007a14
 80020a4:	08006c48 	.word	0x08006c48
 80020a8:	08006c5c 	.word	0x08006c5c
 80020ac:	200002a8 	.word	0x200002a8

080020b0 <menu_delete_FR>:

int menu_delete_FR(void) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af02      	add	r7, sp, #8
    static char userInput[2] = {0}; // 用户输入的 ID，只允许 1 位数字

    ssd1306_Fill(Black);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f000 f9d0 	bl	800245c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80020bc:	2100      	movs	r1, #0
 80020be:	2000      	movs	r0, #0
 80020c0:	f000 fb16 	bl	80026f0 <ssd1306_SetCursor>
    ssd1306_WriteString("Enter ID to Delete", Font_6x8, White);
 80020c4:	4b29      	ldr	r3, [pc, #164]	; (800216c <menu_delete_FR+0xbc>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	9200      	str	r2, [sp, #0]
 80020ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020cc:	4828      	ldr	r0, [pc, #160]	; (8002170 <menu_delete_FR+0xc0>)
 80020ce:	f000 fae9 	bl	80026a4 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 80020d2:	2114      	movs	r1, #20
 80020d4:	2000      	movs	r0, #0
 80020d6:	f000 fb0b 	bl	80026f0 <ssd1306_SetCursor>
    ssd1306_WriteString(userInput, Font_6x8, White);
 80020da:	4b24      	ldr	r3, [pc, #144]	; (800216c <menu_delete_FR+0xbc>)
 80020dc:	2201      	movs	r2, #1
 80020de:	9200      	str	r2, [sp, #0]
 80020e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e2:	4824      	ldr	r0, [pc, #144]	; (8002174 <menu_delete_FR+0xc4>)
 80020e4:	f000 fade 	bl	80026a4 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80020e8:	f000 f9d0 	bl	800248c <ssd1306_UpdateScreen>

    if (keyPressed >= '0' && keyPressed <= '9') {
 80020ec:	4b22      	ldr	r3, [pc, #136]	; (8002178 <menu_delete_FR+0xc8>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b2f      	cmp	r3, #47	; 0x2f
 80020f2:	d90e      	bls.n	8002112 <menu_delete_FR+0x62>
 80020f4:	4b20      	ldr	r3, [pc, #128]	; (8002178 <menu_delete_FR+0xc8>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b39      	cmp	r3, #57	; 0x39
 80020fa:	d80a      	bhi.n	8002112 <menu_delete_FR+0x62>
        userInput[0] = keyPressed; // Overwrite previous input
 80020fc:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <menu_delete_FR+0xc8>)
 80020fe:	781a      	ldrb	r2, [r3, #0]
 8002100:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <menu_delete_FR+0xc4>)
 8002102:	701a      	strb	r2, [r3, #0]
        userInput[1] = '\0'; // Ensure null-termination
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <menu_delete_FR+0xc4>)
 8002106:	2200      	movs	r2, #0
 8002108:	705a      	strb	r2, [r3, #1]
        keyPressed = 0;
 800210a:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <menu_delete_FR+0xc8>)
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
 8002110:	e026      	b.n	8002160 <menu_delete_FR+0xb0>
    }
    else if (keyPressed == 'C' && userInput[0] != '\0') { // Confirm delete
 8002112:	4b19      	ldr	r3, [pc, #100]	; (8002178 <menu_delete_FR+0xc8>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b43      	cmp	r3, #67	; 0x43
 8002118:	d114      	bne.n	8002144 <menu_delete_FR+0x94>
 800211a:	4b16      	ldr	r3, [pc, #88]	; (8002174 <menu_delete_FR+0xc4>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d010      	beq.n	8002144 <menu_delete_FR+0x94>
        keyPressed = 0;
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <menu_delete_FR+0xc8>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
        uint16_t id = userInput[0] - '0'; // Convert char to int
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <menu_delete_FR+0xc4>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	b29b      	uxth	r3, r3
 800212e:	3b30      	subs	r3, #48	; 0x30
 8002130:	80fb      	strh	r3, [r7, #6]
        Del_FR(id);
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fdf9 	bl	8000d2c <Del_FR>
        userInput[0] = '\0'; // Clear input
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <menu_delete_FR+0xc4>)
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
        return 32; // Return to fingerprint management menu
 8002140:	2320      	movs	r3, #32
 8002142:	e00e      	b.n	8002162 <menu_delete_FR+0xb2>
    }
    else if (keyPressed == 'B') { // 取消
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <menu_delete_FR+0xc8>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b42      	cmp	r3, #66	; 0x42
 800214a:	d109      	bne.n	8002160 <menu_delete_FR+0xb0>
        keyPressed = 0;
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <menu_delete_FR+0xc8>)
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
        memset(userInput, 0, sizeof(userInput));
 8002152:	2202      	movs	r2, #2
 8002154:	2100      	movs	r1, #0
 8002156:	4807      	ldr	r0, [pc, #28]	; (8002174 <menu_delete_FR+0xc4>)
 8002158:	f003 fb02 	bl	8005760 <memset>
        return 32; // 返回到指纹管理菜单
 800215c:	2320      	movs	r3, #32
 800215e:	e000      	b.n	8002162 <menu_delete_FR+0xb2>
    }
    return 34; // 继续当前界面
 8002160:	2322      	movs	r3, #34	; 0x22
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	08007a14 	.word	0x08007a14
 8002170:	08006c74 	.word	0x08006c74
 8002174:	200002fc 	.word	0x200002fc
 8002178:	200002a8 	.word	0x200002a8

0800217c <menu_record_FR>:

uint8_t ID_NUM = 0;
int menu_record_FR(void) {
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af02      	add	r7, sp, #8
    static char userInput[2] = {0}; // 只允许输入 1 位数字
    static uint8_t step = 0; // 0: 输入 ID, 1: 录入指纹

    ssd1306_Fill(Black);
 8002182:	2000      	movs	r0, #0
 8002184:	f000 f96a 	bl	800245c <ssd1306_Fill>

    // Step 0: 让用户输入要存储的指纹 ID
    if (step == 0) {
 8002188:	4b31      	ldr	r3, [pc, #196]	; (8002250 <menu_record_FR+0xd4>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d15a      	bne.n	8002246 <menu_record_FR+0xca>
        ssd1306_SetCursor(0, 0);
 8002190:	2100      	movs	r1, #0
 8002192:	2000      	movs	r0, #0
 8002194:	f000 faac 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString("Enter Finger ID", Font_6x8, White);
 8002198:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <menu_record_FR+0xd8>)
 800219a:	2201      	movs	r2, #1
 800219c:	9200      	str	r2, [sp, #0]
 800219e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021a0:	482d      	ldr	r0, [pc, #180]	; (8002258 <menu_record_FR+0xdc>)
 80021a2:	f000 fa7f 	bl	80026a4 <ssd1306_WriteString>
        ssd1306_SetCursor(0, 20);
 80021a6:	2114      	movs	r1, #20
 80021a8:	2000      	movs	r0, #0
 80021aa:	f000 faa1 	bl	80026f0 <ssd1306_SetCursor>
        ssd1306_WriteString(userInput, Font_6x8, White);
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <menu_record_FR+0xd8>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	9200      	str	r2, [sp, #0]
 80021b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b6:	4829      	ldr	r0, [pc, #164]	; (800225c <menu_record_FR+0xe0>)
 80021b8:	f000 fa74 	bl	80026a4 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 80021bc:	f000 f966 	bl	800248c <ssd1306_UpdateScreen>

        if (keyPressed >= '1' && keyPressed <= '9') {
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <menu_record_FR+0xe4>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b30      	cmp	r3, #48	; 0x30
 80021c6:	d90e      	bls.n	80021e6 <menu_record_FR+0x6a>
 80021c8:	4b25      	ldr	r3, [pc, #148]	; (8002260 <menu_record_FR+0xe4>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b39      	cmp	r3, #57	; 0x39
 80021ce:	d80a      	bhi.n	80021e6 <menu_record_FR+0x6a>
            userInput[0] = keyPressed; // 覆盖用户输入
 80021d0:	4b23      	ldr	r3, [pc, #140]	; (8002260 <menu_record_FR+0xe4>)
 80021d2:	781a      	ldrb	r2, [r3, #0]
 80021d4:	4b21      	ldr	r3, [pc, #132]	; (800225c <menu_record_FR+0xe0>)
 80021d6:	701a      	strb	r2, [r3, #0]
            userInput[1] = '\0'; // 确保字符串结束
 80021d8:	4b20      	ldr	r3, [pc, #128]	; (800225c <menu_record_FR+0xe0>)
 80021da:	2200      	movs	r2, #0
 80021dc:	705a      	strb	r2, [r3, #1]
            keyPressed = 0;
 80021de:	4b20      	ldr	r3, [pc, #128]	; (8002260 <menu_record_FR+0xe4>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	e02d      	b.n	8002242 <menu_record_FR+0xc6>
        }
        else if (keyPressed == 'C' && userInput[0] != '\0') { // 确认
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <menu_record_FR+0xe4>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b43      	cmp	r3, #67	; 0x43
 80021ec:	d118      	bne.n	8002220 <menu_record_FR+0xa4>
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <menu_record_FR+0xe0>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d014      	beq.n	8002220 <menu_record_FR+0xa4>
            keyPressed = 0;
 80021f6:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <menu_record_FR+0xe4>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
            ID_NUM = userInput[0] - '0'; // 转换为整数 (1-9)
 80021fc:	4b17      	ldr	r3, [pc, #92]	; (800225c <menu_record_FR+0xe0>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	3b30      	subs	r3, #48	; 0x30
 8002202:	b2da      	uxtb	r2, r3
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <menu_record_FR+0xe8>)
 8002206:	701a      	strb	r2, [r3, #0]
            Record_FR(); // 调用录入指纹函数
 8002208:	f7fe fba6 	bl	8000958 <Record_FR>
            step = 0; // 复位步骤
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <menu_record_FR+0xd4>)
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
            memset(userInput, 0, sizeof(userInput));
 8002212:	2202      	movs	r2, #2
 8002214:	2100      	movs	r1, #0
 8002216:	4811      	ldr	r0, [pc, #68]	; (800225c <menu_record_FR+0xe0>)
 8002218:	f003 faa2 	bl	8005760 <memset>
            return 32; // 返回指纹管理菜单
 800221c:	2320      	movs	r3, #32
 800221e:	e013      	b.n	8002248 <menu_record_FR+0xcc>
        }
        else if (keyPressed == 'B') { // 取消
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <menu_record_FR+0xe4>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b42      	cmp	r3, #66	; 0x42
 8002226:	d10c      	bne.n	8002242 <menu_record_FR+0xc6>
            keyPressed = 0;
 8002228:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <menu_record_FR+0xe4>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
            memset(userInput, 0, sizeof(userInput));
 800222e:	2202      	movs	r2, #2
 8002230:	2100      	movs	r1, #0
 8002232:	480a      	ldr	r0, [pc, #40]	; (800225c <menu_record_FR+0xe0>)
 8002234:	f003 fa94 	bl	8005760 <memset>
            step = 0;
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <menu_record_FR+0xd4>)
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
            return 32; // 返回指纹管理菜单
 800223e:	2320      	movs	r3, #32
 8002240:	e002      	b.n	8002248 <menu_record_FR+0xcc>
        }
        return 33; // 继续等待用户输入 ID
 8002242:	2321      	movs	r3, #33	; 0x21
 8002244:	e000      	b.n	8002248 <menu_record_FR+0xcc>
    }
    return 33;
 8002246:	2321      	movs	r3, #33	; 0x21
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200002fe 	.word	0x200002fe
 8002254:	08007a14 	.word	0x08007a14
 8002258:	08006c88 	.word	0x08006c88
 800225c:	20000300 	.word	0x20000300
 8002260:	200002a8 	.word	0x200002a8
 8002264:	200002ad 	.word	0x200002ad

08002268 <menu_modify_Facial>:

uint8_t data[1];
int menu_modify_Facial(void){
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 800226e:	2000      	movs	r0, #0
 8002270:	f000 f8f4 	bl	800245c <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8002274:	2100      	movs	r1, #0
 8002276:	2000      	movs	r0, #0
 8002278:	f000 fa3a 	bl	80026f0 <ssd1306_SetCursor>
    ssd1306_WriteString("1.Add Face", Font_6x8, White);
 800227c:	4b21      	ldr	r3, [pc, #132]	; (8002304 <menu_modify_Facial+0x9c>)
 800227e:	2201      	movs	r2, #1
 8002280:	9200      	str	r2, [sp, #0]
 8002282:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002284:	4820      	ldr	r0, [pc, #128]	; (8002308 <menu_modify_Facial+0xa0>)
 8002286:	f000 fa0d 	bl	80026a4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 20);
 800228a:	2114      	movs	r1, #20
 800228c:	2000      	movs	r0, #0
 800228e:	f000 fa2f 	bl	80026f0 <ssd1306_SetCursor>
    ssd1306_WriteString("2.Delete All Faces", Font_6x8, White);
 8002292:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <menu_modify_Facial+0x9c>)
 8002294:	2201      	movs	r2, #1
 8002296:	9200      	str	r2, [sp, #0]
 8002298:	cb0e      	ldmia	r3, {r1, r2, r3}
 800229a:	481c      	ldr	r0, [pc, #112]	; (800230c <menu_modify_Facial+0xa4>)
 800229c:	f000 fa02 	bl	80026a4 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80022a0:	f000 f8f4 	bl	800248c <ssd1306_UpdateScreen>
    if (keyPressed == 'B'){
 80022a4:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <menu_modify_Facial+0xa8>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b42      	cmp	r3, #66	; 0x42
 80022aa:	d104      	bne.n	80022b6 <menu_modify_Facial+0x4e>
    	keyPressed = 0;
 80022ac:	4b18      	ldr	r3, [pc, #96]	; (8002310 <menu_modify_Facial+0xa8>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
    	return 3;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e022      	b.n	80022fc <menu_modify_Facial+0x94>
    }
    else if (keyPressed == '1'){
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <menu_modify_Facial+0xa8>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b31      	cmp	r3, #49	; 0x31
 80022bc:	d10c      	bne.n	80022d8 <menu_modify_Facial+0x70>
    	keyPressed = 0;
 80022be:	4b14      	ldr	r3, [pc, #80]	; (8002310 <menu_modify_Facial+0xa8>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
        uint8_t data[] = {'A'};  // Create a buffer with the character 'A'
 80022c4:	2341      	movs	r3, #65	; 0x41
 80022c6:	713b      	strb	r3, [r7, #4]
    	HAL_UART_Transmit(&huart1, data ,1,100);
 80022c8:	1d39      	adds	r1, r7, #4
 80022ca:	2364      	movs	r3, #100	; 0x64
 80022cc:	2201      	movs	r2, #1
 80022ce:	4811      	ldr	r0, [pc, #68]	; (8002314 <menu_modify_Facial+0xac>)
 80022d0:	f002 fa46 	bl	8004760 <HAL_UART_Transmit>
    	return 35;
 80022d4:	2323      	movs	r3, #35	; 0x23
 80022d6:	e011      	b.n	80022fc <menu_modify_Facial+0x94>
    }
    else if (keyPressed == '2') {
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <menu_modify_Facial+0xa8>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b32      	cmp	r3, #50	; 0x32
 80022de:	d10c      	bne.n	80022fa <menu_modify_Facial+0x92>
        keyPressed = 0;
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <menu_modify_Facial+0xa8>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
        uint8_t data[] = {'D'};  // Create a buffer with the character 'D'
 80022e6:	2344      	movs	r3, #68	; 0x44
 80022e8:	703b      	strb	r3, [r7, #0]
    	HAL_UART_Transmit(&huart1,data,1,100);
 80022ea:	4639      	mov	r1, r7
 80022ec:	2364      	movs	r3, #100	; 0x64
 80022ee:	2201      	movs	r2, #1
 80022f0:	4808      	ldr	r0, [pc, #32]	; (8002314 <menu_modify_Facial+0xac>)
 80022f2:	f002 fa35 	bl	8004760 <HAL_UART_Transmit>
        return 35; // 进入删除指纹菜单
 80022f6:	2323      	movs	r3, #35	; 0x23
 80022f8:	e000      	b.n	80022fc <menu_modify_Facial+0x94>
    }
    return 35;
 80022fa:	2323      	movs	r3, #35	; 0x23
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	08007a14 	.word	0x08007a14
 8002308:	08006c98 	.word	0x08006c98
 800230c:	08006ca4 	.word	0x08006ca4
 8002310:	200002a8 	.word	0x200002a8
 8002314:	20000710 	.word	0x20000710

08002318 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af04      	add	r7, sp, #16
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800232e:	f04f 33ff 	mov.w	r3, #4294967295
 8002332:	9302      	str	r3, [sp, #8]
 8002334:	2301      	movs	r3, #1
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	1dfb      	adds	r3, r7, #7
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	2301      	movs	r3, #1
 800233e:	2200      	movs	r2, #0
 8002340:	2178      	movs	r1, #120	; 0x78
 8002342:	4803      	ldr	r0, [pc, #12]	; (8002350 <ssd1306_WriteCommand+0x2c>)
 8002344:	f001 fa44 	bl	80037d0 <HAL_I2C_Mem_Write>
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	2000023c 	.word	0x2000023c

08002354 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af04      	add	r7, sp, #16
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	b29b      	uxth	r3, r3
 8002362:	f04f 32ff 	mov.w	r2, #4294967295
 8002366:	9202      	str	r2, [sp, #8]
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	2301      	movs	r3, #1
 8002370:	2240      	movs	r2, #64	; 0x40
 8002372:	2178      	movs	r1, #120	; 0x78
 8002374:	4803      	ldr	r0, [pc, #12]	; (8002384 <ssd1306_WriteData+0x30>)
 8002376:	f001 fa2b 	bl	80037d0 <HAL_I2C_Mem_Write>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2000023c 	.word	0x2000023c

08002388 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800238c:	f7ff ffc4 	bl	8002318 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002390:	2064      	movs	r0, #100	; 0x64
 8002392:	f000 fd29 	bl	8002de8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002396:	2000      	movs	r0, #0
 8002398:	f000 f9d6 	bl	8002748 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800239c:	2020      	movs	r0, #32
 800239e:	f7ff ffc1 	bl	8002324 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7ff ffbe 	bl	8002324 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80023a8:	20b0      	movs	r0, #176	; 0xb0
 80023aa:	f7ff ffbb 	bl	8002324 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80023ae:	20c8      	movs	r0, #200	; 0xc8
 80023b0:	f7ff ffb8 	bl	8002324 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80023b4:	2000      	movs	r0, #0
 80023b6:	f7ff ffb5 	bl	8002324 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80023ba:	2010      	movs	r0, #16
 80023bc:	f7ff ffb2 	bl	8002324 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80023c0:	2040      	movs	r0, #64	; 0x40
 80023c2:	f7ff ffaf 	bl	8002324 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80023c6:	20ff      	movs	r0, #255	; 0xff
 80023c8:	f000 f9aa 	bl	8002720 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80023cc:	20a1      	movs	r0, #161	; 0xa1
 80023ce:	f7ff ffa9 	bl	8002324 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80023d2:	20a6      	movs	r0, #166	; 0xa6
 80023d4:	f7ff ffa6 	bl	8002324 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80023d8:	20a8      	movs	r0, #168	; 0xa8
 80023da:	f7ff ffa3 	bl	8002324 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80023de:	203f      	movs	r0, #63	; 0x3f
 80023e0:	f7ff ffa0 	bl	8002324 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80023e4:	20a4      	movs	r0, #164	; 0xa4
 80023e6:	f7ff ff9d 	bl	8002324 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80023ea:	20d3      	movs	r0, #211	; 0xd3
 80023ec:	f7ff ff9a 	bl	8002324 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7ff ff97 	bl	8002324 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80023f6:	20d5      	movs	r0, #213	; 0xd5
 80023f8:	f7ff ff94 	bl	8002324 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80023fc:	20f0      	movs	r0, #240	; 0xf0
 80023fe:	f7ff ff91 	bl	8002324 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002402:	20d9      	movs	r0, #217	; 0xd9
 8002404:	f7ff ff8e 	bl	8002324 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002408:	2022      	movs	r0, #34	; 0x22
 800240a:	f7ff ff8b 	bl	8002324 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800240e:	20da      	movs	r0, #218	; 0xda
 8002410:	f7ff ff88 	bl	8002324 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002414:	2012      	movs	r0, #18
 8002416:	f7ff ff85 	bl	8002324 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800241a:	20db      	movs	r0, #219	; 0xdb
 800241c:	f7ff ff82 	bl	8002324 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002420:	2020      	movs	r0, #32
 8002422:	f7ff ff7f 	bl	8002324 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002426:	208d      	movs	r0, #141	; 0x8d
 8002428:	f7ff ff7c 	bl	8002324 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800242c:	2014      	movs	r0, #20
 800242e:	f7ff ff79 	bl	8002324 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002432:	2001      	movs	r0, #1
 8002434:	f000 f988 	bl	8002748 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002438:	2000      	movs	r0, #0
 800243a:	f000 f80f 	bl	800245c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800243e:	f000 f825 	bl	800248c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002442:	4b05      	ldr	r3, [pc, #20]	; (8002458 <ssd1306_Init+0xd0>)
 8002444:	2200      	movs	r2, #0
 8002446:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <ssd1306_Init+0xd0>)
 800244a:	2200      	movs	r2, #0
 800244c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800244e:	4b02      	ldr	r3, [pc, #8]	; (8002458 <ssd1306_Init+0xd0>)
 8002450:	2201      	movs	r2, #1
 8002452:	711a      	strb	r2, [r3, #4]
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000704 	.word	0x20000704

0800245c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <ssd1306_Fill+0x14>
 800246c:	2300      	movs	r3, #0
 800246e:	e000      	b.n	8002472 <ssd1306_Fill+0x16>
 8002470:	23ff      	movs	r3, #255	; 0xff
 8002472:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002476:	4619      	mov	r1, r3
 8002478:	4803      	ldr	r0, [pc, #12]	; (8002488 <ssd1306_Fill+0x2c>)
 800247a:	f003 f971 	bl	8005760 <memset>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000304 	.word	0x20000304

0800248c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002492:	2300      	movs	r3, #0
 8002494:	71fb      	strb	r3, [r7, #7]
 8002496:	e016      	b.n	80024c6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	3b50      	subs	r3, #80	; 0x50
 800249c:	b2db      	uxtb	r3, r3
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff40 	bl	8002324 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7ff ff3d 	bl	8002324 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80024aa:	2010      	movs	r0, #16
 80024ac:	f7ff ff3a 	bl	8002324 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	01db      	lsls	r3, r3, #7
 80024b4:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <ssd1306_UpdateScreen+0x4c>)
 80024b6:	4413      	add	r3, r2
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff4a 	bl	8002354 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	3301      	adds	r3, #1
 80024c4:	71fb      	strb	r3, [r7, #7]
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	2b07      	cmp	r3, #7
 80024ca:	d9e5      	bls.n	8002498 <ssd1306_UpdateScreen+0xc>
    }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000304 	.word	0x20000304

080024dc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
 80024e6:	460b      	mov	r3, r1
 80024e8:	71bb      	strb	r3, [r7, #6]
 80024ea:	4613      	mov	r3, r2
 80024ec:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	db3d      	blt.n	8002572 <ssd1306_DrawPixel+0x96>
 80024f6:	79bb      	ldrb	r3, [r7, #6]
 80024f8:	2b3f      	cmp	r3, #63	; 0x3f
 80024fa:	d83a      	bhi.n	8002572 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80024fc:	797b      	ldrb	r3, [r7, #5]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d11a      	bne.n	8002538 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002502:	79fa      	ldrb	r2, [r7, #7]
 8002504:	79bb      	ldrb	r3, [r7, #6]
 8002506:	08db      	lsrs	r3, r3, #3
 8002508:	b2d8      	uxtb	r0, r3
 800250a:	4603      	mov	r3, r0
 800250c:	01db      	lsls	r3, r3, #7
 800250e:	4413      	add	r3, r2
 8002510:	4a1a      	ldr	r2, [pc, #104]	; (800257c <ssd1306_DrawPixel+0xa0>)
 8002512:	5cd3      	ldrb	r3, [r2, r3]
 8002514:	b25a      	sxtb	r2, r3
 8002516:	79bb      	ldrb	r3, [r7, #6]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	b25b      	sxtb	r3, r3
 8002524:	4313      	orrs	r3, r2
 8002526:	b259      	sxtb	r1, r3
 8002528:	79fa      	ldrb	r2, [r7, #7]
 800252a:	4603      	mov	r3, r0
 800252c:	01db      	lsls	r3, r3, #7
 800252e:	4413      	add	r3, r2
 8002530:	b2c9      	uxtb	r1, r1
 8002532:	4a12      	ldr	r2, [pc, #72]	; (800257c <ssd1306_DrawPixel+0xa0>)
 8002534:	54d1      	strb	r1, [r2, r3]
 8002536:	e01d      	b.n	8002574 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002538:	79fa      	ldrb	r2, [r7, #7]
 800253a:	79bb      	ldrb	r3, [r7, #6]
 800253c:	08db      	lsrs	r3, r3, #3
 800253e:	b2d8      	uxtb	r0, r3
 8002540:	4603      	mov	r3, r0
 8002542:	01db      	lsls	r3, r3, #7
 8002544:	4413      	add	r3, r2
 8002546:	4a0d      	ldr	r2, [pc, #52]	; (800257c <ssd1306_DrawPixel+0xa0>)
 8002548:	5cd3      	ldrb	r3, [r2, r3]
 800254a:	b25a      	sxtb	r2, r3
 800254c:	79bb      	ldrb	r3, [r7, #6]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	2101      	movs	r1, #1
 8002554:	fa01 f303 	lsl.w	r3, r1, r3
 8002558:	b25b      	sxtb	r3, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	b25b      	sxtb	r3, r3
 800255e:	4013      	ands	r3, r2
 8002560:	b259      	sxtb	r1, r3
 8002562:	79fa      	ldrb	r2, [r7, #7]
 8002564:	4603      	mov	r3, r0
 8002566:	01db      	lsls	r3, r3, #7
 8002568:	4413      	add	r3, r2
 800256a:	b2c9      	uxtb	r1, r1
 800256c:	4a03      	ldr	r2, [pc, #12]	; (800257c <ssd1306_DrawPixel+0xa0>)
 800256e:	54d1      	strb	r1, [r2, r3]
 8002570:	e000      	b.n	8002574 <ssd1306_DrawPixel+0x98>
        return;
 8002572:	bf00      	nop
    }
}
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	20000304 	.word	0x20000304

08002580 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	4604      	mov	r4, r0
 8002588:	4638      	mov	r0, r7
 800258a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800258e:	4623      	mov	r3, r4
 8002590:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	2b1f      	cmp	r3, #31
 8002596:	d902      	bls.n	800259e <ssd1306_WriteChar+0x1e>
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b7e      	cmp	r3, #126	; 0x7e
 800259c:	d901      	bls.n	80025a2 <ssd1306_WriteChar+0x22>
        return 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	e079      	b.n	8002696 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80025a2:	4b3f      	ldr	r3, [pc, #252]	; (80026a0 <ssd1306_WriteChar+0x120>)
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	783b      	ldrb	r3, [r7, #0]
 80025aa:	4413      	add	r3, r2
 80025ac:	2b80      	cmp	r3, #128	; 0x80
 80025ae:	dc06      	bgt.n	80025be <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80025b0:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <ssd1306_WriteChar+0x120>)
 80025b2:	885b      	ldrh	r3, [r3, #2]
 80025b4:	461a      	mov	r2, r3
 80025b6:	787b      	ldrb	r3, [r7, #1]
 80025b8:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80025ba:	2b40      	cmp	r3, #64	; 0x40
 80025bc:	dd01      	ble.n	80025c2 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	e069      	b.n	8002696 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	e04e      	b.n	8002666 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	3b20      	subs	r3, #32
 80025ce:	7879      	ldrb	r1, [r7, #1]
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4619      	mov	r1, r3
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	440b      	add	r3, r1
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	e036      	b.n	8002656 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d013      	beq.n	8002620 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80025f8:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <ssd1306_WriteChar+0x120>)
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	4413      	add	r3, r2
 8002604:	b2d8      	uxtb	r0, r3
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <ssd1306_WriteChar+0x120>)
 8002608:	885b      	ldrh	r3, [r3, #2]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	b2db      	uxtb	r3, r3
 8002610:	4413      	add	r3, r2
 8002612:	b2db      	uxtb	r3, r3
 8002614:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002618:	4619      	mov	r1, r3
 800261a:	f7ff ff5f 	bl	80024dc <ssd1306_DrawPixel>
 800261e:	e017      	b.n	8002650 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002620:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <ssd1306_WriteChar+0x120>)
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b2da      	uxtb	r2, r3
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	4413      	add	r3, r2
 800262c:	b2d8      	uxtb	r0, r3
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <ssd1306_WriteChar+0x120>)
 8002630:	885b      	ldrh	r3, [r3, #2]
 8002632:	b2da      	uxtb	r2, r3
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	4413      	add	r3, r2
 800263a:	b2d9      	uxtb	r1, r3
 800263c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	f7ff ff46 	bl	80024dc <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	3301      	adds	r3, #1
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	783b      	ldrb	r3, [r7, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	4293      	cmp	r3, r2
 800265e:	d3c3      	bcc.n	80025e8 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	3301      	adds	r3, #1
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	787b      	ldrb	r3, [r7, #1]
 8002668:	461a      	mov	r2, r3
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4293      	cmp	r3, r2
 800266e:	d3ab      	bcc.n	80025c8 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <ssd1306_WriteChar+0x120>)
 8002672:	881a      	ldrh	r2, [r3, #0]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d006      	beq.n	8002688 <ssd1306_WriteChar+0x108>
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	3b20      	subs	r3, #32
 8002680:	440b      	add	r3, r1
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	e001      	b.n	800268c <ssd1306_WriteChar+0x10c>
 8002688:	783b      	ldrb	r3, [r7, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	4413      	add	r3, r2
 800268e:	b29a      	uxth	r2, r3
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <ssd1306_WriteChar+0x120>)
 8002692:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3724      	adds	r7, #36	; 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd90      	pop	{r4, r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000704 	.word	0x20000704

080026a4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	4638      	mov	r0, r7
 80026ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80026b2:	e013      	b.n	80026dc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	7818      	ldrb	r0, [r3, #0]
 80026b8:	7e3b      	ldrb	r3, [r7, #24]
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	463b      	mov	r3, r7
 80026be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026c0:	f7ff ff5e 	bl	8002580 <ssd1306_WriteChar>
 80026c4:	4603      	mov	r3, r0
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d002      	beq.n	80026d6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	e008      	b.n	80026e8 <ssd1306_WriteString+0x44>
        }
        str++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3301      	adds	r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1e7      	bne.n	80026b4 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	781b      	ldrb	r3, [r3, #0]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	460a      	mov	r2, r1
 80026fa:	71fb      	strb	r3, [r7, #7]
 80026fc:	4613      	mov	r3, r2
 80026fe:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	b29a      	uxth	r2, r3
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <ssd1306_SetCursor+0x2c>)
 8002706:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002708:	79bb      	ldrb	r3, [r7, #6]
 800270a:	b29a      	uxth	r2, r3
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <ssd1306_SetCursor+0x2c>)
 800270e:	805a      	strh	r2, [r3, #2]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000704 	.word	0x20000704

08002720 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800272a:	2381      	movs	r3, #129	; 0x81
 800272c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fdf7 	bl	8002324 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fdf3 	bl	8002324 <ssd1306_WriteCommand>
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002758:	23af      	movs	r3, #175	; 0xaf
 800275a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <ssd1306_SetDisplayOn+0x38>)
 800275e:	2201      	movs	r2, #1
 8002760:	715a      	strb	r2, [r3, #5]
 8002762:	e004      	b.n	800276e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002764:	23ae      	movs	r3, #174	; 0xae
 8002766:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <ssd1306_SetDisplayOn+0x38>)
 800276a:	2200      	movs	r2, #0
 800276c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fdd7 	bl	8002324 <ssd1306_WriteCommand>
}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000704 	.word	0x20000704

08002784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_MspInit+0x5c>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <HAL_MspInit+0x5c>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6193      	str	r3, [r2, #24]
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_MspInit+0x5c>)
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_MspInit+0x5c>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	4a0e      	ldr	r2, [pc, #56]	; (80027e0 <HAL_MspInit+0x5c>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ac:	61d3      	str	r3, [r2, #28]
 80027ae:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <HAL_MspInit+0x5c>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_MspInit+0x60>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <HAL_MspInit+0x60>)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40010000 	.word	0x40010000

080027e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027ec:	e7fe      	b.n	80027ec <NMI_Handler+0x4>

080027ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <HardFault_Handler+0x4>

080027f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <MemManage_Handler+0x4>

080027fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027fe:	e7fe      	b.n	80027fe <BusFault_Handler+0x4>

08002800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002804:	e7fe      	b.n	8002804 <UsageFault_Handler+0x4>

08002806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800282e:	f000 fabf 	bl	8002db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}

08002836 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800283a:	2010      	movs	r0, #16
 800283c:	f000 fe6c 	bl	8003518 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}

08002844 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002848:	2020      	movs	r0, #32
 800284a:	f000 fe65 	bl	8003518 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800284e:	2040      	movs	r0, #64	; 0x40
 8002850:	f000 fe62 	bl	8003518 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002854:	2080      	movs	r0, #128	; 0x80
 8002856:	f000 fe5f 	bl	8003518 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <USART1_IRQHandler+0x10>)
 8002866:	f002 f82b 	bl	80048c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000710 	.word	0x20000710

08002874 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <USART2_IRQHandler+0x10>)
 800287a:	f002 f821 	bl	80048c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000758 	.word	0x20000758

08002888 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800288e:	4811      	ldr	r0, [pc, #68]	; (80028d4 <USART3_IRQHandler+0x4c>)
 8002890:	f002 f816 	bl	80048c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  	if(__HAL_UART_GET_FLAG(&AS608_UART,UART_FLAG_IDLE) != RESET)
 8002894:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <USART3_IRQHandler+0x4c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b10      	cmp	r3, #16
 80028a0:	d115      	bne.n	80028ce <USART3_IRQHandler+0x46>
  	{
  		__HAL_UART_CLEAR_IDLEFLAG(&AS608_UART);
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <USART3_IRQHandler+0x4c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <USART3_IRQHandler+0x4c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
  		AS608_UART.RxXferCount = sizeof(USART3_RX_BUF);
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <USART3_IRQHandler+0x4c>)
 80028ba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80028be:	85da      	strh	r2, [r3, #46]	; 0x2e
  		AS608_UART.pRxBuffPtr = USART3_RX_BUF;
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <USART3_IRQHandler+0x4c>)
 80028c2:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <USART3_IRQHandler+0x50>)
 80028c4:	629a      	str	r2, [r3, #40]	; 0x28
  		USART3_RX_STA = 1;//接收数据完成
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <USART3_IRQHandler+0x54>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
  		return ;
 80028cc:	bf00      	nop
  		}
  /* USER CODE END USART3_IRQn 1 */
}
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	200007a0 	.word	0x200007a0
 80028d8:	200000a8 	.word	0x200000a8
 80028dc:	20000238 	.word	0x20000238

080028e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	e00a      	b.n	8002908 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028f2:	f3af 8000 	nop.w
 80028f6:	4601      	mov	r1, r0
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	60ba      	str	r2, [r7, #8]
 80028fe:	b2ca      	uxtb	r2, r1
 8002900:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3301      	adds	r3, #1
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	429a      	cmp	r2, r3
 800290e:	dbf0      	blt.n	80028f2 <_read+0x12>
  }

  return len;
 8002910:	687b      	ldr	r3, [r7, #4]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e009      	b.n	8002940 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	60ba      	str	r2, [r7, #8]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3301      	adds	r3, #1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	dbf1      	blt.n	800292c <_write+0x12>
  }
  return len;
 8002948:	687b      	ldr	r3, [r7, #4]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <_close>:
//    return len;
//}


int _close(int file)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800295a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002978:	605a      	str	r2, [r3, #4]
  return 0;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <_isatty>:

int _isatty(int file)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800298e:	2301      	movs	r3, #1
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800299a:	b480      	push	{r7}
 800299c:	b085      	sub	sp, #20
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
	...

080029b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029bc:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <_sbrk+0x5c>)
 80029be:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <_sbrk+0x60>)
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <_sbrk+0x64>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d102      	bne.n	80029d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <_sbrk+0x64>)
 80029d2:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <_sbrk+0x68>)
 80029d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <_sbrk+0x64>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d207      	bcs.n	80029f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029e4:	f002 ff34 	bl	8005850 <__errno>
 80029e8:	4603      	mov	r3, r0
 80029ea:	220c      	movs	r2, #12
 80029ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ee:	f04f 33ff 	mov.w	r3, #4294967295
 80029f2:	e009      	b.n	8002a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <_sbrk+0x64>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029fa:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <_sbrk+0x64>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <_sbrk+0x64>)
 8002a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a06:	68fb      	ldr	r3, [r7, #12]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20005000 	.word	0x20005000
 8002a14:	00000400 	.word	0x00000400
 8002a18:	2000070c 	.word	0x2000070c
 8002a1c:	20000938 	.word	0x20000938

08002a20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a32:	4a12      	ldr	r2, [pc, #72]	; (8002a7c <MX_USART1_UART_Init+0x50>)
 8002a34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a52:	220c      	movs	r2, #12
 8002a54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a56:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a62:	4805      	ldr	r0, [pc, #20]	; (8002a78 <MX_USART1_UART_Init+0x4c>)
 8002a64:	f001 fe2c 	bl	80046c0 <HAL_UART_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a6e:	f7fe fdff 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000710 	.word	0x20000710
 8002a7c:	40013800 	.word	0x40013800

08002a80 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <MX_USART2_UART_Init+0x4c>)
 8002a86:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <MX_USART2_UART_Init+0x50>)
 8002a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <MX_USART2_UART_Init+0x4c>)
 8002a8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a92:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <MX_USART2_UART_Init+0x4c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a98:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <MX_USART2_UART_Init+0x4c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <MX_USART2_UART_Init+0x4c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <MX_USART2_UART_Init+0x4c>)
 8002aa6:	220c      	movs	r2, #12
 8002aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <MX_USART2_UART_Init+0x4c>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <MX_USART2_UART_Init+0x4c>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ab6:	4805      	ldr	r0, [pc, #20]	; (8002acc <MX_USART2_UART_Init+0x4c>)
 8002ab8:	f001 fe02 	bl	80046c0 <HAL_UART_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ac2:	f7fe fdd5 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000758 	.word	0x20000758
 8002ad0:	40004400 	.word	0x40004400

08002ad4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ad8:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <MX_USART3_UART_Init+0x4c>)
 8002ada:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <MX_USART3_UART_Init+0x50>)
 8002adc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <MX_USART3_UART_Init+0x4c>)
 8002ae0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002ae4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <MX_USART3_UART_Init+0x4c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <MX_USART3_UART_Init+0x4c>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <MX_USART3_UART_Init+0x4c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <MX_USART3_UART_Init+0x4c>)
 8002afa:	220c      	movs	r2, #12
 8002afc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <MX_USART3_UART_Init+0x4c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <MX_USART3_UART_Init+0x4c>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b0a:	4805      	ldr	r0, [pc, #20]	; (8002b20 <MX_USART3_UART_Init+0x4c>)
 8002b0c:	f001 fdd8 	bl	80046c0 <HAL_UART_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b16:	f7fe fdab 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200007a0 	.word	0x200007a0
 8002b24:	40004800 	.word	0x40004800

08002b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08c      	sub	sp, #48	; 0x30
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 0320 	add.w	r3, r7, #32
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a5f      	ldr	r2, [pc, #380]	; (8002cc0 <HAL_UART_MspInit+0x198>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d13a      	bne.n	8002bbe <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b48:	4b5e      	ldr	r3, [pc, #376]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	4a5d      	ldr	r2, [pc, #372]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002b4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b52:	6193      	str	r3, [r2, #24]
 8002b54:	4b5b      	ldr	r3, [pc, #364]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b60:	4b58      	ldr	r3, [pc, #352]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	4a57      	ldr	r2, [pc, #348]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002b66:	f043 0304 	orr.w	r3, r3, #4
 8002b6a:	6193      	str	r3, [r2, #24]
 8002b6c:	4b55      	ldr	r3, [pc, #340]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b82:	2303      	movs	r3, #3
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b86:	f107 0320 	add.w	r3, r7, #32
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	484e      	ldr	r0, [pc, #312]	; (8002cc8 <HAL_UART_MspInit+0x1a0>)
 8002b8e:	f000 fb0f 	bl	80031b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba0:	f107 0320 	add.w	r3, r7, #32
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4848      	ldr	r0, [pc, #288]	; (8002cc8 <HAL_UART_MspInit+0x1a0>)
 8002ba8:	f000 fb02 	bl	80031b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bac:	2200      	movs	r2, #0
 8002bae:	2100      	movs	r1, #0
 8002bb0:	2025      	movs	r0, #37	; 0x25
 8002bb2:	f000 fa14 	bl	8002fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bb6:	2025      	movs	r0, #37	; 0x25
 8002bb8:	f000 fa2d 	bl	8003016 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002bbc:	e07c      	b.n	8002cb8 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a42      	ldr	r2, [pc, #264]	; (8002ccc <HAL_UART_MspInit+0x1a4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d138      	bne.n	8002c3a <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bc8:	4b3e      	ldr	r3, [pc, #248]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	4a3d      	ldr	r2, [pc, #244]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd2:	61d3      	str	r3, [r2, #28]
 8002bd4:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be0:	4b38      	ldr	r3, [pc, #224]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	4a37      	ldr	r2, [pc, #220]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002be6:	f043 0304 	orr.w	r3, r3, #4
 8002bea:	6193      	str	r3, [r2, #24]
 8002bec:	4b35      	ldr	r3, [pc, #212]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c00:	2303      	movs	r3, #3
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c04:	f107 0320 	add.w	r3, r7, #32
 8002c08:	4619      	mov	r1, r3
 8002c0a:	482f      	ldr	r0, [pc, #188]	; (8002cc8 <HAL_UART_MspInit+0x1a0>)
 8002c0c:	f000 fad0 	bl	80031b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c10:	2308      	movs	r3, #8
 8002c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1c:	f107 0320 	add.w	r3, r7, #32
 8002c20:	4619      	mov	r1, r3
 8002c22:	4829      	ldr	r0, [pc, #164]	; (8002cc8 <HAL_UART_MspInit+0x1a0>)
 8002c24:	f000 fac4 	bl	80031b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	210f      	movs	r1, #15
 8002c2c:	2026      	movs	r0, #38	; 0x26
 8002c2e:	f000 f9d6 	bl	8002fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c32:	2026      	movs	r0, #38	; 0x26
 8002c34:	f000 f9ef 	bl	8003016 <HAL_NVIC_EnableIRQ>
}
 8002c38:	e03e      	b.n	8002cb8 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART3)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a24      	ldr	r2, [pc, #144]	; (8002cd0 <HAL_UART_MspInit+0x1a8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d139      	bne.n	8002cb8 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c44:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	4a1e      	ldr	r2, [pc, #120]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4e:	61d3      	str	r3, [r2, #28]
 8002c50:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	4a18      	ldr	r2, [pc, #96]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002c62:	f043 0308 	orr.w	r3, r3, #8
 8002c66:	6193      	str	r3, [r2, #24]
 8002c68:	4b16      	ldr	r3, [pc, #88]	; (8002cc4 <HAL_UART_MspInit+0x19c>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c82:	f107 0320 	add.w	r3, r7, #32
 8002c86:	4619      	mov	r1, r3
 8002c88:	4812      	ldr	r0, [pc, #72]	; (8002cd4 <HAL_UART_MspInit+0x1ac>)
 8002c8a:	f000 fa91 	bl	80031b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c94:	2300      	movs	r3, #0
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c9c:	f107 0320 	add.w	r3, r7, #32
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	480c      	ldr	r0, [pc, #48]	; (8002cd4 <HAL_UART_MspInit+0x1ac>)
 8002ca4:	f000 fa84 	bl	80031b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2100      	movs	r1, #0
 8002cac:	2027      	movs	r0, #39	; 0x27
 8002cae:	f000 f996 	bl	8002fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002cb2:	2027      	movs	r0, #39	; 0x27
 8002cb4:	f000 f9af 	bl	8003016 <HAL_NVIC_EnableIRQ>
}
 8002cb8:	bf00      	nop
 8002cba:	3730      	adds	r7, #48	; 0x30
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40013800 	.word	0x40013800
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40010800 	.word	0x40010800
 8002ccc:	40004400 	.word	0x40004400
 8002cd0:	40004800 	.word	0x40004800
 8002cd4:	40010c00 	.word	0x40010c00

08002cd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cd8:	f7ff fea2 	bl	8002a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cdc:	480b      	ldr	r0, [pc, #44]	; (8002d0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002cde:	490c      	ldr	r1, [pc, #48]	; (8002d10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ce0:	4a0c      	ldr	r2, [pc, #48]	; (8002d14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ce4:	e002      	b.n	8002cec <LoopCopyDataInit>

08002ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cea:	3304      	adds	r3, #4

08002cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cf0:	d3f9      	bcc.n	8002ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cf2:	4a09      	ldr	r2, [pc, #36]	; (8002d18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002cf4:	4c09      	ldr	r4, [pc, #36]	; (8002d1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cf8:	e001      	b.n	8002cfe <LoopFillZerobss>

08002cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cfc:	3204      	adds	r2, #4

08002cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d00:	d3fb      	bcc.n	8002cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d02:	f002 fdab 	bl	800585c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d06:	f7fe f9f3 	bl	80010f0 <main>
  bx lr
 8002d0a:	4770      	bx	lr
  ldr r0, =_sdata
 8002d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d10:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002d14:	08007a94 	.word	0x08007a94
  ldr r2, =_sbss
 8002d18:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002d1c:	20000938 	.word	0x20000938

08002d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d20:	e7fe      	b.n	8002d20 <ADC1_2_IRQHandler>
	...

08002d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d28:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <HAL_Init+0x28>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a07      	ldr	r2, [pc, #28]	; (8002d4c <HAL_Init+0x28>)
 8002d2e:	f043 0310 	orr.w	r3, r3, #16
 8002d32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d34:	2003      	movs	r0, #3
 8002d36:	f000 f947 	bl	8002fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d3a:	200e      	movs	r0, #14
 8002d3c:	f000 f808 	bl	8002d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d40:	f7ff fd20 	bl	8002784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40022000 	.word	0x40022000

08002d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_InitTick+0x54>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_InitTick+0x58>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	4619      	mov	r1, r3
 8002d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f95f 	bl	8003032 <HAL_SYSTICK_Config>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e00e      	b.n	8002d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b0f      	cmp	r3, #15
 8002d82:	d80a      	bhi.n	8002d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d84:	2200      	movs	r2, #0
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8c:	f000 f927 	bl	8002fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d90:	4a06      	ldr	r2, [pc, #24]	; (8002dac <HAL_InitTick+0x5c>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e000      	b.n	8002d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20000024 	.word	0x20000024
 8002da8:	2000002c 	.word	0x2000002c
 8002dac:	20000028 	.word	0x20000028

08002db0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_IncTick+0x1c>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_IncTick+0x20>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	4a03      	ldr	r2, [pc, #12]	; (8002dd0 <HAL_IncTick+0x20>)
 8002dc2:	6013      	str	r3, [r2, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	2000002c 	.word	0x2000002c
 8002dd0:	200007e8 	.word	0x200007e8

08002dd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd8:	4b02      	ldr	r3, [pc, #8]	; (8002de4 <HAL_GetTick+0x10>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	200007e8 	.word	0x200007e8

08002de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002df0:	f7ff fff0 	bl	8002dd4 <HAL_GetTick>
 8002df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d005      	beq.n	8002e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <HAL_Delay+0x44>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e0e:	bf00      	nop
 8002e10:	f7ff ffe0 	bl	8002dd4 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d8f7      	bhi.n	8002e10 <HAL_Delay+0x28>
  {
  }
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	2000002c 	.word	0x2000002c

08002e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e62:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	60d3      	str	r3, [r2, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <__NVIC_GetPriorityGrouping+0x18>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	f003 0307 	and.w	r3, r3, #7
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	db0b      	blt.n	8002ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	4906      	ldr	r1, [pc, #24]	; (8002ec8 <__NVIC_EnableIRQ+0x34>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	e000e100 	.word	0xe000e100

08002ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	6039      	str	r1, [r7, #0]
 8002ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	db0a      	blt.n	8002ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	490c      	ldr	r1, [pc, #48]	; (8002f18 <__NVIC_SetPriority+0x4c>)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	0112      	lsls	r2, r2, #4
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	440b      	add	r3, r1
 8002ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef4:	e00a      	b.n	8002f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4908      	ldr	r1, [pc, #32]	; (8002f1c <__NVIC_SetPriority+0x50>)
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	3b04      	subs	r3, #4
 8002f04:	0112      	lsls	r2, r2, #4
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	440b      	add	r3, r1
 8002f0a:	761a      	strb	r2, [r3, #24]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	e000e100 	.word	0xe000e100
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b089      	sub	sp, #36	; 0x24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f1c3 0307 	rsb	r3, r3, #7
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	bf28      	it	cs
 8002f3e:	2304      	movcs	r3, #4
 8002f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3304      	adds	r3, #4
 8002f46:	2b06      	cmp	r3, #6
 8002f48:	d902      	bls.n	8002f50 <NVIC_EncodePriority+0x30>
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3b03      	subs	r3, #3
 8002f4e:	e000      	b.n	8002f52 <NVIC_EncodePriority+0x32>
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f54:	f04f 32ff 	mov.w	r2, #4294967295
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	401a      	ands	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f68:	f04f 31ff 	mov.w	r1, #4294967295
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	43d9      	mvns	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	4313      	orrs	r3, r2
         );
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3724      	adds	r7, #36	; 0x24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f94:	d301      	bcc.n	8002f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00f      	b.n	8002fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <SysTick_Config+0x40>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fa2:	210f      	movs	r1, #15
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa8:	f7ff ff90 	bl	8002ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <SysTick_Config+0x40>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fb2:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <SysTick_Config+0x40>)
 8002fb4:	2207      	movs	r2, #7
 8002fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	e000e010 	.word	0xe000e010

08002fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff2d 	bl	8002e30 <__NVIC_SetPriorityGrouping>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff0:	f7ff ff42 	bl	8002e78 <__NVIC_GetPriorityGrouping>
 8002ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	6978      	ldr	r0, [r7, #20]
 8002ffc:	f7ff ff90 	bl	8002f20 <NVIC_EncodePriority>
 8003000:	4602      	mov	r2, r0
 8003002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff5f 	bl	8002ecc <__NVIC_SetPriority>
}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	4603      	mov	r3, r0
 800301e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff35 	bl	8002e94 <__NVIC_EnableIRQ>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff ffa2 	bl	8002f84 <SysTick_Config>
 8003040:	4603      	mov	r3, r0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800304a:	b480      	push	{r7}
 800304c:	b085      	sub	sp, #20
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d008      	beq.n	8003074 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2204      	movs	r2, #4
 8003066:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e020      	b.n	80030b6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 020e 	bic.w	r2, r2, #14
 8003082:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309c:	2101      	movs	r1, #1
 800309e:	fa01 f202 	lsl.w	r2, r1, r2
 80030a2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d005      	beq.n	80030e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2204      	movs	r2, #4
 80030dc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
 80030e2:	e051      	b.n	8003188 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 020e 	bic.w	r2, r2, #14
 80030f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a22      	ldr	r2, [pc, #136]	; (8003194 <HAL_DMA_Abort_IT+0xd4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d029      	beq.n	8003162 <HAL_DMA_Abort_IT+0xa2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a21      	ldr	r2, [pc, #132]	; (8003198 <HAL_DMA_Abort_IT+0xd8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d022      	beq.n	800315e <HAL_DMA_Abort_IT+0x9e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1f      	ldr	r2, [pc, #124]	; (800319c <HAL_DMA_Abort_IT+0xdc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d01a      	beq.n	8003158 <HAL_DMA_Abort_IT+0x98>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1e      	ldr	r2, [pc, #120]	; (80031a0 <HAL_DMA_Abort_IT+0xe0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d012      	beq.n	8003152 <HAL_DMA_Abort_IT+0x92>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1c      	ldr	r2, [pc, #112]	; (80031a4 <HAL_DMA_Abort_IT+0xe4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00a      	beq.n	800314c <HAL_DMA_Abort_IT+0x8c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1b      	ldr	r2, [pc, #108]	; (80031a8 <HAL_DMA_Abort_IT+0xe8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d102      	bne.n	8003146 <HAL_DMA_Abort_IT+0x86>
 8003140:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003144:	e00e      	b.n	8003164 <HAL_DMA_Abort_IT+0xa4>
 8003146:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800314a:	e00b      	b.n	8003164 <HAL_DMA_Abort_IT+0xa4>
 800314c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003150:	e008      	b.n	8003164 <HAL_DMA_Abort_IT+0xa4>
 8003152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003156:	e005      	b.n	8003164 <HAL_DMA_Abort_IT+0xa4>
 8003158:	f44f 7380 	mov.w	r3, #256	; 0x100
 800315c:	e002      	b.n	8003164 <HAL_DMA_Abort_IT+0xa4>
 800315e:	2310      	movs	r3, #16
 8003160:	e000      	b.n	8003164 <HAL_DMA_Abort_IT+0xa4>
 8003162:	2301      	movs	r3, #1
 8003164:	4a11      	ldr	r2, [pc, #68]	; (80031ac <HAL_DMA_Abort_IT+0xec>)
 8003166:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	4798      	blx	r3
    } 
  }
  return status;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40020008 	.word	0x40020008
 8003198:	4002001c 	.word	0x4002001c
 800319c:	40020030 	.word	0x40020030
 80031a0:	40020044 	.word	0x40020044
 80031a4:	40020058 	.word	0x40020058
 80031a8:	4002006c 	.word	0x4002006c
 80031ac:	40020000 	.word	0x40020000

080031b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b08b      	sub	sp, #44	; 0x2c
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031ba:	2300      	movs	r3, #0
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031be:	2300      	movs	r3, #0
 80031c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031c2:	e169      	b.n	8003498 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031c4:	2201      	movs	r2, #1
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	429a      	cmp	r2, r3
 80031de:	f040 8158 	bne.w	8003492 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4a9a      	ldr	r2, [pc, #616]	; (8003450 <HAL_GPIO_Init+0x2a0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d05e      	beq.n	80032aa <HAL_GPIO_Init+0xfa>
 80031ec:	4a98      	ldr	r2, [pc, #608]	; (8003450 <HAL_GPIO_Init+0x2a0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d875      	bhi.n	80032de <HAL_GPIO_Init+0x12e>
 80031f2:	4a98      	ldr	r2, [pc, #608]	; (8003454 <HAL_GPIO_Init+0x2a4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d058      	beq.n	80032aa <HAL_GPIO_Init+0xfa>
 80031f8:	4a96      	ldr	r2, [pc, #600]	; (8003454 <HAL_GPIO_Init+0x2a4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d86f      	bhi.n	80032de <HAL_GPIO_Init+0x12e>
 80031fe:	4a96      	ldr	r2, [pc, #600]	; (8003458 <HAL_GPIO_Init+0x2a8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d052      	beq.n	80032aa <HAL_GPIO_Init+0xfa>
 8003204:	4a94      	ldr	r2, [pc, #592]	; (8003458 <HAL_GPIO_Init+0x2a8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d869      	bhi.n	80032de <HAL_GPIO_Init+0x12e>
 800320a:	4a94      	ldr	r2, [pc, #592]	; (800345c <HAL_GPIO_Init+0x2ac>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d04c      	beq.n	80032aa <HAL_GPIO_Init+0xfa>
 8003210:	4a92      	ldr	r2, [pc, #584]	; (800345c <HAL_GPIO_Init+0x2ac>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d863      	bhi.n	80032de <HAL_GPIO_Init+0x12e>
 8003216:	4a92      	ldr	r2, [pc, #584]	; (8003460 <HAL_GPIO_Init+0x2b0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d046      	beq.n	80032aa <HAL_GPIO_Init+0xfa>
 800321c:	4a90      	ldr	r2, [pc, #576]	; (8003460 <HAL_GPIO_Init+0x2b0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d85d      	bhi.n	80032de <HAL_GPIO_Init+0x12e>
 8003222:	2b12      	cmp	r3, #18
 8003224:	d82a      	bhi.n	800327c <HAL_GPIO_Init+0xcc>
 8003226:	2b12      	cmp	r3, #18
 8003228:	d859      	bhi.n	80032de <HAL_GPIO_Init+0x12e>
 800322a:	a201      	add	r2, pc, #4	; (adr r2, 8003230 <HAL_GPIO_Init+0x80>)
 800322c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003230:	080032ab 	.word	0x080032ab
 8003234:	08003285 	.word	0x08003285
 8003238:	08003297 	.word	0x08003297
 800323c:	080032d9 	.word	0x080032d9
 8003240:	080032df 	.word	0x080032df
 8003244:	080032df 	.word	0x080032df
 8003248:	080032df 	.word	0x080032df
 800324c:	080032df 	.word	0x080032df
 8003250:	080032df 	.word	0x080032df
 8003254:	080032df 	.word	0x080032df
 8003258:	080032df 	.word	0x080032df
 800325c:	080032df 	.word	0x080032df
 8003260:	080032df 	.word	0x080032df
 8003264:	080032df 	.word	0x080032df
 8003268:	080032df 	.word	0x080032df
 800326c:	080032df 	.word	0x080032df
 8003270:	080032df 	.word	0x080032df
 8003274:	0800328d 	.word	0x0800328d
 8003278:	080032a1 	.word	0x080032a1
 800327c:	4a79      	ldr	r2, [pc, #484]	; (8003464 <HAL_GPIO_Init+0x2b4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003282:	e02c      	b.n	80032de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	623b      	str	r3, [r7, #32]
          break;
 800328a:	e029      	b.n	80032e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	3304      	adds	r3, #4
 8003292:	623b      	str	r3, [r7, #32]
          break;
 8003294:	e024      	b.n	80032e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	3308      	adds	r3, #8
 800329c:	623b      	str	r3, [r7, #32]
          break;
 800329e:	e01f      	b.n	80032e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	330c      	adds	r3, #12
 80032a6:	623b      	str	r3, [r7, #32]
          break;
 80032a8:	e01a      	b.n	80032e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d102      	bne.n	80032b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032b2:	2304      	movs	r3, #4
 80032b4:	623b      	str	r3, [r7, #32]
          break;
 80032b6:	e013      	b.n	80032e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d105      	bne.n	80032cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032c0:	2308      	movs	r3, #8
 80032c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	611a      	str	r2, [r3, #16]
          break;
 80032ca:	e009      	b.n	80032e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032cc:	2308      	movs	r3, #8
 80032ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	615a      	str	r2, [r3, #20]
          break;
 80032d6:	e003      	b.n	80032e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032d8:	2300      	movs	r3, #0
 80032da:	623b      	str	r3, [r7, #32]
          break;
 80032dc:	e000      	b.n	80032e0 <HAL_GPIO_Init+0x130>
          break;
 80032de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2bff      	cmp	r3, #255	; 0xff
 80032e4:	d801      	bhi.n	80032ea <HAL_GPIO_Init+0x13a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	e001      	b.n	80032ee <HAL_GPIO_Init+0x13e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3304      	adds	r3, #4
 80032ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2bff      	cmp	r3, #255	; 0xff
 80032f4:	d802      	bhi.n	80032fc <HAL_GPIO_Init+0x14c>
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	e002      	b.n	8003302 <HAL_GPIO_Init+0x152>
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	3b08      	subs	r3, #8
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	210f      	movs	r1, #15
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	fa01 f303 	lsl.w	r3, r1, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	401a      	ands	r2, r3
 8003314:	6a39      	ldr	r1, [r7, #32]
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	fa01 f303 	lsl.w	r3, r1, r3
 800331c:	431a      	orrs	r2, r3
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 80b1 	beq.w	8003492 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003330:	4b4d      	ldr	r3, [pc, #308]	; (8003468 <HAL_GPIO_Init+0x2b8>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	4a4c      	ldr	r2, [pc, #304]	; (8003468 <HAL_GPIO_Init+0x2b8>)
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	6193      	str	r3, [r2, #24]
 800333c:	4b4a      	ldr	r3, [pc, #296]	; (8003468 <HAL_GPIO_Init+0x2b8>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003348:	4a48      	ldr	r2, [pc, #288]	; (800346c <HAL_GPIO_Init+0x2bc>)
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	3302      	adds	r3, #2
 8003350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003354:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	220f      	movs	r2, #15
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4013      	ands	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a40      	ldr	r2, [pc, #256]	; (8003470 <HAL_GPIO_Init+0x2c0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d013      	beq.n	800339c <HAL_GPIO_Init+0x1ec>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a3f      	ldr	r2, [pc, #252]	; (8003474 <HAL_GPIO_Init+0x2c4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00d      	beq.n	8003398 <HAL_GPIO_Init+0x1e8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a3e      	ldr	r2, [pc, #248]	; (8003478 <HAL_GPIO_Init+0x2c8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d007      	beq.n	8003394 <HAL_GPIO_Init+0x1e4>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3d      	ldr	r2, [pc, #244]	; (800347c <HAL_GPIO_Init+0x2cc>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d101      	bne.n	8003390 <HAL_GPIO_Init+0x1e0>
 800338c:	2303      	movs	r3, #3
 800338e:	e006      	b.n	800339e <HAL_GPIO_Init+0x1ee>
 8003390:	2304      	movs	r3, #4
 8003392:	e004      	b.n	800339e <HAL_GPIO_Init+0x1ee>
 8003394:	2302      	movs	r3, #2
 8003396:	e002      	b.n	800339e <HAL_GPIO_Init+0x1ee>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <HAL_GPIO_Init+0x1ee>
 800339c:	2300      	movs	r3, #0
 800339e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a0:	f002 0203 	and.w	r2, r2, #3
 80033a4:	0092      	lsls	r2, r2, #2
 80033a6:	4093      	lsls	r3, r2
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033ae:	492f      	ldr	r1, [pc, #188]	; (800346c <HAL_GPIO_Init+0x2bc>)
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	3302      	adds	r3, #2
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d006      	beq.n	80033d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033c8:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <HAL_GPIO_Init+0x2d0>)
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	492c      	ldr	r1, [pc, #176]	; (8003480 <HAL_GPIO_Init+0x2d0>)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	608b      	str	r3, [r1, #8]
 80033d4:	e006      	b.n	80033e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033d6:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <HAL_GPIO_Init+0x2d0>)
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	43db      	mvns	r3, r3
 80033de:	4928      	ldr	r1, [pc, #160]	; (8003480 <HAL_GPIO_Init+0x2d0>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d006      	beq.n	80033fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033f0:	4b23      	ldr	r3, [pc, #140]	; (8003480 <HAL_GPIO_Init+0x2d0>)
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	4922      	ldr	r1, [pc, #136]	; (8003480 <HAL_GPIO_Init+0x2d0>)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60cb      	str	r3, [r1, #12]
 80033fc:	e006      	b.n	800340c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033fe:	4b20      	ldr	r3, [pc, #128]	; (8003480 <HAL_GPIO_Init+0x2d0>)
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	43db      	mvns	r3, r3
 8003406:	491e      	ldr	r1, [pc, #120]	; (8003480 <HAL_GPIO_Init+0x2d0>)
 8003408:	4013      	ands	r3, r2
 800340a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d006      	beq.n	8003426 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <HAL_GPIO_Init+0x2d0>)
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	4918      	ldr	r1, [pc, #96]	; (8003480 <HAL_GPIO_Init+0x2d0>)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]
 8003424:	e006      	b.n	8003434 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003426:	4b16      	ldr	r3, [pc, #88]	; (8003480 <HAL_GPIO_Init+0x2d0>)
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	43db      	mvns	r3, r3
 800342e:	4914      	ldr	r1, [pc, #80]	; (8003480 <HAL_GPIO_Init+0x2d0>)
 8003430:	4013      	ands	r3, r2
 8003432:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d021      	beq.n	8003484 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003440:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <HAL_GPIO_Init+0x2d0>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	490e      	ldr	r1, [pc, #56]	; (8003480 <HAL_GPIO_Init+0x2d0>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]
 800344c:	e021      	b.n	8003492 <HAL_GPIO_Init+0x2e2>
 800344e:	bf00      	nop
 8003450:	10320000 	.word	0x10320000
 8003454:	10310000 	.word	0x10310000
 8003458:	10220000 	.word	0x10220000
 800345c:	10210000 	.word	0x10210000
 8003460:	10120000 	.word	0x10120000
 8003464:	10110000 	.word	0x10110000
 8003468:	40021000 	.word	0x40021000
 800346c:	40010000 	.word	0x40010000
 8003470:	40010800 	.word	0x40010800
 8003474:	40010c00 	.word	0x40010c00
 8003478:	40011000 	.word	0x40011000
 800347c:	40011400 	.word	0x40011400
 8003480:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_GPIO_Init+0x304>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	43db      	mvns	r3, r3
 800348c:	4909      	ldr	r1, [pc, #36]	; (80034b4 <HAL_GPIO_Init+0x304>)
 800348e:	4013      	ands	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	3301      	adds	r3, #1
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	fa22 f303 	lsr.w	r3, r2, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f47f ae8e 	bne.w	80031c4 <HAL_GPIO_Init+0x14>
  }
}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	372c      	adds	r7, #44	; 0x2c
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr
 80034b4:	40010400 	.word	0x40010400

080034b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	887b      	ldrh	r3, [r7, #2]
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
 80034d4:	e001      	b.n	80034da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034d6:	2300      	movs	r3, #0
 80034d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr

080034e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	460b      	mov	r3, r1
 80034f0:	807b      	strh	r3, [r7, #2]
 80034f2:	4613      	mov	r3, r2
 80034f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034f6:	787b      	ldrb	r3, [r7, #1]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034fc:	887a      	ldrh	r2, [r7, #2]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003502:	e003      	b.n	800350c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003504:	887b      	ldrh	r3, [r7, #2]
 8003506:	041a      	lsls	r2, r3, #16
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	611a      	str	r2, [r3, #16]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr
	...

08003518 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	4013      	ands	r3, r2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d006      	beq.n	800353c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800352e:	4a05      	ldr	r2, [pc, #20]	; (8003544 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd fef6 	bl	8001328 <HAL_GPIO_EXTI_Callback>
  }
}
 800353c:	bf00      	nop
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40010400 	.word	0x40010400

08003548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e12b      	b.n	80037b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fd fd3e 	bl	8000ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2224      	movs	r2, #36	; 0x24
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0201 	bic.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800359a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035ac:	f001 f842 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 80035b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4a81      	ldr	r2, [pc, #516]	; (80037bc <HAL_I2C_Init+0x274>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d807      	bhi.n	80035cc <HAL_I2C_Init+0x84>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4a80      	ldr	r2, [pc, #512]	; (80037c0 <HAL_I2C_Init+0x278>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	bf94      	ite	ls
 80035c4:	2301      	movls	r3, #1
 80035c6:	2300      	movhi	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e006      	b.n	80035da <HAL_I2C_Init+0x92>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a7d      	ldr	r2, [pc, #500]	; (80037c4 <HAL_I2C_Init+0x27c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	bf94      	ite	ls
 80035d4:	2301      	movls	r3, #1
 80035d6:	2300      	movhi	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0e7      	b.n	80037b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4a78      	ldr	r2, [pc, #480]	; (80037c8 <HAL_I2C_Init+0x280>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	0c9b      	lsrs	r3, r3, #18
 80035ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a6a      	ldr	r2, [pc, #424]	; (80037bc <HAL_I2C_Init+0x274>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d802      	bhi.n	800361c <HAL_I2C_Init+0xd4>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	3301      	adds	r3, #1
 800361a:	e009      	b.n	8003630 <HAL_I2C_Init+0xe8>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	4a69      	ldr	r2, [pc, #420]	; (80037cc <HAL_I2C_Init+0x284>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	099b      	lsrs	r3, r3, #6
 800362e:	3301      	adds	r3, #1
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	430b      	orrs	r3, r1
 8003636:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003642:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	495c      	ldr	r1, [pc, #368]	; (80037bc <HAL_I2C_Init+0x274>)
 800364c:	428b      	cmp	r3, r1
 800364e:	d819      	bhi.n	8003684 <HAL_I2C_Init+0x13c>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1e59      	subs	r1, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	fbb1 f3f3 	udiv	r3, r1, r3
 800365e:	1c59      	adds	r1, r3, #1
 8003660:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003664:	400b      	ands	r3, r1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_I2C_Init+0x138>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1e59      	subs	r1, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fbb1 f3f3 	udiv	r3, r1, r3
 8003678:	3301      	adds	r3, #1
 800367a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367e:	e051      	b.n	8003724 <HAL_I2C_Init+0x1dc>
 8003680:	2304      	movs	r3, #4
 8003682:	e04f      	b.n	8003724 <HAL_I2C_Init+0x1dc>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d111      	bne.n	80036b0 <HAL_I2C_Init+0x168>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1e58      	subs	r0, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	440b      	add	r3, r1
 800369a:	fbb0 f3f3 	udiv	r3, r0, r3
 800369e:	3301      	adds	r3, #1
 80036a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf0c      	ite	eq
 80036a8:	2301      	moveq	r3, #1
 80036aa:	2300      	movne	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	e012      	b.n	80036d6 <HAL_I2C_Init+0x18e>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1e58      	subs	r0, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	0099      	lsls	r1, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c6:	3301      	adds	r3, #1
 80036c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_I2C_Init+0x196>
 80036da:	2301      	movs	r3, #1
 80036dc:	e022      	b.n	8003724 <HAL_I2C_Init+0x1dc>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10e      	bne.n	8003704 <HAL_I2C_Init+0x1bc>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1e58      	subs	r0, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6859      	ldr	r1, [r3, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	440b      	add	r3, r1
 80036f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f8:	3301      	adds	r3, #1
 80036fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003702:	e00f      	b.n	8003724 <HAL_I2C_Init+0x1dc>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1e58      	subs	r0, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	0099      	lsls	r1, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	fbb0 f3f3 	udiv	r3, r0, r3
 800371a:	3301      	adds	r3, #1
 800371c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	6809      	ldr	r1, [r1, #0]
 8003728:	4313      	orrs	r3, r2
 800372a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003752:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6911      	ldr	r1, [r2, #16]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	68d2      	ldr	r2, [r2, #12]
 800375e:	4311      	orrs	r1, r2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	430b      	orrs	r3, r1
 8003766:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	000186a0 	.word	0x000186a0
 80037c0:	001e847f 	.word	0x001e847f
 80037c4:	003d08ff 	.word	0x003d08ff
 80037c8:	431bde83 	.word	0x431bde83
 80037cc:	10624dd3 	.word	0x10624dd3

080037d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	4608      	mov	r0, r1
 80037da:	4611      	mov	r1, r2
 80037dc:	461a      	mov	r2, r3
 80037de:	4603      	mov	r3, r0
 80037e0:	817b      	strh	r3, [r7, #10]
 80037e2:	460b      	mov	r3, r1
 80037e4:	813b      	strh	r3, [r7, #8]
 80037e6:	4613      	mov	r3, r2
 80037e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ea:	f7ff faf3 	bl	8002dd4 <HAL_GetTick>
 80037ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	f040 80d9 	bne.w	80039b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	2319      	movs	r3, #25
 8003804:	2201      	movs	r2, #1
 8003806:	496d      	ldr	r1, [pc, #436]	; (80039bc <HAL_I2C_Mem_Write+0x1ec>)
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f971 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003814:	2302      	movs	r3, #2
 8003816:	e0cc      	b.n	80039b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_I2C_Mem_Write+0x56>
 8003822:	2302      	movs	r3, #2
 8003824:	e0c5      	b.n	80039b2 <HAL_I2C_Mem_Write+0x1e2>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b01      	cmp	r3, #1
 800383a:	d007      	beq.n	800384c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800385a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2221      	movs	r2, #33	; 0x21
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2240      	movs	r2, #64	; 0x40
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a3a      	ldr	r2, [r7, #32]
 8003876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800387c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a4d      	ldr	r2, [pc, #308]	; (80039c0 <HAL_I2C_Mem_Write+0x1f0>)
 800388c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800388e:	88f8      	ldrh	r0, [r7, #6]
 8003890:	893a      	ldrh	r2, [r7, #8]
 8003892:	8979      	ldrh	r1, [r7, #10]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	4603      	mov	r3, r0
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f890 	bl	80039c4 <I2C_RequestMemoryWrite>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d052      	beq.n	8003950 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e081      	b.n	80039b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fa36 	bl	8003d24 <I2C_WaitOnTXEFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00d      	beq.n	80038da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d107      	bne.n	80038d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e06b      	b.n	80039b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	781a      	ldrb	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b04      	cmp	r3, #4
 8003916:	d11b      	bne.n	8003950 <HAL_I2C_Mem_Write+0x180>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	2b00      	cmp	r3, #0
 800391e:	d017      	beq.n	8003950 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	781a      	ldrb	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1aa      	bne.n	80038ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 fa29 	bl	8003db4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00d      	beq.n	8003984 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	2b04      	cmp	r3, #4
 800396e:	d107      	bne.n	8003980 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e016      	b.n	80039b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	e000      	b.n	80039b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039b0:	2302      	movs	r3, #2
  }
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	00100002 	.word	0x00100002
 80039c0:	ffff0000 	.word	0xffff0000

080039c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	4608      	mov	r0, r1
 80039ce:	4611      	mov	r1, r2
 80039d0:	461a      	mov	r2, r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	817b      	strh	r3, [r7, #10]
 80039d6:	460b      	mov	r3, r1
 80039d8:	813b      	strh	r3, [r7, #8]
 80039da:	4613      	mov	r3, r2
 80039dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f878 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00d      	beq.n	8003a22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a14:	d103      	bne.n	8003a1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e05f      	b.n	8003ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a22:	897b      	ldrh	r3, [r7, #10]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	461a      	mov	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	6a3a      	ldr	r2, [r7, #32]
 8003a36:	492d      	ldr	r1, [pc, #180]	; (8003aec <I2C_RequestMemoryWrite+0x128>)
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f8d3 	bl	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e04c      	b.n	8003ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a60:	6a39      	ldr	r1, [r7, #32]
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f95e 	bl	8003d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00d      	beq.n	8003a8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d107      	bne.n	8003a86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e02b      	b.n	8003ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d105      	bne.n	8003a9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a90:	893b      	ldrh	r3, [r7, #8]
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	611a      	str	r2, [r3, #16]
 8003a9a:	e021      	b.n	8003ae0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a9c:	893b      	ldrh	r3, [r7, #8]
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aac:	6a39      	ldr	r1, [r7, #32]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f938 	bl	8003d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d107      	bne.n	8003ad2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e005      	b.n	8003ae2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ad6:	893b      	ldrh	r3, [r7, #8]
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	00010002 	.word	0x00010002

08003af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b00:	e048      	b.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d044      	beq.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0a:	f7ff f963 	bl	8002dd4 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d302      	bcc.n	8003b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d139      	bne.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	0c1b      	lsrs	r3, r3, #16
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d10d      	bne.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	43da      	mvns	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4013      	ands	r3, r2
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2301      	moveq	r3, #1
 8003b3e:	2300      	movne	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	e00c      	b.n	8003b60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	43da      	mvns	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4013      	ands	r3, r2
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d116      	bne.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e023      	b.n	8003bdc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d10d      	bne.n	8003bba <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	e00c      	b.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	43da      	mvns	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d093      	beq.n	8003b02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bf2:	e071      	b.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c02:	d123      	bne.n	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	f043 0204 	orr.w	r2, r3, #4
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e067      	b.n	8003d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d041      	beq.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c54:	f7ff f8be 	bl	8002dd4 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d302      	bcc.n	8003c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d136      	bne.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d10c      	bne.n	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	43da      	mvns	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bf14      	ite	ne
 8003c86:	2301      	movne	r3, #1
 8003c88:	2300      	moveq	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	e00b      	b.n	8003ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	43da      	mvns	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf14      	ite	ne
 8003ca0:	2301      	movne	r3, #1
 8003ca2:	2300      	moveq	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d016      	beq.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e021      	b.n	8003d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	0c1b      	lsrs	r3, r3, #16
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d10c      	bne.n	8003cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	43da      	mvns	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4013      	ands	r3, r2
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf14      	ite	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	e00b      	b.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	43da      	mvns	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	bf14      	ite	ne
 8003d0e:	2301      	movne	r3, #1
 8003d10:	2300      	moveq	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f47f af6d 	bne.w	8003bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d30:	e034      	b.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f886 	bl	8003e44 <I2C_IsAcknowledgeFailed>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e034      	b.n	8003dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d028      	beq.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4a:	f7ff f843 	bl	8002dd4 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d302      	bcc.n	8003d60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d11d      	bne.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6a:	2b80      	cmp	r3, #128	; 0x80
 8003d6c:	d016      	beq.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	f043 0220 	orr.w	r2, r3, #32
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e007      	b.n	8003dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da6:	2b80      	cmp	r3, #128	; 0x80
 8003da8:	d1c3      	bne.n	8003d32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc0:	e034      	b.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f83e 	bl	8003e44 <I2C_IsAcknowledgeFailed>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e034      	b.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d028      	beq.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dda:	f7fe fffb 	bl	8002dd4 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d302      	bcc.n	8003df0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d11d      	bne.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d016      	beq.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f043 0220 	orr.w	r2, r3, #32
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e007      	b.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d1c3      	bne.n	8003dc2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5a:	d11b      	bne.n	8003e94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f043 0204 	orr.w	r2, r3, #4
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e272      	b.n	8004398 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 8087 	beq.w	8003fce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ec0:	4b92      	ldr	r3, [pc, #584]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d00c      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ecc:	4b8f      	ldr	r3, [pc, #572]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 030c 	and.w	r3, r3, #12
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d112      	bne.n	8003efe <HAL_RCC_OscConfig+0x5e>
 8003ed8:	4b8c      	ldr	r3, [pc, #560]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee4:	d10b      	bne.n	8003efe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee6:	4b89      	ldr	r3, [pc, #548]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d06c      	beq.n	8003fcc <HAL_RCC_OscConfig+0x12c>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d168      	bne.n	8003fcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e24c      	b.n	8004398 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f06:	d106      	bne.n	8003f16 <HAL_RCC_OscConfig+0x76>
 8003f08:	4b80      	ldr	r3, [pc, #512]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a7f      	ldr	r2, [pc, #508]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	e02e      	b.n	8003f74 <HAL_RCC_OscConfig+0xd4>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x98>
 8003f1e:	4b7b      	ldr	r3, [pc, #492]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a7a      	ldr	r2, [pc, #488]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4b78      	ldr	r3, [pc, #480]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a77      	ldr	r2, [pc, #476]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e01d      	b.n	8003f74 <HAL_RCC_OscConfig+0xd4>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCC_OscConfig+0xbc>
 8003f42:	4b72      	ldr	r3, [pc, #456]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a71      	ldr	r2, [pc, #452]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	4b6f      	ldr	r3, [pc, #444]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a6e      	ldr	r2, [pc, #440]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCC_OscConfig+0xd4>
 8003f5c:	4b6b      	ldr	r3, [pc, #428]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a6a      	ldr	r2, [pc, #424]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	4b68      	ldr	r3, [pc, #416]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a67      	ldr	r2, [pc, #412]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d013      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fe ff2a 	bl	8002dd4 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f84:	f7fe ff26 	bl	8002dd4 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	; 0x64
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e200      	b.n	8004398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f96:	4b5d      	ldr	r3, [pc, #372]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0xe4>
 8003fa2:	e014      	b.n	8003fce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa4:	f7fe ff16 	bl	8002dd4 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fac:	f7fe ff12 	bl	8002dd4 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b64      	cmp	r3, #100	; 0x64
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e1ec      	b.n	8004398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fbe:	4b53      	ldr	r3, [pc, #332]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0x10c>
 8003fca:	e000      	b.n	8003fce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d063      	beq.n	80040a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fda:	4b4c      	ldr	r3, [pc, #304]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 030c 	and.w	r3, r3, #12
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003fe6:	4b49      	ldr	r3, [pc, #292]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d11c      	bne.n	800402c <HAL_RCC_OscConfig+0x18c>
 8003ff2:	4b46      	ldr	r3, [pc, #280]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d116      	bne.n	800402c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffe:	4b43      	ldr	r3, [pc, #268]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <HAL_RCC_OscConfig+0x176>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d001      	beq.n	8004016 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e1c0      	b.n	8004398 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004016:	4b3d      	ldr	r3, [pc, #244]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4939      	ldr	r1, [pc, #228]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8004026:	4313      	orrs	r3, r2
 8004028:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402a:	e03a      	b.n	80040a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d020      	beq.n	8004076 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004034:	4b36      	ldr	r3, [pc, #216]	; (8004110 <HAL_RCC_OscConfig+0x270>)
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403a:	f7fe fecb 	bl	8002dd4 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004042:	f7fe fec7 	bl	8002dd4 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e1a1      	b.n	8004398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004054:	4b2d      	ldr	r3, [pc, #180]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004060:	4b2a      	ldr	r3, [pc, #168]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4927      	ldr	r1, [pc, #156]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8004070:	4313      	orrs	r3, r2
 8004072:	600b      	str	r3, [r1, #0]
 8004074:	e015      	b.n	80040a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004076:	4b26      	ldr	r3, [pc, #152]	; (8004110 <HAL_RCC_OscConfig+0x270>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fe feaa 	bl	8002dd4 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004084:	f7fe fea6 	bl	8002dd4 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e180      	b.n	8004398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004096:	4b1d      	ldr	r3, [pc, #116]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d03a      	beq.n	8004124 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d019      	beq.n	80040ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040b6:	4b17      	ldr	r3, [pc, #92]	; (8004114 <HAL_RCC_OscConfig+0x274>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040bc:	f7fe fe8a 	bl	8002dd4 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c4:	f7fe fe86 	bl	8002dd4 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e160      	b.n	8004398 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040e2:	2001      	movs	r0, #1
 80040e4:	f000 face 	bl	8004684 <RCC_Delay>
 80040e8:	e01c      	b.n	8004124 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ea:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <HAL_RCC_OscConfig+0x274>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f0:	f7fe fe70 	bl	8002dd4 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f6:	e00f      	b.n	8004118 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f8:	f7fe fe6c 	bl	8002dd4 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d908      	bls.n	8004118 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e146      	b.n	8004398 <HAL_RCC_OscConfig+0x4f8>
 800410a:	bf00      	nop
 800410c:	40021000 	.word	0x40021000
 8004110:	42420000 	.word	0x42420000
 8004114:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004118:	4b92      	ldr	r3, [pc, #584]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e9      	bne.n	80040f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80a6 	beq.w	800427e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004132:	2300      	movs	r3, #0
 8004134:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004136:	4b8b      	ldr	r3, [pc, #556]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10d      	bne.n	800415e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004142:	4b88      	ldr	r3, [pc, #544]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	4a87      	ldr	r2, [pc, #540]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 8004148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800414c:	61d3      	str	r3, [r2, #28]
 800414e:	4b85      	ldr	r3, [pc, #532]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800415a:	2301      	movs	r3, #1
 800415c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415e:	4b82      	ldr	r3, [pc, #520]	; (8004368 <HAL_RCC_OscConfig+0x4c8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d118      	bne.n	800419c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800416a:	4b7f      	ldr	r3, [pc, #508]	; (8004368 <HAL_RCC_OscConfig+0x4c8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a7e      	ldr	r2, [pc, #504]	; (8004368 <HAL_RCC_OscConfig+0x4c8>)
 8004170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004176:	f7fe fe2d 	bl	8002dd4 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417e:	f7fe fe29 	bl	8002dd4 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b64      	cmp	r3, #100	; 0x64
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e103      	b.n	8004398 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004190:	4b75      	ldr	r3, [pc, #468]	; (8004368 <HAL_RCC_OscConfig+0x4c8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d106      	bne.n	80041b2 <HAL_RCC_OscConfig+0x312>
 80041a4:	4b6f      	ldr	r3, [pc, #444]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	4a6e      	ldr	r2, [pc, #440]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	6213      	str	r3, [r2, #32]
 80041b0:	e02d      	b.n	800420e <HAL_RCC_OscConfig+0x36e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x334>
 80041ba:	4b6a      	ldr	r3, [pc, #424]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	4a69      	ldr	r2, [pc, #420]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 80041c0:	f023 0301 	bic.w	r3, r3, #1
 80041c4:	6213      	str	r3, [r2, #32]
 80041c6:	4b67      	ldr	r3, [pc, #412]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	4a66      	ldr	r2, [pc, #408]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 80041cc:	f023 0304 	bic.w	r3, r3, #4
 80041d0:	6213      	str	r3, [r2, #32]
 80041d2:	e01c      	b.n	800420e <HAL_RCC_OscConfig+0x36e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2b05      	cmp	r3, #5
 80041da:	d10c      	bne.n	80041f6 <HAL_RCC_OscConfig+0x356>
 80041dc:	4b61      	ldr	r3, [pc, #388]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	4a60      	ldr	r2, [pc, #384]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 80041e2:	f043 0304 	orr.w	r3, r3, #4
 80041e6:	6213      	str	r3, [r2, #32]
 80041e8:	4b5e      	ldr	r3, [pc, #376]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	4a5d      	ldr	r2, [pc, #372]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	6213      	str	r3, [r2, #32]
 80041f4:	e00b      	b.n	800420e <HAL_RCC_OscConfig+0x36e>
 80041f6:	4b5b      	ldr	r3, [pc, #364]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	4a5a      	ldr	r2, [pc, #360]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 80041fc:	f023 0301 	bic.w	r3, r3, #1
 8004200:	6213      	str	r3, [r2, #32]
 8004202:	4b58      	ldr	r3, [pc, #352]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	4a57      	ldr	r2, [pc, #348]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 8004208:	f023 0304 	bic.w	r3, r3, #4
 800420c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d015      	beq.n	8004242 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004216:	f7fe fddd 	bl	8002dd4 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421c:	e00a      	b.n	8004234 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421e:	f7fe fdd9 	bl	8002dd4 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	f241 3288 	movw	r2, #5000	; 0x1388
 800422c:	4293      	cmp	r3, r2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e0b1      	b.n	8004398 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004234:	4b4b      	ldr	r3, [pc, #300]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ee      	beq.n	800421e <HAL_RCC_OscConfig+0x37e>
 8004240:	e014      	b.n	800426c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004242:	f7fe fdc7 	bl	8002dd4 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004248:	e00a      	b.n	8004260 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424a:	f7fe fdc3 	bl	8002dd4 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f241 3288 	movw	r2, #5000	; 0x1388
 8004258:	4293      	cmp	r3, r2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e09b      	b.n	8004398 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004260:	4b40      	ldr	r3, [pc, #256]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1ee      	bne.n	800424a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d105      	bne.n	800427e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004272:	4b3c      	ldr	r3, [pc, #240]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	4a3b      	ldr	r2, [pc, #236]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 8004278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800427c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 8087 	beq.w	8004396 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004288:	4b36      	ldr	r3, [pc, #216]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 030c 	and.w	r3, r3, #12
 8004290:	2b08      	cmp	r3, #8
 8004292:	d061      	beq.n	8004358 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d146      	bne.n	800432a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429c:	4b33      	ldr	r3, [pc, #204]	; (800436c <HAL_RCC_OscConfig+0x4cc>)
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a2:	f7fe fd97 	bl	8002dd4 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042aa:	f7fe fd93 	bl	8002dd4 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e06d      	b.n	8004398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042bc:	4b29      	ldr	r3, [pc, #164]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f0      	bne.n	80042aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d0:	d108      	bne.n	80042e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042d2:	4b24      	ldr	r3, [pc, #144]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	4921      	ldr	r1, [pc, #132]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042e4:	4b1f      	ldr	r3, [pc, #124]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a19      	ldr	r1, [r3, #32]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	430b      	orrs	r3, r1
 80042f6:	491b      	ldr	r1, [pc, #108]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042fc:	4b1b      	ldr	r3, [pc, #108]	; (800436c <HAL_RCC_OscConfig+0x4cc>)
 80042fe:	2201      	movs	r2, #1
 8004300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004302:	f7fe fd67 	bl	8002dd4 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430a:	f7fe fd63 	bl	8002dd4 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e03d      	b.n	8004398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800431c:	4b11      	ldr	r3, [pc, #68]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x46a>
 8004328:	e035      	b.n	8004396 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432a:	4b10      	ldr	r3, [pc, #64]	; (800436c <HAL_RCC_OscConfig+0x4cc>)
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fe fd50 	bl	8002dd4 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004338:	f7fe fd4c 	bl	8002dd4 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e026      	b.n	8004398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800434a:	4b06      	ldr	r3, [pc, #24]	; (8004364 <HAL_RCC_OscConfig+0x4c4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x498>
 8004356:	e01e      	b.n	8004396 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d107      	bne.n	8004370 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e019      	b.n	8004398 <HAL_RCC_OscConfig+0x4f8>
 8004364:	40021000 	.word	0x40021000
 8004368:	40007000 	.word	0x40007000
 800436c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_RCC_OscConfig+0x500>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	429a      	cmp	r2, r3
 8004382:	d106      	bne.n	8004392 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800438e:	429a      	cmp	r2, r3
 8004390:	d001      	beq.n	8004396 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40021000 	.word	0x40021000

080043a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0d0      	b.n	800455a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043b8:	4b6a      	ldr	r3, [pc, #424]	; (8004564 <HAL_RCC_ClockConfig+0x1c0>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d910      	bls.n	80043e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c6:	4b67      	ldr	r3, [pc, #412]	; (8004564 <HAL_RCC_ClockConfig+0x1c0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 0207 	bic.w	r2, r3, #7
 80043ce:	4965      	ldr	r1, [pc, #404]	; (8004564 <HAL_RCC_ClockConfig+0x1c0>)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d6:	4b63      	ldr	r3, [pc, #396]	; (8004564 <HAL_RCC_ClockConfig+0x1c0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0b8      	b.n	800455a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d020      	beq.n	8004436 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004400:	4b59      	ldr	r3, [pc, #356]	; (8004568 <HAL_RCC_ClockConfig+0x1c4>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	4a58      	ldr	r2, [pc, #352]	; (8004568 <HAL_RCC_ClockConfig+0x1c4>)
 8004406:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800440a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004418:	4b53      	ldr	r3, [pc, #332]	; (8004568 <HAL_RCC_ClockConfig+0x1c4>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	4a52      	ldr	r2, [pc, #328]	; (8004568 <HAL_RCC_ClockConfig+0x1c4>)
 800441e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004422:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004424:	4b50      	ldr	r3, [pc, #320]	; (8004568 <HAL_RCC_ClockConfig+0x1c4>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	494d      	ldr	r1, [pc, #308]	; (8004568 <HAL_RCC_ClockConfig+0x1c4>)
 8004432:	4313      	orrs	r3, r2
 8004434:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d040      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d107      	bne.n	800445a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444a:	4b47      	ldr	r3, [pc, #284]	; (8004568 <HAL_RCC_ClockConfig+0x1c4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d115      	bne.n	8004482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e07f      	b.n	800455a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d107      	bne.n	8004472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004462:	4b41      	ldr	r3, [pc, #260]	; (8004568 <HAL_RCC_ClockConfig+0x1c4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e073      	b.n	800455a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004472:	4b3d      	ldr	r3, [pc, #244]	; (8004568 <HAL_RCC_ClockConfig+0x1c4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e06b      	b.n	800455a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004482:	4b39      	ldr	r3, [pc, #228]	; (8004568 <HAL_RCC_ClockConfig+0x1c4>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f023 0203 	bic.w	r2, r3, #3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	4936      	ldr	r1, [pc, #216]	; (8004568 <HAL_RCC_ClockConfig+0x1c4>)
 8004490:	4313      	orrs	r3, r2
 8004492:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004494:	f7fe fc9e 	bl	8002dd4 <HAL_GetTick>
 8004498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800449c:	f7fe fc9a 	bl	8002dd4 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e053      	b.n	800455a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b2:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <HAL_RCC_ClockConfig+0x1c4>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f003 020c 	and.w	r2, r3, #12
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d1eb      	bne.n	800449c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044c4:	4b27      	ldr	r3, [pc, #156]	; (8004564 <HAL_RCC_ClockConfig+0x1c0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d210      	bcs.n	80044f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d2:	4b24      	ldr	r3, [pc, #144]	; (8004564 <HAL_RCC_ClockConfig+0x1c0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 0207 	bic.w	r2, r3, #7
 80044da:	4922      	ldr	r1, [pc, #136]	; (8004564 <HAL_RCC_ClockConfig+0x1c0>)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	4b20      	ldr	r3, [pc, #128]	; (8004564 <HAL_RCC_ClockConfig+0x1c0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e032      	b.n	800455a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004500:	4b19      	ldr	r3, [pc, #100]	; (8004568 <HAL_RCC_ClockConfig+0x1c4>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4916      	ldr	r1, [pc, #88]	; (8004568 <HAL_RCC_ClockConfig+0x1c4>)
 800450e:	4313      	orrs	r3, r2
 8004510:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d009      	beq.n	8004532 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800451e:	4b12      	ldr	r3, [pc, #72]	; (8004568 <HAL_RCC_ClockConfig+0x1c4>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	490e      	ldr	r1, [pc, #56]	; (8004568 <HAL_RCC_ClockConfig+0x1c4>)
 800452e:	4313      	orrs	r3, r2
 8004530:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004532:	f000 f821 	bl	8004578 <HAL_RCC_GetSysClockFreq>
 8004536:	4602      	mov	r2, r0
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <HAL_RCC_ClockConfig+0x1c4>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	091b      	lsrs	r3, r3, #4
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	490a      	ldr	r1, [pc, #40]	; (800456c <HAL_RCC_ClockConfig+0x1c8>)
 8004544:	5ccb      	ldrb	r3, [r1, r3]
 8004546:	fa22 f303 	lsr.w	r3, r2, r3
 800454a:	4a09      	ldr	r2, [pc, #36]	; (8004570 <HAL_RCC_ClockConfig+0x1cc>)
 800454c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800454e:	4b09      	ldr	r3, [pc, #36]	; (8004574 <HAL_RCC_ClockConfig+0x1d0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fbfc 	bl	8002d50 <HAL_InitTick>

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40022000 	.word	0x40022000
 8004568:	40021000 	.word	0x40021000
 800456c:	08007a2c 	.word	0x08007a2c
 8004570:	20000024 	.word	0x20000024
 8004574:	20000028 	.word	0x20000028

08004578 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	2300      	movs	r3, #0
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	2300      	movs	r3, #0
 800458c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004592:	4b1e      	ldr	r3, [pc, #120]	; (800460c <HAL_RCC_GetSysClockFreq+0x94>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 030c 	and.w	r3, r3, #12
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d002      	beq.n	80045a8 <HAL_RCC_GetSysClockFreq+0x30>
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d003      	beq.n	80045ae <HAL_RCC_GetSysClockFreq+0x36>
 80045a6:	e027      	b.n	80045f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_RCC_GetSysClockFreq+0x98>)
 80045aa:	613b      	str	r3, [r7, #16]
      break;
 80045ac:	e027      	b.n	80045fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	0c9b      	lsrs	r3, r3, #18
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	4a17      	ldr	r2, [pc, #92]	; (8004614 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045b8:	5cd3      	ldrb	r3, [r2, r3]
 80045ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d010      	beq.n	80045e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045c6:	4b11      	ldr	r3, [pc, #68]	; (800460c <HAL_RCC_GetSysClockFreq+0x94>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	0c5b      	lsrs	r3, r3, #17
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	4a11      	ldr	r2, [pc, #68]	; (8004618 <HAL_RCC_GetSysClockFreq+0xa0>)
 80045d2:	5cd3      	ldrb	r3, [r2, r3]
 80045d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a0d      	ldr	r2, [pc, #52]	; (8004610 <HAL_RCC_GetSysClockFreq+0x98>)
 80045da:	fb03 f202 	mul.w	r2, r3, r2
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	e004      	b.n	80045f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a0c      	ldr	r2, [pc, #48]	; (800461c <HAL_RCC_GetSysClockFreq+0xa4>)
 80045ec:	fb02 f303 	mul.w	r3, r2, r3
 80045f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	613b      	str	r3, [r7, #16]
      break;
 80045f6:	e002      	b.n	80045fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045f8:	4b05      	ldr	r3, [pc, #20]	; (8004610 <HAL_RCC_GetSysClockFreq+0x98>)
 80045fa:	613b      	str	r3, [r7, #16]
      break;
 80045fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045fe:	693b      	ldr	r3, [r7, #16]
}
 8004600:	4618      	mov	r0, r3
 8004602:	371c      	adds	r7, #28
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000
 8004610:	007a1200 	.word	0x007a1200
 8004614:	08007a44 	.word	0x08007a44
 8004618:	08007a54 	.word	0x08007a54
 800461c:	003d0900 	.word	0x003d0900

08004620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004624:	4b02      	ldr	r3, [pc, #8]	; (8004630 <HAL_RCC_GetHCLKFreq+0x10>)
 8004626:	681b      	ldr	r3, [r3, #0]
}
 8004628:	4618      	mov	r0, r3
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr
 8004630:	20000024 	.word	0x20000024

08004634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004638:	f7ff fff2 	bl	8004620 <HAL_RCC_GetHCLKFreq>
 800463c:	4602      	mov	r2, r0
 800463e:	4b05      	ldr	r3, [pc, #20]	; (8004654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	0a1b      	lsrs	r3, r3, #8
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	4903      	ldr	r1, [pc, #12]	; (8004658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800464a:	5ccb      	ldrb	r3, [r1, r3]
 800464c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004650:	4618      	mov	r0, r3
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40021000 	.word	0x40021000
 8004658:	08007a3c 	.word	0x08007a3c

0800465c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004660:	f7ff ffde 	bl	8004620 <HAL_RCC_GetHCLKFreq>
 8004664:	4602      	mov	r2, r0
 8004666:	4b05      	ldr	r3, [pc, #20]	; (800467c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	0adb      	lsrs	r3, r3, #11
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	4903      	ldr	r1, [pc, #12]	; (8004680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004672:	5ccb      	ldrb	r3, [r1, r3]
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004678:	4618      	mov	r0, r3
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40021000 	.word	0x40021000
 8004680:	08007a3c 	.word	0x08007a3c

08004684 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <RCC_Delay+0x34>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <RCC_Delay+0x38>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	0a5b      	lsrs	r3, r3, #9
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046a0:	bf00      	nop
  }
  while (Delay --);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1e5a      	subs	r2, r3, #1
 80046a6:	60fa      	str	r2, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f9      	bne.n	80046a0 <RCC_Delay+0x1c>
}
 80046ac:	bf00      	nop
 80046ae:	bf00      	nop
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr
 80046b8:	20000024 	.word	0x20000024
 80046bc:	10624dd3 	.word	0x10624dd3

080046c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e042      	b.n	8004758 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fe fa1e 	bl	8002b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2224      	movs	r2, #36	; 0x24
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004702:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fdb7 	bl	8005278 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695a      	ldr	r2, [r3, #20]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004728:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004738:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	; 0x28
 8004764:	af02      	add	r7, sp, #8
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	4613      	mov	r3, r2
 800476e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b20      	cmp	r3, #32
 800477e:	d175      	bne.n	800486c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_UART_Transmit+0x2c>
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e06e      	b.n	800486e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2221      	movs	r2, #33	; 0x21
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800479e:	f7fe fb19 	bl	8002dd4 <HAL_GetTick>
 80047a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	88fa      	ldrh	r2, [r7, #6]
 80047a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	88fa      	ldrh	r2, [r7, #6]
 80047ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b8:	d108      	bne.n	80047cc <HAL_UART_Transmit+0x6c>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d104      	bne.n	80047cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	e003      	b.n	80047d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047d0:	2300      	movs	r3, #0
 80047d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047d4:	e02e      	b.n	8004834 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2200      	movs	r2, #0
 80047de:	2180      	movs	r1, #128	; 0x80
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 fb1c 	bl	8004e1e <UART_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e03a      	b.n	800486e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10b      	bne.n	8004816 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800480c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	3302      	adds	r3, #2
 8004812:	61bb      	str	r3, [r7, #24]
 8004814:	e007      	b.n	8004826 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	781a      	ldrb	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	3301      	adds	r3, #1
 8004824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1cb      	bne.n	80047d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2200      	movs	r2, #0
 8004846:	2140      	movs	r1, #64	; 0x40
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fae8 	bl	8004e1e <UART_WaitOnFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e006      	b.n	800486e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	e000      	b.n	800486e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800486c:	2302      	movs	r3, #2
  }
}
 800486e:	4618      	mov	r0, r3
 8004870:	3720      	adds	r7, #32
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	4613      	mov	r3, r2
 8004882:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b20      	cmp	r3, #32
 800488e:	d112      	bne.n	80048b6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_UART_Receive_IT+0x26>
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e00b      	b.n	80048b8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	461a      	mov	r2, r3
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 fb0f 	bl	8004ed0 <UART_Start_Receive_IT>
 80048b2:	4603      	mov	r3, r0
 80048b4:	e000      	b.n	80048b8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80048b6:	2302      	movs	r3, #2
  }
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b0ba      	sub	sp, #232	; 0xe8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80048fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10f      	bne.n	8004926 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <HAL_UART_IRQHandler+0x66>
 8004912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fbec 	bl	80050fc <UART_Receive_IT>
      return;
 8004924:	e25b      	b.n	8004dde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004926:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 80de 	beq.w	8004aec <HAL_UART_IRQHandler+0x22c>
 8004930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d106      	bne.n	800494a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800493c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004940:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 80d1 	beq.w	8004aec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800494a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00b      	beq.n	800496e <HAL_UART_IRQHandler+0xae>
 8004956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800495a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004966:	f043 0201 	orr.w	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800496e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00b      	beq.n	8004992 <HAL_UART_IRQHandler+0xd2>
 800497a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d005      	beq.n	8004992 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498a:	f043 0202 	orr.w	r2, r3, #2
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <HAL_UART_IRQHandler+0xf6>
 800499e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	f043 0204 	orr.w	r2, r3, #4
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d011      	beq.n	80049e6 <HAL_UART_IRQHandler+0x126>
 80049c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d105      	bne.n	80049da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	f043 0208 	orr.w	r2, r3, #8
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 81f2 	beq.w	8004dd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d008      	beq.n	8004a0e <HAL_UART_IRQHandler+0x14e>
 80049fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a00:	f003 0320 	and.w	r3, r3, #32
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fb77 	bl	80050fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	bf14      	ite	ne
 8004a1c:	2301      	movne	r3, #1
 8004a1e:	2300      	moveq	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d103      	bne.n	8004a3a <HAL_UART_IRQHandler+0x17a>
 8004a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d04f      	beq.n	8004ada <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fa81 	bl	8004f42 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d041      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3314      	adds	r3, #20
 8004a54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a5c:	e853 3f00 	ldrex	r3, [r3]
 8004a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3314      	adds	r3, #20
 8004a76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1d9      	bne.n	8004a4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d013      	beq.n	8004aca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	4a7e      	ldr	r2, [pc, #504]	; (8004ca0 <HAL_UART_IRQHandler+0x3e0>)
 8004aa8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe fb06 	bl	80030c0 <HAL_DMA_Abort_IT>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d016      	beq.n	8004ae8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac8:	e00e      	b.n	8004ae8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f993 	bl	8004df6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad0:	e00a      	b.n	8004ae8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f98f 	bl	8004df6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad8:	e006      	b.n	8004ae8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f98b 	bl	8004df6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004ae6:	e175      	b.n	8004dd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae8:	bf00      	nop
    return;
 8004aea:	e173      	b.n	8004dd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	f040 814f 	bne.w	8004d94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 8148 	beq.w	8004d94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 8141 	beq.w	8004d94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b12:	2300      	movs	r3, #0
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 80b6 	beq.w	8004ca4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8145 	beq.w	8004dd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b56:	429a      	cmp	r2, r3
 8004b58:	f080 813e 	bcs.w	8004dd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	f000 8088 	beq.w	8004c80 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	330c      	adds	r3, #12
 8004b76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	330c      	adds	r3, #12
 8004b98:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b9c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ba0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ba8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1d9      	bne.n	8004b70 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3314      	adds	r3, #20
 8004bc2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3314      	adds	r3, #20
 8004bdc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004be0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004be4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004be8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e1      	bne.n	8004bbc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3314      	adds	r3, #20
 8004bfe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c02:	e853 3f00 	ldrex	r3, [r3]
 8004c06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3314      	adds	r3, #20
 8004c18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c24:	e841 2300 	strex	r3, r2, [r1]
 8004c28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1e3      	bne.n	8004bf8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c50:	f023 0310 	bic.w	r3, r3, #16
 8004c54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c62:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c64:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e3      	bne.n	8004c3e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe f9e5 	bl	800304a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	4619      	mov	r1, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f8b6 	bl	8004e08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c9c:	e09c      	b.n	8004dd8 <HAL_UART_IRQHandler+0x518>
 8004c9e:	bf00      	nop
 8004ca0:	08005007 	.word	0x08005007
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 808e 	beq.w	8004ddc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004cc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8089 	beq.w	8004ddc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	330c      	adds	r3, #12
 8004cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ce0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004cee:	647a      	str	r2, [r7, #68]	; 0x44
 8004cf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e3      	bne.n	8004cca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3314      	adds	r3, #20
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	623b      	str	r3, [r7, #32]
   return(result);
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3314      	adds	r3, #20
 8004d22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d26:	633a      	str	r2, [r7, #48]	; 0x30
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e3      	bne.n	8004d02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	330c      	adds	r3, #12
 8004d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0310 	bic.w	r3, r3, #16
 8004d5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	330c      	adds	r3, #12
 8004d68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d6c:	61fa      	str	r2, [r7, #28]
 8004d6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d70:	69b9      	ldr	r1, [r7, #24]
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	e841 2300 	strex	r3, r2, [r1]
 8004d78:	617b      	str	r3, [r7, #20]
   return(result);
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e3      	bne.n	8004d48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f83b 	bl	8004e08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d92:	e023      	b.n	8004ddc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d009      	beq.n	8004db4 <HAL_UART_IRQHandler+0x4f4>
 8004da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f93e 	bl	800502e <UART_Transmit_IT>
    return;
 8004db2:	e014      	b.n	8004dde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00e      	beq.n	8004dde <HAL_UART_IRQHandler+0x51e>
 8004dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f97d 	bl	80050cc <UART_EndTransmit_IT>
    return;
 8004dd2:	e004      	b.n	8004dde <HAL_UART_IRQHandler+0x51e>
    return;
 8004dd4:	bf00      	nop
 8004dd6:	e002      	b.n	8004dde <HAL_UART_IRQHandler+0x51e>
      return;
 8004dd8:	bf00      	nop
 8004dda:	e000      	b.n	8004dde <HAL_UART_IRQHandler+0x51e>
      return;
 8004ddc:	bf00      	nop
  }
}
 8004dde:	37e8      	adds	r7, #232	; 0xe8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr

08004df6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr

08004e08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr

08004e1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b086      	sub	sp, #24
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	603b      	str	r3, [r7, #0]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e2e:	e03b      	b.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e36:	d037      	beq.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e38:	f7fd ffcc 	bl	8002dd4 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	6a3a      	ldr	r2, [r7, #32]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d302      	bcc.n	8004e4e <UART_WaitOnFlagUntilTimeout+0x30>
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e03a      	b.n	8004ec8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d023      	beq.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2b80      	cmp	r3, #128	; 0x80
 8004e64:	d020      	beq.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b40      	cmp	r3, #64	; 0x40
 8004e6a:	d01d      	beq.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d116      	bne.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f856 	bl	8004f42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2208      	movs	r2, #8
 8004e9a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e00f      	b.n	8004ec8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	bf0c      	ite	eq
 8004eb8:	2301      	moveq	r3, #1
 8004eba:	2300      	movne	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	79fb      	ldrb	r3, [r7, #7]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d0b4      	beq.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	88fa      	ldrh	r2, [r7, #6]
 8004ee8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	88fa      	ldrh	r2, [r7, #6]
 8004eee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2222      	movs	r2, #34	; 0x22
 8004efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f14:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695a      	ldr	r2, [r3, #20]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0201 	orr.w	r2, r2, #1
 8004f24:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0220 	orr.w	r2, r2, #32
 8004f34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	4770      	bx	lr

08004f42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b095      	sub	sp, #84	; 0x54
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	330c      	adds	r3, #12
 8004f50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	330c      	adds	r3, #12
 8004f68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f6a:	643a      	str	r2, [r7, #64]	; 0x40
 8004f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1e5      	bne.n	8004f4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3314      	adds	r3, #20
 8004f84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3314      	adds	r3, #20
 8004f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fa0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e5      	bne.n	8004f7e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d119      	bne.n	8004fee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	330c      	adds	r3, #12
 8004fc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f023 0310 	bic.w	r3, r3, #16
 8004fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fda:	61ba      	str	r2, [r7, #24]
 8004fdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fde:	6979      	ldr	r1, [r7, #20]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e5      	bne.n	8004fba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ffc:	bf00      	nop
 8004ffe:	3754      	adds	r7, #84	; 0x54
 8005000:	46bd      	mov	sp, r7
 8005002:	bc80      	pop	{r7}
 8005004:	4770      	bx	lr

08005006 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f7ff fee8 	bl	8004df6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800502e:	b480      	push	{r7}
 8005030:	b085      	sub	sp, #20
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b21      	cmp	r3, #33	; 0x21
 8005040:	d13e      	bne.n	80050c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504a:	d114      	bne.n	8005076 <UART_Transmit_IT+0x48>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d110      	bne.n	8005076 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005068:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	1c9a      	adds	r2, r3, #2
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	621a      	str	r2, [r3, #32]
 8005074:	e008      	b.n	8005088 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	1c59      	adds	r1, r3, #1
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6211      	str	r1, [r2, #32]
 8005080:	781a      	ldrb	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29b      	uxth	r3, r3
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4619      	mov	r1, r3
 8005096:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10f      	bne.n	80050bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	e000      	b.n	80050c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050c0:	2302      	movs	r3, #2
  }
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr

080050cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff fe79 	bl	8004de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08c      	sub	sp, #48	; 0x30
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b22      	cmp	r3, #34	; 0x22
 800510e:	f040 80ae 	bne.w	800526e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511a:	d117      	bne.n	800514c <UART_Receive_IT+0x50>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d113      	bne.n	800514c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005124:	2300      	movs	r3, #0
 8005126:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	b29b      	uxth	r3, r3
 8005136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513a:	b29a      	uxth	r2, r3
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	1c9a      	adds	r2, r3, #2
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	629a      	str	r2, [r3, #40]	; 0x28
 800514a:	e026      	b.n	800519a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515e:	d007      	beq.n	8005170 <UART_Receive_IT+0x74>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10a      	bne.n	800517e <UART_Receive_IT+0x82>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d106      	bne.n	800517e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	b2da      	uxtb	r2, r3
 8005178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	e008      	b.n	8005190 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800518a:	b2da      	uxtb	r2, r3
 800518c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	4619      	mov	r1, r3
 80051a8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d15d      	bne.n	800526a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0220 	bic.w	r2, r2, #32
 80051bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695a      	ldr	r2, [r3, #20]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0201 	bic.w	r2, r2, #1
 80051dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d135      	bne.n	8005260 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	330c      	adds	r3, #12
 8005200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	613b      	str	r3, [r7, #16]
   return(result);
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f023 0310 	bic.w	r3, r3, #16
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	330c      	adds	r3, #12
 8005218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521a:	623a      	str	r2, [r7, #32]
 800521c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	69f9      	ldr	r1, [r7, #28]
 8005220:	6a3a      	ldr	r2, [r7, #32]
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	61bb      	str	r3, [r7, #24]
   return(result);
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e5      	bne.n	80051fa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b10      	cmp	r3, #16
 800523a:	d10a      	bne.n	8005252 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800523c:	2300      	movs	r3, #0
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005256:	4619      	mov	r1, r3
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff fdd5 	bl	8004e08 <HAL_UARTEx_RxEventCallback>
 800525e:	e002      	b.n	8005266 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7fb ff03 	bl	800106c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	e002      	b.n	8005270 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	e000      	b.n	8005270 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800526e:	2302      	movs	r3, #2
  }
}
 8005270:	4618      	mov	r0, r3
 8005272:	3730      	adds	r7, #48	; 0x30
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80052b2:	f023 030c 	bic.w	r3, r3, #12
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6812      	ldr	r2, [r2, #0]
 80052ba:	68b9      	ldr	r1, [r7, #8]
 80052bc:	430b      	orrs	r3, r1
 80052be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699a      	ldr	r2, [r3, #24]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a2c      	ldr	r2, [pc, #176]	; (800538c <UART_SetConfig+0x114>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d103      	bne.n	80052e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052e0:	f7ff f9bc 	bl	800465c <HAL_RCC_GetPCLK2Freq>
 80052e4:	60f8      	str	r0, [r7, #12]
 80052e6:	e002      	b.n	80052ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052e8:	f7ff f9a4 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 80052ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	009a      	lsls	r2, r3, #2
 80052f8:	441a      	add	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	fbb2 f3f3 	udiv	r3, r2, r3
 8005304:	4a22      	ldr	r2, [pc, #136]	; (8005390 <UART_SetConfig+0x118>)
 8005306:	fba2 2303 	umull	r2, r3, r2, r3
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	0119      	lsls	r1, r3, #4
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	009a      	lsls	r2, r3, #2
 8005318:	441a      	add	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	fbb2 f2f3 	udiv	r2, r2, r3
 8005324:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <UART_SetConfig+0x118>)
 8005326:	fba3 0302 	umull	r0, r3, r3, r2
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	2064      	movs	r0, #100	; 0x64
 800532e:	fb00 f303 	mul.w	r3, r0, r3
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	3332      	adds	r3, #50	; 0x32
 8005338:	4a15      	ldr	r2, [pc, #84]	; (8005390 <UART_SetConfig+0x118>)
 800533a:	fba2 2303 	umull	r2, r3, r2, r3
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005344:	4419      	add	r1, r3
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4613      	mov	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	009a      	lsls	r2, r3, #2
 8005350:	441a      	add	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	fbb2 f2f3 	udiv	r2, r2, r3
 800535c:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <UART_SetConfig+0x118>)
 800535e:	fba3 0302 	umull	r0, r3, r3, r2
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	2064      	movs	r0, #100	; 0x64
 8005366:	fb00 f303 	mul.w	r3, r0, r3
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	3332      	adds	r3, #50	; 0x32
 8005370:	4a07      	ldr	r2, [pc, #28]	; (8005390 <UART_SetConfig+0x118>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	f003 020f 	and.w	r2, r3, #15
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	440a      	add	r2, r1
 8005382:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005384:	bf00      	nop
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40013800 	.word	0x40013800
 8005390:	51eb851f 	.word	0x51eb851f

08005394 <std>:
 8005394:	2300      	movs	r3, #0
 8005396:	b510      	push	{r4, lr}
 8005398:	4604      	mov	r4, r0
 800539a:	e9c0 3300 	strd	r3, r3, [r0]
 800539e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053a2:	6083      	str	r3, [r0, #8]
 80053a4:	8181      	strh	r1, [r0, #12]
 80053a6:	6643      	str	r3, [r0, #100]	; 0x64
 80053a8:	81c2      	strh	r2, [r0, #14]
 80053aa:	6183      	str	r3, [r0, #24]
 80053ac:	4619      	mov	r1, r3
 80053ae:	2208      	movs	r2, #8
 80053b0:	305c      	adds	r0, #92	; 0x5c
 80053b2:	f000 f9d5 	bl	8005760 <memset>
 80053b6:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <std+0x58>)
 80053b8:	6224      	str	r4, [r4, #32]
 80053ba:	6263      	str	r3, [r4, #36]	; 0x24
 80053bc:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <std+0x5c>)
 80053be:	62a3      	str	r3, [r4, #40]	; 0x28
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <std+0x60>)
 80053c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <std+0x64>)
 80053c6:	6323      	str	r3, [r4, #48]	; 0x30
 80053c8:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <std+0x68>)
 80053ca:	429c      	cmp	r4, r3
 80053cc:	d006      	beq.n	80053dc <std+0x48>
 80053ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80053d2:	4294      	cmp	r4, r2
 80053d4:	d002      	beq.n	80053dc <std+0x48>
 80053d6:	33d0      	adds	r3, #208	; 0xd0
 80053d8:	429c      	cmp	r4, r3
 80053da:	d105      	bne.n	80053e8 <std+0x54>
 80053dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80053e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053e4:	f000 ba5e 	b.w	80058a4 <__retarget_lock_init_recursive>
 80053e8:	bd10      	pop	{r4, pc}
 80053ea:	bf00      	nop
 80053ec:	0800557d 	.word	0x0800557d
 80053f0:	0800559f 	.word	0x0800559f
 80053f4:	080055d7 	.word	0x080055d7
 80053f8:	080055fb 	.word	0x080055fb
 80053fc:	200007ec 	.word	0x200007ec

08005400 <stdio_exit_handler>:
 8005400:	4a02      	ldr	r2, [pc, #8]	; (800540c <stdio_exit_handler+0xc>)
 8005402:	4903      	ldr	r1, [pc, #12]	; (8005410 <stdio_exit_handler+0x10>)
 8005404:	4803      	ldr	r0, [pc, #12]	; (8005414 <stdio_exit_handler+0x14>)
 8005406:	f000 b869 	b.w	80054dc <_fwalk_sglue>
 800540a:	bf00      	nop
 800540c:	20000030 	.word	0x20000030
 8005410:	08006421 	.word	0x08006421
 8005414:	2000003c 	.word	0x2000003c

08005418 <cleanup_stdio>:
 8005418:	6841      	ldr	r1, [r0, #4]
 800541a:	4b0c      	ldr	r3, [pc, #48]	; (800544c <cleanup_stdio+0x34>)
 800541c:	b510      	push	{r4, lr}
 800541e:	4299      	cmp	r1, r3
 8005420:	4604      	mov	r4, r0
 8005422:	d001      	beq.n	8005428 <cleanup_stdio+0x10>
 8005424:	f000 fffc 	bl	8006420 <_fflush_r>
 8005428:	68a1      	ldr	r1, [r4, #8]
 800542a:	4b09      	ldr	r3, [pc, #36]	; (8005450 <cleanup_stdio+0x38>)
 800542c:	4299      	cmp	r1, r3
 800542e:	d002      	beq.n	8005436 <cleanup_stdio+0x1e>
 8005430:	4620      	mov	r0, r4
 8005432:	f000 fff5 	bl	8006420 <_fflush_r>
 8005436:	68e1      	ldr	r1, [r4, #12]
 8005438:	4b06      	ldr	r3, [pc, #24]	; (8005454 <cleanup_stdio+0x3c>)
 800543a:	4299      	cmp	r1, r3
 800543c:	d004      	beq.n	8005448 <cleanup_stdio+0x30>
 800543e:	4620      	mov	r0, r4
 8005440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005444:	f000 bfec 	b.w	8006420 <_fflush_r>
 8005448:	bd10      	pop	{r4, pc}
 800544a:	bf00      	nop
 800544c:	200007ec 	.word	0x200007ec
 8005450:	20000854 	.word	0x20000854
 8005454:	200008bc 	.word	0x200008bc

08005458 <global_stdio_init.part.0>:
 8005458:	b510      	push	{r4, lr}
 800545a:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <global_stdio_init.part.0+0x30>)
 800545c:	4c0b      	ldr	r4, [pc, #44]	; (800548c <global_stdio_init.part.0+0x34>)
 800545e:	4a0c      	ldr	r2, [pc, #48]	; (8005490 <global_stdio_init.part.0+0x38>)
 8005460:	4620      	mov	r0, r4
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	2104      	movs	r1, #4
 8005466:	2200      	movs	r2, #0
 8005468:	f7ff ff94 	bl	8005394 <std>
 800546c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005470:	2201      	movs	r2, #1
 8005472:	2109      	movs	r1, #9
 8005474:	f7ff ff8e 	bl	8005394 <std>
 8005478:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800547c:	2202      	movs	r2, #2
 800547e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005482:	2112      	movs	r1, #18
 8005484:	f7ff bf86 	b.w	8005394 <std>
 8005488:	20000924 	.word	0x20000924
 800548c:	200007ec 	.word	0x200007ec
 8005490:	08005401 	.word	0x08005401

08005494 <__sfp_lock_acquire>:
 8005494:	4801      	ldr	r0, [pc, #4]	; (800549c <__sfp_lock_acquire+0x8>)
 8005496:	f000 ba06 	b.w	80058a6 <__retarget_lock_acquire_recursive>
 800549a:	bf00      	nop
 800549c:	2000092d 	.word	0x2000092d

080054a0 <__sfp_lock_release>:
 80054a0:	4801      	ldr	r0, [pc, #4]	; (80054a8 <__sfp_lock_release+0x8>)
 80054a2:	f000 ba01 	b.w	80058a8 <__retarget_lock_release_recursive>
 80054a6:	bf00      	nop
 80054a8:	2000092d 	.word	0x2000092d

080054ac <__sinit>:
 80054ac:	b510      	push	{r4, lr}
 80054ae:	4604      	mov	r4, r0
 80054b0:	f7ff fff0 	bl	8005494 <__sfp_lock_acquire>
 80054b4:	6a23      	ldr	r3, [r4, #32]
 80054b6:	b11b      	cbz	r3, 80054c0 <__sinit+0x14>
 80054b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054bc:	f7ff bff0 	b.w	80054a0 <__sfp_lock_release>
 80054c0:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <__sinit+0x28>)
 80054c2:	6223      	str	r3, [r4, #32]
 80054c4:	4b04      	ldr	r3, [pc, #16]	; (80054d8 <__sinit+0x2c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1f5      	bne.n	80054b8 <__sinit+0xc>
 80054cc:	f7ff ffc4 	bl	8005458 <global_stdio_init.part.0>
 80054d0:	e7f2      	b.n	80054b8 <__sinit+0xc>
 80054d2:	bf00      	nop
 80054d4:	08005419 	.word	0x08005419
 80054d8:	20000924 	.word	0x20000924

080054dc <_fwalk_sglue>:
 80054dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054e0:	4607      	mov	r7, r0
 80054e2:	4688      	mov	r8, r1
 80054e4:	4614      	mov	r4, r2
 80054e6:	2600      	movs	r6, #0
 80054e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054ec:	f1b9 0901 	subs.w	r9, r9, #1
 80054f0:	d505      	bpl.n	80054fe <_fwalk_sglue+0x22>
 80054f2:	6824      	ldr	r4, [r4, #0]
 80054f4:	2c00      	cmp	r4, #0
 80054f6:	d1f7      	bne.n	80054e8 <_fwalk_sglue+0xc>
 80054f8:	4630      	mov	r0, r6
 80054fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054fe:	89ab      	ldrh	r3, [r5, #12]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d907      	bls.n	8005514 <_fwalk_sglue+0x38>
 8005504:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005508:	3301      	adds	r3, #1
 800550a:	d003      	beq.n	8005514 <_fwalk_sglue+0x38>
 800550c:	4629      	mov	r1, r5
 800550e:	4638      	mov	r0, r7
 8005510:	47c0      	blx	r8
 8005512:	4306      	orrs	r6, r0
 8005514:	3568      	adds	r5, #104	; 0x68
 8005516:	e7e9      	b.n	80054ec <_fwalk_sglue+0x10>

08005518 <iprintf>:
 8005518:	b40f      	push	{r0, r1, r2, r3}
 800551a:	b507      	push	{r0, r1, r2, lr}
 800551c:	4906      	ldr	r1, [pc, #24]	; (8005538 <iprintf+0x20>)
 800551e:	ab04      	add	r3, sp, #16
 8005520:	6808      	ldr	r0, [r1, #0]
 8005522:	f853 2b04 	ldr.w	r2, [r3], #4
 8005526:	6881      	ldr	r1, [r0, #8]
 8005528:	9301      	str	r3, [sp, #4]
 800552a:	f000 fc49 	bl	8005dc0 <_vfiprintf_r>
 800552e:	b003      	add	sp, #12
 8005530:	f85d eb04 	ldr.w	lr, [sp], #4
 8005534:	b004      	add	sp, #16
 8005536:	4770      	bx	lr
 8005538:	20000088 	.word	0x20000088

0800553c <siprintf>:
 800553c:	b40e      	push	{r1, r2, r3}
 800553e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005542:	b500      	push	{lr}
 8005544:	b09c      	sub	sp, #112	; 0x70
 8005546:	ab1d      	add	r3, sp, #116	; 0x74
 8005548:	9002      	str	r0, [sp, #8]
 800554a:	9006      	str	r0, [sp, #24]
 800554c:	9107      	str	r1, [sp, #28]
 800554e:	9104      	str	r1, [sp, #16]
 8005550:	4808      	ldr	r0, [pc, #32]	; (8005574 <siprintf+0x38>)
 8005552:	4909      	ldr	r1, [pc, #36]	; (8005578 <siprintf+0x3c>)
 8005554:	f853 2b04 	ldr.w	r2, [r3], #4
 8005558:	9105      	str	r1, [sp, #20]
 800555a:	6800      	ldr	r0, [r0, #0]
 800555c:	a902      	add	r1, sp, #8
 800555e:	9301      	str	r3, [sp, #4]
 8005560:	f000 fb08 	bl	8005b74 <_svfiprintf_r>
 8005564:	2200      	movs	r2, #0
 8005566:	9b02      	ldr	r3, [sp, #8]
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	b01c      	add	sp, #112	; 0x70
 800556c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005570:	b003      	add	sp, #12
 8005572:	4770      	bx	lr
 8005574:	20000088 	.word	0x20000088
 8005578:	ffff0208 	.word	0xffff0208

0800557c <__sread>:
 800557c:	b510      	push	{r4, lr}
 800557e:	460c      	mov	r4, r1
 8005580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005584:	f000 f940 	bl	8005808 <_read_r>
 8005588:	2800      	cmp	r0, #0
 800558a:	bfab      	itete	ge
 800558c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800558e:	89a3      	ldrhlt	r3, [r4, #12]
 8005590:	181b      	addge	r3, r3, r0
 8005592:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005596:	bfac      	ite	ge
 8005598:	6563      	strge	r3, [r4, #84]	; 0x54
 800559a:	81a3      	strhlt	r3, [r4, #12]
 800559c:	bd10      	pop	{r4, pc}

0800559e <__swrite>:
 800559e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a2:	461f      	mov	r7, r3
 80055a4:	898b      	ldrh	r3, [r1, #12]
 80055a6:	4605      	mov	r5, r0
 80055a8:	05db      	lsls	r3, r3, #23
 80055aa:	460c      	mov	r4, r1
 80055ac:	4616      	mov	r6, r2
 80055ae:	d505      	bpl.n	80055bc <__swrite+0x1e>
 80055b0:	2302      	movs	r3, #2
 80055b2:	2200      	movs	r2, #0
 80055b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b8:	f000 f914 	bl	80057e4 <_lseek_r>
 80055bc:	89a3      	ldrh	r3, [r4, #12]
 80055be:	4632      	mov	r2, r6
 80055c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	4628      	mov	r0, r5
 80055c8:	463b      	mov	r3, r7
 80055ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055d2:	f000 b92b 	b.w	800582c <_write_r>

080055d6 <__sseek>:
 80055d6:	b510      	push	{r4, lr}
 80055d8:	460c      	mov	r4, r1
 80055da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055de:	f000 f901 	bl	80057e4 <_lseek_r>
 80055e2:	1c43      	adds	r3, r0, #1
 80055e4:	89a3      	ldrh	r3, [r4, #12]
 80055e6:	bf15      	itete	ne
 80055e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80055ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055f2:	81a3      	strheq	r3, [r4, #12]
 80055f4:	bf18      	it	ne
 80055f6:	81a3      	strhne	r3, [r4, #12]
 80055f8:	bd10      	pop	{r4, pc}

080055fa <__sclose>:
 80055fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055fe:	f000 b8e1 	b.w	80057c4 <_close_r>

08005602 <__swbuf_r>:
 8005602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005604:	460e      	mov	r6, r1
 8005606:	4614      	mov	r4, r2
 8005608:	4605      	mov	r5, r0
 800560a:	b118      	cbz	r0, 8005614 <__swbuf_r+0x12>
 800560c:	6a03      	ldr	r3, [r0, #32]
 800560e:	b90b      	cbnz	r3, 8005614 <__swbuf_r+0x12>
 8005610:	f7ff ff4c 	bl	80054ac <__sinit>
 8005614:	69a3      	ldr	r3, [r4, #24]
 8005616:	60a3      	str	r3, [r4, #8]
 8005618:	89a3      	ldrh	r3, [r4, #12]
 800561a:	071a      	lsls	r2, r3, #28
 800561c:	d525      	bpl.n	800566a <__swbuf_r+0x68>
 800561e:	6923      	ldr	r3, [r4, #16]
 8005620:	b31b      	cbz	r3, 800566a <__swbuf_r+0x68>
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	6922      	ldr	r2, [r4, #16]
 8005626:	b2f6      	uxtb	r6, r6
 8005628:	1a98      	subs	r0, r3, r2
 800562a:	6963      	ldr	r3, [r4, #20]
 800562c:	4637      	mov	r7, r6
 800562e:	4283      	cmp	r3, r0
 8005630:	dc04      	bgt.n	800563c <__swbuf_r+0x3a>
 8005632:	4621      	mov	r1, r4
 8005634:	4628      	mov	r0, r5
 8005636:	f000 fef3 	bl	8006420 <_fflush_r>
 800563a:	b9e0      	cbnz	r0, 8005676 <__swbuf_r+0x74>
 800563c:	68a3      	ldr	r3, [r4, #8]
 800563e:	3b01      	subs	r3, #1
 8005640:	60a3      	str	r3, [r4, #8]
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	6022      	str	r2, [r4, #0]
 8005648:	701e      	strb	r6, [r3, #0]
 800564a:	6962      	ldr	r2, [r4, #20]
 800564c:	1c43      	adds	r3, r0, #1
 800564e:	429a      	cmp	r2, r3
 8005650:	d004      	beq.n	800565c <__swbuf_r+0x5a>
 8005652:	89a3      	ldrh	r3, [r4, #12]
 8005654:	07db      	lsls	r3, r3, #31
 8005656:	d506      	bpl.n	8005666 <__swbuf_r+0x64>
 8005658:	2e0a      	cmp	r6, #10
 800565a:	d104      	bne.n	8005666 <__swbuf_r+0x64>
 800565c:	4621      	mov	r1, r4
 800565e:	4628      	mov	r0, r5
 8005660:	f000 fede 	bl	8006420 <_fflush_r>
 8005664:	b938      	cbnz	r0, 8005676 <__swbuf_r+0x74>
 8005666:	4638      	mov	r0, r7
 8005668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800566a:	4621      	mov	r1, r4
 800566c:	4628      	mov	r0, r5
 800566e:	f000 f805 	bl	800567c <__swsetup_r>
 8005672:	2800      	cmp	r0, #0
 8005674:	d0d5      	beq.n	8005622 <__swbuf_r+0x20>
 8005676:	f04f 37ff 	mov.w	r7, #4294967295
 800567a:	e7f4      	b.n	8005666 <__swbuf_r+0x64>

0800567c <__swsetup_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	4b2a      	ldr	r3, [pc, #168]	; (8005728 <__swsetup_r+0xac>)
 8005680:	4605      	mov	r5, r0
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	460c      	mov	r4, r1
 8005686:	b118      	cbz	r0, 8005690 <__swsetup_r+0x14>
 8005688:	6a03      	ldr	r3, [r0, #32]
 800568a:	b90b      	cbnz	r3, 8005690 <__swsetup_r+0x14>
 800568c:	f7ff ff0e 	bl	80054ac <__sinit>
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005696:	0718      	lsls	r0, r3, #28
 8005698:	d422      	bmi.n	80056e0 <__swsetup_r+0x64>
 800569a:	06d9      	lsls	r1, r3, #27
 800569c:	d407      	bmi.n	80056ae <__swsetup_r+0x32>
 800569e:	2309      	movs	r3, #9
 80056a0:	602b      	str	r3, [r5, #0]
 80056a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056a6:	f04f 30ff 	mov.w	r0, #4294967295
 80056aa:	81a3      	strh	r3, [r4, #12]
 80056ac:	e034      	b.n	8005718 <__swsetup_r+0x9c>
 80056ae:	0758      	lsls	r0, r3, #29
 80056b0:	d512      	bpl.n	80056d8 <__swsetup_r+0x5c>
 80056b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056b4:	b141      	cbz	r1, 80056c8 <__swsetup_r+0x4c>
 80056b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056ba:	4299      	cmp	r1, r3
 80056bc:	d002      	beq.n	80056c4 <__swsetup_r+0x48>
 80056be:	4628      	mov	r0, r5
 80056c0:	f000 f90a 	bl	80058d8 <_free_r>
 80056c4:	2300      	movs	r3, #0
 80056c6:	6363      	str	r3, [r4, #52]	; 0x34
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056ce:	81a3      	strh	r3, [r4, #12]
 80056d0:	2300      	movs	r3, #0
 80056d2:	6063      	str	r3, [r4, #4]
 80056d4:	6923      	ldr	r3, [r4, #16]
 80056d6:	6023      	str	r3, [r4, #0]
 80056d8:	89a3      	ldrh	r3, [r4, #12]
 80056da:	f043 0308 	orr.w	r3, r3, #8
 80056de:	81a3      	strh	r3, [r4, #12]
 80056e0:	6923      	ldr	r3, [r4, #16]
 80056e2:	b94b      	cbnz	r3, 80056f8 <__swsetup_r+0x7c>
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ee:	d003      	beq.n	80056f8 <__swsetup_r+0x7c>
 80056f0:	4621      	mov	r1, r4
 80056f2:	4628      	mov	r0, r5
 80056f4:	f000 fee1 	bl	80064ba <__smakebuf_r>
 80056f8:	89a0      	ldrh	r0, [r4, #12]
 80056fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056fe:	f010 0301 	ands.w	r3, r0, #1
 8005702:	d00a      	beq.n	800571a <__swsetup_r+0x9e>
 8005704:	2300      	movs	r3, #0
 8005706:	60a3      	str	r3, [r4, #8]
 8005708:	6963      	ldr	r3, [r4, #20]
 800570a:	425b      	negs	r3, r3
 800570c:	61a3      	str	r3, [r4, #24]
 800570e:	6923      	ldr	r3, [r4, #16]
 8005710:	b943      	cbnz	r3, 8005724 <__swsetup_r+0xa8>
 8005712:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005716:	d1c4      	bne.n	80056a2 <__swsetup_r+0x26>
 8005718:	bd38      	pop	{r3, r4, r5, pc}
 800571a:	0781      	lsls	r1, r0, #30
 800571c:	bf58      	it	pl
 800571e:	6963      	ldrpl	r3, [r4, #20]
 8005720:	60a3      	str	r3, [r4, #8]
 8005722:	e7f4      	b.n	800570e <__swsetup_r+0x92>
 8005724:	2000      	movs	r0, #0
 8005726:	e7f7      	b.n	8005718 <__swsetup_r+0x9c>
 8005728:	20000088 	.word	0x20000088

0800572c <memmove>:
 800572c:	4288      	cmp	r0, r1
 800572e:	b510      	push	{r4, lr}
 8005730:	eb01 0402 	add.w	r4, r1, r2
 8005734:	d902      	bls.n	800573c <memmove+0x10>
 8005736:	4284      	cmp	r4, r0
 8005738:	4623      	mov	r3, r4
 800573a:	d807      	bhi.n	800574c <memmove+0x20>
 800573c:	1e43      	subs	r3, r0, #1
 800573e:	42a1      	cmp	r1, r4
 8005740:	d008      	beq.n	8005754 <memmove+0x28>
 8005742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005746:	f803 2f01 	strb.w	r2, [r3, #1]!
 800574a:	e7f8      	b.n	800573e <memmove+0x12>
 800574c:	4601      	mov	r1, r0
 800574e:	4402      	add	r2, r0
 8005750:	428a      	cmp	r2, r1
 8005752:	d100      	bne.n	8005756 <memmove+0x2a>
 8005754:	bd10      	pop	{r4, pc}
 8005756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800575a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800575e:	e7f7      	b.n	8005750 <memmove+0x24>

08005760 <memset>:
 8005760:	4603      	mov	r3, r0
 8005762:	4402      	add	r2, r0
 8005764:	4293      	cmp	r3, r2
 8005766:	d100      	bne.n	800576a <memset+0xa>
 8005768:	4770      	bx	lr
 800576a:	f803 1b01 	strb.w	r1, [r3], #1
 800576e:	e7f9      	b.n	8005764 <memset+0x4>

08005770 <strncpy>:
 8005770:	4603      	mov	r3, r0
 8005772:	b510      	push	{r4, lr}
 8005774:	3901      	subs	r1, #1
 8005776:	b132      	cbz	r2, 8005786 <strncpy+0x16>
 8005778:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800577c:	3a01      	subs	r2, #1
 800577e:	f803 4b01 	strb.w	r4, [r3], #1
 8005782:	2c00      	cmp	r4, #0
 8005784:	d1f7      	bne.n	8005776 <strncpy+0x6>
 8005786:	2100      	movs	r1, #0
 8005788:	441a      	add	r2, r3
 800578a:	4293      	cmp	r3, r2
 800578c:	d100      	bne.n	8005790 <strncpy+0x20>
 800578e:	bd10      	pop	{r4, pc}
 8005790:	f803 1b01 	strb.w	r1, [r3], #1
 8005794:	e7f9      	b.n	800578a <strncpy+0x1a>

08005796 <strstr>:
 8005796:	780a      	ldrb	r2, [r1, #0]
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	b96a      	cbnz	r2, 80057b8 <strstr+0x22>
 800579c:	bd70      	pop	{r4, r5, r6, pc}
 800579e:	429a      	cmp	r2, r3
 80057a0:	d109      	bne.n	80057b6 <strstr+0x20>
 80057a2:	460c      	mov	r4, r1
 80057a4:	4605      	mov	r5, r0
 80057a6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0f6      	beq.n	800579c <strstr+0x6>
 80057ae:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80057b2:	429e      	cmp	r6, r3
 80057b4:	d0f7      	beq.n	80057a6 <strstr+0x10>
 80057b6:	3001      	adds	r0, #1
 80057b8:	7803      	ldrb	r3, [r0, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1ef      	bne.n	800579e <strstr+0x8>
 80057be:	4618      	mov	r0, r3
 80057c0:	e7ec      	b.n	800579c <strstr+0x6>
	...

080057c4 <_close_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	2300      	movs	r3, #0
 80057c8:	4d05      	ldr	r5, [pc, #20]	; (80057e0 <_close_r+0x1c>)
 80057ca:	4604      	mov	r4, r0
 80057cc:	4608      	mov	r0, r1
 80057ce:	602b      	str	r3, [r5, #0]
 80057d0:	f7fd f8bf 	bl	8002952 <_close>
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	d102      	bne.n	80057de <_close_r+0x1a>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	b103      	cbz	r3, 80057de <_close_r+0x1a>
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	bd38      	pop	{r3, r4, r5, pc}
 80057e0:	20000928 	.word	0x20000928

080057e4 <_lseek_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	4604      	mov	r4, r0
 80057e8:	4608      	mov	r0, r1
 80057ea:	4611      	mov	r1, r2
 80057ec:	2200      	movs	r2, #0
 80057ee:	4d05      	ldr	r5, [pc, #20]	; (8005804 <_lseek_r+0x20>)
 80057f0:	602a      	str	r2, [r5, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	f7fd f8d1 	bl	800299a <_lseek>
 80057f8:	1c43      	adds	r3, r0, #1
 80057fa:	d102      	bne.n	8005802 <_lseek_r+0x1e>
 80057fc:	682b      	ldr	r3, [r5, #0]
 80057fe:	b103      	cbz	r3, 8005802 <_lseek_r+0x1e>
 8005800:	6023      	str	r3, [r4, #0]
 8005802:	bd38      	pop	{r3, r4, r5, pc}
 8005804:	20000928 	.word	0x20000928

08005808 <_read_r>:
 8005808:	b538      	push	{r3, r4, r5, lr}
 800580a:	4604      	mov	r4, r0
 800580c:	4608      	mov	r0, r1
 800580e:	4611      	mov	r1, r2
 8005810:	2200      	movs	r2, #0
 8005812:	4d05      	ldr	r5, [pc, #20]	; (8005828 <_read_r+0x20>)
 8005814:	602a      	str	r2, [r5, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	f7fd f862 	bl	80028e0 <_read>
 800581c:	1c43      	adds	r3, r0, #1
 800581e:	d102      	bne.n	8005826 <_read_r+0x1e>
 8005820:	682b      	ldr	r3, [r5, #0]
 8005822:	b103      	cbz	r3, 8005826 <_read_r+0x1e>
 8005824:	6023      	str	r3, [r4, #0]
 8005826:	bd38      	pop	{r3, r4, r5, pc}
 8005828:	20000928 	.word	0x20000928

0800582c <_write_r>:
 800582c:	b538      	push	{r3, r4, r5, lr}
 800582e:	4604      	mov	r4, r0
 8005830:	4608      	mov	r0, r1
 8005832:	4611      	mov	r1, r2
 8005834:	2200      	movs	r2, #0
 8005836:	4d05      	ldr	r5, [pc, #20]	; (800584c <_write_r+0x20>)
 8005838:	602a      	str	r2, [r5, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	f7fd f86d 	bl	800291a <_write>
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	d102      	bne.n	800584a <_write_r+0x1e>
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	b103      	cbz	r3, 800584a <_write_r+0x1e>
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	bd38      	pop	{r3, r4, r5, pc}
 800584c:	20000928 	.word	0x20000928

08005850 <__errno>:
 8005850:	4b01      	ldr	r3, [pc, #4]	; (8005858 <__errno+0x8>)
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	20000088 	.word	0x20000088

0800585c <__libc_init_array>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	2600      	movs	r6, #0
 8005860:	4d0c      	ldr	r5, [pc, #48]	; (8005894 <__libc_init_array+0x38>)
 8005862:	4c0d      	ldr	r4, [pc, #52]	; (8005898 <__libc_init_array+0x3c>)
 8005864:	1b64      	subs	r4, r4, r5
 8005866:	10a4      	asrs	r4, r4, #2
 8005868:	42a6      	cmp	r6, r4
 800586a:	d109      	bne.n	8005880 <__libc_init_array+0x24>
 800586c:	f000 feda 	bl	8006624 <_init>
 8005870:	2600      	movs	r6, #0
 8005872:	4d0a      	ldr	r5, [pc, #40]	; (800589c <__libc_init_array+0x40>)
 8005874:	4c0a      	ldr	r4, [pc, #40]	; (80058a0 <__libc_init_array+0x44>)
 8005876:	1b64      	subs	r4, r4, r5
 8005878:	10a4      	asrs	r4, r4, #2
 800587a:	42a6      	cmp	r6, r4
 800587c:	d105      	bne.n	800588a <__libc_init_array+0x2e>
 800587e:	bd70      	pop	{r4, r5, r6, pc}
 8005880:	f855 3b04 	ldr.w	r3, [r5], #4
 8005884:	4798      	blx	r3
 8005886:	3601      	adds	r6, #1
 8005888:	e7ee      	b.n	8005868 <__libc_init_array+0xc>
 800588a:	f855 3b04 	ldr.w	r3, [r5], #4
 800588e:	4798      	blx	r3
 8005890:	3601      	adds	r6, #1
 8005892:	e7f2      	b.n	800587a <__libc_init_array+0x1e>
 8005894:	08007a8c 	.word	0x08007a8c
 8005898:	08007a8c 	.word	0x08007a8c
 800589c:	08007a8c 	.word	0x08007a8c
 80058a0:	08007a90 	.word	0x08007a90

080058a4 <__retarget_lock_init_recursive>:
 80058a4:	4770      	bx	lr

080058a6 <__retarget_lock_acquire_recursive>:
 80058a6:	4770      	bx	lr

080058a8 <__retarget_lock_release_recursive>:
 80058a8:	4770      	bx	lr

080058aa <strcpy>:
 80058aa:	4603      	mov	r3, r0
 80058ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058b0:	f803 2b01 	strb.w	r2, [r3], #1
 80058b4:	2a00      	cmp	r2, #0
 80058b6:	d1f9      	bne.n	80058ac <strcpy+0x2>
 80058b8:	4770      	bx	lr

080058ba <memcpy>:
 80058ba:	440a      	add	r2, r1
 80058bc:	4291      	cmp	r1, r2
 80058be:	f100 33ff 	add.w	r3, r0, #4294967295
 80058c2:	d100      	bne.n	80058c6 <memcpy+0xc>
 80058c4:	4770      	bx	lr
 80058c6:	b510      	push	{r4, lr}
 80058c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058cc:	4291      	cmp	r1, r2
 80058ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058d2:	d1f9      	bne.n	80058c8 <memcpy+0xe>
 80058d4:	bd10      	pop	{r4, pc}
	...

080058d8 <_free_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	4605      	mov	r5, r0
 80058dc:	2900      	cmp	r1, #0
 80058de:	d040      	beq.n	8005962 <_free_r+0x8a>
 80058e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058e4:	1f0c      	subs	r4, r1, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	bfb8      	it	lt
 80058ea:	18e4      	addlt	r4, r4, r3
 80058ec:	f000 f8dc 	bl	8005aa8 <__malloc_lock>
 80058f0:	4a1c      	ldr	r2, [pc, #112]	; (8005964 <_free_r+0x8c>)
 80058f2:	6813      	ldr	r3, [r2, #0]
 80058f4:	b933      	cbnz	r3, 8005904 <_free_r+0x2c>
 80058f6:	6063      	str	r3, [r4, #4]
 80058f8:	6014      	str	r4, [r2, #0]
 80058fa:	4628      	mov	r0, r5
 80058fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005900:	f000 b8d8 	b.w	8005ab4 <__malloc_unlock>
 8005904:	42a3      	cmp	r3, r4
 8005906:	d908      	bls.n	800591a <_free_r+0x42>
 8005908:	6820      	ldr	r0, [r4, #0]
 800590a:	1821      	adds	r1, r4, r0
 800590c:	428b      	cmp	r3, r1
 800590e:	bf01      	itttt	eq
 8005910:	6819      	ldreq	r1, [r3, #0]
 8005912:	685b      	ldreq	r3, [r3, #4]
 8005914:	1809      	addeq	r1, r1, r0
 8005916:	6021      	streq	r1, [r4, #0]
 8005918:	e7ed      	b.n	80058f6 <_free_r+0x1e>
 800591a:	461a      	mov	r2, r3
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	b10b      	cbz	r3, 8005924 <_free_r+0x4c>
 8005920:	42a3      	cmp	r3, r4
 8005922:	d9fa      	bls.n	800591a <_free_r+0x42>
 8005924:	6811      	ldr	r1, [r2, #0]
 8005926:	1850      	adds	r0, r2, r1
 8005928:	42a0      	cmp	r0, r4
 800592a:	d10b      	bne.n	8005944 <_free_r+0x6c>
 800592c:	6820      	ldr	r0, [r4, #0]
 800592e:	4401      	add	r1, r0
 8005930:	1850      	adds	r0, r2, r1
 8005932:	4283      	cmp	r3, r0
 8005934:	6011      	str	r1, [r2, #0]
 8005936:	d1e0      	bne.n	80058fa <_free_r+0x22>
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	4408      	add	r0, r1
 800593e:	6010      	str	r0, [r2, #0]
 8005940:	6053      	str	r3, [r2, #4]
 8005942:	e7da      	b.n	80058fa <_free_r+0x22>
 8005944:	d902      	bls.n	800594c <_free_r+0x74>
 8005946:	230c      	movs	r3, #12
 8005948:	602b      	str	r3, [r5, #0]
 800594a:	e7d6      	b.n	80058fa <_free_r+0x22>
 800594c:	6820      	ldr	r0, [r4, #0]
 800594e:	1821      	adds	r1, r4, r0
 8005950:	428b      	cmp	r3, r1
 8005952:	bf01      	itttt	eq
 8005954:	6819      	ldreq	r1, [r3, #0]
 8005956:	685b      	ldreq	r3, [r3, #4]
 8005958:	1809      	addeq	r1, r1, r0
 800595a:	6021      	streq	r1, [r4, #0]
 800595c:	6063      	str	r3, [r4, #4]
 800595e:	6054      	str	r4, [r2, #4]
 8005960:	e7cb      	b.n	80058fa <_free_r+0x22>
 8005962:	bd38      	pop	{r3, r4, r5, pc}
 8005964:	20000930 	.word	0x20000930

08005968 <sbrk_aligned>:
 8005968:	b570      	push	{r4, r5, r6, lr}
 800596a:	4e0e      	ldr	r6, [pc, #56]	; (80059a4 <sbrk_aligned+0x3c>)
 800596c:	460c      	mov	r4, r1
 800596e:	6831      	ldr	r1, [r6, #0]
 8005970:	4605      	mov	r5, r0
 8005972:	b911      	cbnz	r1, 800597a <sbrk_aligned+0x12>
 8005974:	f000 fe00 	bl	8006578 <_sbrk_r>
 8005978:	6030      	str	r0, [r6, #0]
 800597a:	4621      	mov	r1, r4
 800597c:	4628      	mov	r0, r5
 800597e:	f000 fdfb 	bl	8006578 <_sbrk_r>
 8005982:	1c43      	adds	r3, r0, #1
 8005984:	d00a      	beq.n	800599c <sbrk_aligned+0x34>
 8005986:	1cc4      	adds	r4, r0, #3
 8005988:	f024 0403 	bic.w	r4, r4, #3
 800598c:	42a0      	cmp	r0, r4
 800598e:	d007      	beq.n	80059a0 <sbrk_aligned+0x38>
 8005990:	1a21      	subs	r1, r4, r0
 8005992:	4628      	mov	r0, r5
 8005994:	f000 fdf0 	bl	8006578 <_sbrk_r>
 8005998:	3001      	adds	r0, #1
 800599a:	d101      	bne.n	80059a0 <sbrk_aligned+0x38>
 800599c:	f04f 34ff 	mov.w	r4, #4294967295
 80059a0:	4620      	mov	r0, r4
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
 80059a4:	20000934 	.word	0x20000934

080059a8 <_malloc_r>:
 80059a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059ac:	1ccd      	adds	r5, r1, #3
 80059ae:	f025 0503 	bic.w	r5, r5, #3
 80059b2:	3508      	adds	r5, #8
 80059b4:	2d0c      	cmp	r5, #12
 80059b6:	bf38      	it	cc
 80059b8:	250c      	movcc	r5, #12
 80059ba:	2d00      	cmp	r5, #0
 80059bc:	4607      	mov	r7, r0
 80059be:	db01      	blt.n	80059c4 <_malloc_r+0x1c>
 80059c0:	42a9      	cmp	r1, r5
 80059c2:	d905      	bls.n	80059d0 <_malloc_r+0x28>
 80059c4:	230c      	movs	r3, #12
 80059c6:	2600      	movs	r6, #0
 80059c8:	603b      	str	r3, [r7, #0]
 80059ca:	4630      	mov	r0, r6
 80059cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005aa4 <_malloc_r+0xfc>
 80059d4:	f000 f868 	bl	8005aa8 <__malloc_lock>
 80059d8:	f8d8 3000 	ldr.w	r3, [r8]
 80059dc:	461c      	mov	r4, r3
 80059de:	bb5c      	cbnz	r4, 8005a38 <_malloc_r+0x90>
 80059e0:	4629      	mov	r1, r5
 80059e2:	4638      	mov	r0, r7
 80059e4:	f7ff ffc0 	bl	8005968 <sbrk_aligned>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	4604      	mov	r4, r0
 80059ec:	d155      	bne.n	8005a9a <_malloc_r+0xf2>
 80059ee:	f8d8 4000 	ldr.w	r4, [r8]
 80059f2:	4626      	mov	r6, r4
 80059f4:	2e00      	cmp	r6, #0
 80059f6:	d145      	bne.n	8005a84 <_malloc_r+0xdc>
 80059f8:	2c00      	cmp	r4, #0
 80059fa:	d048      	beq.n	8005a8e <_malloc_r+0xe6>
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	4631      	mov	r1, r6
 8005a00:	4638      	mov	r0, r7
 8005a02:	eb04 0903 	add.w	r9, r4, r3
 8005a06:	f000 fdb7 	bl	8006578 <_sbrk_r>
 8005a0a:	4581      	cmp	r9, r0
 8005a0c:	d13f      	bne.n	8005a8e <_malloc_r+0xe6>
 8005a0e:	6821      	ldr	r1, [r4, #0]
 8005a10:	4638      	mov	r0, r7
 8005a12:	1a6d      	subs	r5, r5, r1
 8005a14:	4629      	mov	r1, r5
 8005a16:	f7ff ffa7 	bl	8005968 <sbrk_aligned>
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	d037      	beq.n	8005a8e <_malloc_r+0xe6>
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	442b      	add	r3, r5
 8005a22:	6023      	str	r3, [r4, #0]
 8005a24:	f8d8 3000 	ldr.w	r3, [r8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d038      	beq.n	8005a9e <_malloc_r+0xf6>
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	42a2      	cmp	r2, r4
 8005a30:	d12b      	bne.n	8005a8a <_malloc_r+0xe2>
 8005a32:	2200      	movs	r2, #0
 8005a34:	605a      	str	r2, [r3, #4]
 8005a36:	e00f      	b.n	8005a58 <_malloc_r+0xb0>
 8005a38:	6822      	ldr	r2, [r4, #0]
 8005a3a:	1b52      	subs	r2, r2, r5
 8005a3c:	d41f      	bmi.n	8005a7e <_malloc_r+0xd6>
 8005a3e:	2a0b      	cmp	r2, #11
 8005a40:	d917      	bls.n	8005a72 <_malloc_r+0xca>
 8005a42:	1961      	adds	r1, r4, r5
 8005a44:	42a3      	cmp	r3, r4
 8005a46:	6025      	str	r5, [r4, #0]
 8005a48:	bf18      	it	ne
 8005a4a:	6059      	strne	r1, [r3, #4]
 8005a4c:	6863      	ldr	r3, [r4, #4]
 8005a4e:	bf08      	it	eq
 8005a50:	f8c8 1000 	streq.w	r1, [r8]
 8005a54:	5162      	str	r2, [r4, r5]
 8005a56:	604b      	str	r3, [r1, #4]
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f104 060b 	add.w	r6, r4, #11
 8005a5e:	f000 f829 	bl	8005ab4 <__malloc_unlock>
 8005a62:	f026 0607 	bic.w	r6, r6, #7
 8005a66:	1d23      	adds	r3, r4, #4
 8005a68:	1af2      	subs	r2, r6, r3
 8005a6a:	d0ae      	beq.n	80059ca <_malloc_r+0x22>
 8005a6c:	1b9b      	subs	r3, r3, r6
 8005a6e:	50a3      	str	r3, [r4, r2]
 8005a70:	e7ab      	b.n	80059ca <_malloc_r+0x22>
 8005a72:	42a3      	cmp	r3, r4
 8005a74:	6862      	ldr	r2, [r4, #4]
 8005a76:	d1dd      	bne.n	8005a34 <_malloc_r+0x8c>
 8005a78:	f8c8 2000 	str.w	r2, [r8]
 8005a7c:	e7ec      	b.n	8005a58 <_malloc_r+0xb0>
 8005a7e:	4623      	mov	r3, r4
 8005a80:	6864      	ldr	r4, [r4, #4]
 8005a82:	e7ac      	b.n	80059de <_malloc_r+0x36>
 8005a84:	4634      	mov	r4, r6
 8005a86:	6876      	ldr	r6, [r6, #4]
 8005a88:	e7b4      	b.n	80059f4 <_malloc_r+0x4c>
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	e7cc      	b.n	8005a28 <_malloc_r+0x80>
 8005a8e:	230c      	movs	r3, #12
 8005a90:	4638      	mov	r0, r7
 8005a92:	603b      	str	r3, [r7, #0]
 8005a94:	f000 f80e 	bl	8005ab4 <__malloc_unlock>
 8005a98:	e797      	b.n	80059ca <_malloc_r+0x22>
 8005a9a:	6025      	str	r5, [r4, #0]
 8005a9c:	e7dc      	b.n	8005a58 <_malloc_r+0xb0>
 8005a9e:	605b      	str	r3, [r3, #4]
 8005aa0:	deff      	udf	#255	; 0xff
 8005aa2:	bf00      	nop
 8005aa4:	20000930 	.word	0x20000930

08005aa8 <__malloc_lock>:
 8005aa8:	4801      	ldr	r0, [pc, #4]	; (8005ab0 <__malloc_lock+0x8>)
 8005aaa:	f7ff befc 	b.w	80058a6 <__retarget_lock_acquire_recursive>
 8005aae:	bf00      	nop
 8005ab0:	2000092c 	.word	0x2000092c

08005ab4 <__malloc_unlock>:
 8005ab4:	4801      	ldr	r0, [pc, #4]	; (8005abc <__malloc_unlock+0x8>)
 8005ab6:	f7ff bef7 	b.w	80058a8 <__retarget_lock_release_recursive>
 8005aba:	bf00      	nop
 8005abc:	2000092c 	.word	0x2000092c

08005ac0 <__ssputs_r>:
 8005ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac4:	461f      	mov	r7, r3
 8005ac6:	688e      	ldr	r6, [r1, #8]
 8005ac8:	4682      	mov	sl, r0
 8005aca:	42be      	cmp	r6, r7
 8005acc:	460c      	mov	r4, r1
 8005ace:	4690      	mov	r8, r2
 8005ad0:	680b      	ldr	r3, [r1, #0]
 8005ad2:	d82c      	bhi.n	8005b2e <__ssputs_r+0x6e>
 8005ad4:	898a      	ldrh	r2, [r1, #12]
 8005ad6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ada:	d026      	beq.n	8005b2a <__ssputs_r+0x6a>
 8005adc:	6965      	ldr	r5, [r4, #20]
 8005ade:	6909      	ldr	r1, [r1, #16]
 8005ae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ae4:	eba3 0901 	sub.w	r9, r3, r1
 8005ae8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005aec:	1c7b      	adds	r3, r7, #1
 8005aee:	444b      	add	r3, r9
 8005af0:	106d      	asrs	r5, r5, #1
 8005af2:	429d      	cmp	r5, r3
 8005af4:	bf38      	it	cc
 8005af6:	461d      	movcc	r5, r3
 8005af8:	0553      	lsls	r3, r2, #21
 8005afa:	d527      	bpl.n	8005b4c <__ssputs_r+0x8c>
 8005afc:	4629      	mov	r1, r5
 8005afe:	f7ff ff53 	bl	80059a8 <_malloc_r>
 8005b02:	4606      	mov	r6, r0
 8005b04:	b360      	cbz	r0, 8005b60 <__ssputs_r+0xa0>
 8005b06:	464a      	mov	r2, r9
 8005b08:	6921      	ldr	r1, [r4, #16]
 8005b0a:	f7ff fed6 	bl	80058ba <memcpy>
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b18:	81a3      	strh	r3, [r4, #12]
 8005b1a:	6126      	str	r6, [r4, #16]
 8005b1c:	444e      	add	r6, r9
 8005b1e:	6026      	str	r6, [r4, #0]
 8005b20:	463e      	mov	r6, r7
 8005b22:	6165      	str	r5, [r4, #20]
 8005b24:	eba5 0509 	sub.w	r5, r5, r9
 8005b28:	60a5      	str	r5, [r4, #8]
 8005b2a:	42be      	cmp	r6, r7
 8005b2c:	d900      	bls.n	8005b30 <__ssputs_r+0x70>
 8005b2e:	463e      	mov	r6, r7
 8005b30:	4632      	mov	r2, r6
 8005b32:	4641      	mov	r1, r8
 8005b34:	6820      	ldr	r0, [r4, #0]
 8005b36:	f7ff fdf9 	bl	800572c <memmove>
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	68a3      	ldr	r3, [r4, #8]
 8005b3e:	1b9b      	subs	r3, r3, r6
 8005b40:	60a3      	str	r3, [r4, #8]
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	4433      	add	r3, r6
 8005b46:	6023      	str	r3, [r4, #0]
 8005b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b4c:	462a      	mov	r2, r5
 8005b4e:	f000 fd31 	bl	80065b4 <_realloc_r>
 8005b52:	4606      	mov	r6, r0
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d1e0      	bne.n	8005b1a <__ssputs_r+0x5a>
 8005b58:	4650      	mov	r0, sl
 8005b5a:	6921      	ldr	r1, [r4, #16]
 8005b5c:	f7ff febc 	bl	80058d8 <_free_r>
 8005b60:	230c      	movs	r3, #12
 8005b62:	f8ca 3000 	str.w	r3, [sl]
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b70:	81a3      	strh	r3, [r4, #12]
 8005b72:	e7e9      	b.n	8005b48 <__ssputs_r+0x88>

08005b74 <_svfiprintf_r>:
 8005b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b78:	4698      	mov	r8, r3
 8005b7a:	898b      	ldrh	r3, [r1, #12]
 8005b7c:	4607      	mov	r7, r0
 8005b7e:	061b      	lsls	r3, r3, #24
 8005b80:	460d      	mov	r5, r1
 8005b82:	4614      	mov	r4, r2
 8005b84:	b09d      	sub	sp, #116	; 0x74
 8005b86:	d50e      	bpl.n	8005ba6 <_svfiprintf_r+0x32>
 8005b88:	690b      	ldr	r3, [r1, #16]
 8005b8a:	b963      	cbnz	r3, 8005ba6 <_svfiprintf_r+0x32>
 8005b8c:	2140      	movs	r1, #64	; 0x40
 8005b8e:	f7ff ff0b 	bl	80059a8 <_malloc_r>
 8005b92:	6028      	str	r0, [r5, #0]
 8005b94:	6128      	str	r0, [r5, #16]
 8005b96:	b920      	cbnz	r0, 8005ba2 <_svfiprintf_r+0x2e>
 8005b98:	230c      	movs	r3, #12
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	e0d0      	b.n	8005d44 <_svfiprintf_r+0x1d0>
 8005ba2:	2340      	movs	r3, #64	; 0x40
 8005ba4:	616b      	str	r3, [r5, #20]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8005baa:	2320      	movs	r3, #32
 8005bac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bb0:	2330      	movs	r3, #48	; 0x30
 8005bb2:	f04f 0901 	mov.w	r9, #1
 8005bb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bba:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005d5c <_svfiprintf_r+0x1e8>
 8005bbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bc2:	4623      	mov	r3, r4
 8005bc4:	469a      	mov	sl, r3
 8005bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bca:	b10a      	cbz	r2, 8005bd0 <_svfiprintf_r+0x5c>
 8005bcc:	2a25      	cmp	r2, #37	; 0x25
 8005bce:	d1f9      	bne.n	8005bc4 <_svfiprintf_r+0x50>
 8005bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8005bd4:	d00b      	beq.n	8005bee <_svfiprintf_r+0x7a>
 8005bd6:	465b      	mov	r3, fp
 8005bd8:	4622      	mov	r2, r4
 8005bda:	4629      	mov	r1, r5
 8005bdc:	4638      	mov	r0, r7
 8005bde:	f7ff ff6f 	bl	8005ac0 <__ssputs_r>
 8005be2:	3001      	adds	r0, #1
 8005be4:	f000 80a9 	beq.w	8005d3a <_svfiprintf_r+0x1c6>
 8005be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bea:	445a      	add	r2, fp
 8005bec:	9209      	str	r2, [sp, #36]	; 0x24
 8005bee:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 80a1 	beq.w	8005d3a <_svfiprintf_r+0x1c6>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c02:	f10a 0a01 	add.w	sl, sl, #1
 8005c06:	9304      	str	r3, [sp, #16]
 8005c08:	9307      	str	r3, [sp, #28]
 8005c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8005c10:	4654      	mov	r4, sl
 8005c12:	2205      	movs	r2, #5
 8005c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c18:	4850      	ldr	r0, [pc, #320]	; (8005d5c <_svfiprintf_r+0x1e8>)
 8005c1a:	f000 fcbd 	bl	8006598 <memchr>
 8005c1e:	9a04      	ldr	r2, [sp, #16]
 8005c20:	b9d8      	cbnz	r0, 8005c5a <_svfiprintf_r+0xe6>
 8005c22:	06d0      	lsls	r0, r2, #27
 8005c24:	bf44      	itt	mi
 8005c26:	2320      	movmi	r3, #32
 8005c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c2c:	0711      	lsls	r1, r2, #28
 8005c2e:	bf44      	itt	mi
 8005c30:	232b      	movmi	r3, #43	; 0x2b
 8005c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c36:	f89a 3000 	ldrb.w	r3, [sl]
 8005c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c3c:	d015      	beq.n	8005c6a <_svfiprintf_r+0xf6>
 8005c3e:	4654      	mov	r4, sl
 8005c40:	2000      	movs	r0, #0
 8005c42:	f04f 0c0a 	mov.w	ip, #10
 8005c46:	9a07      	ldr	r2, [sp, #28]
 8005c48:	4621      	mov	r1, r4
 8005c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c4e:	3b30      	subs	r3, #48	; 0x30
 8005c50:	2b09      	cmp	r3, #9
 8005c52:	d94d      	bls.n	8005cf0 <_svfiprintf_r+0x17c>
 8005c54:	b1b0      	cbz	r0, 8005c84 <_svfiprintf_r+0x110>
 8005c56:	9207      	str	r2, [sp, #28]
 8005c58:	e014      	b.n	8005c84 <_svfiprintf_r+0x110>
 8005c5a:	eba0 0308 	sub.w	r3, r0, r8
 8005c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8005c62:	4313      	orrs	r3, r2
 8005c64:	46a2      	mov	sl, r4
 8005c66:	9304      	str	r3, [sp, #16]
 8005c68:	e7d2      	b.n	8005c10 <_svfiprintf_r+0x9c>
 8005c6a:	9b03      	ldr	r3, [sp, #12]
 8005c6c:	1d19      	adds	r1, r3, #4
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	9103      	str	r1, [sp, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	bfbb      	ittet	lt
 8005c76:	425b      	neglt	r3, r3
 8005c78:	f042 0202 	orrlt.w	r2, r2, #2
 8005c7c:	9307      	strge	r3, [sp, #28]
 8005c7e:	9307      	strlt	r3, [sp, #28]
 8005c80:	bfb8      	it	lt
 8005c82:	9204      	strlt	r2, [sp, #16]
 8005c84:	7823      	ldrb	r3, [r4, #0]
 8005c86:	2b2e      	cmp	r3, #46	; 0x2e
 8005c88:	d10c      	bne.n	8005ca4 <_svfiprintf_r+0x130>
 8005c8a:	7863      	ldrb	r3, [r4, #1]
 8005c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c8e:	d134      	bne.n	8005cfa <_svfiprintf_r+0x186>
 8005c90:	9b03      	ldr	r3, [sp, #12]
 8005c92:	3402      	adds	r4, #2
 8005c94:	1d1a      	adds	r2, r3, #4
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	9203      	str	r2, [sp, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	bfb8      	it	lt
 8005c9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ca2:	9305      	str	r3, [sp, #20]
 8005ca4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005d60 <_svfiprintf_r+0x1ec>
 8005ca8:	2203      	movs	r2, #3
 8005caa:	4650      	mov	r0, sl
 8005cac:	7821      	ldrb	r1, [r4, #0]
 8005cae:	f000 fc73 	bl	8006598 <memchr>
 8005cb2:	b138      	cbz	r0, 8005cc4 <_svfiprintf_r+0x150>
 8005cb4:	2240      	movs	r2, #64	; 0x40
 8005cb6:	9b04      	ldr	r3, [sp, #16]
 8005cb8:	eba0 000a 	sub.w	r0, r0, sl
 8005cbc:	4082      	lsls	r2, r0
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	3401      	adds	r4, #1
 8005cc2:	9304      	str	r3, [sp, #16]
 8005cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc8:	2206      	movs	r2, #6
 8005cca:	4826      	ldr	r0, [pc, #152]	; (8005d64 <_svfiprintf_r+0x1f0>)
 8005ccc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cd0:	f000 fc62 	bl	8006598 <memchr>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d038      	beq.n	8005d4a <_svfiprintf_r+0x1d6>
 8005cd8:	4b23      	ldr	r3, [pc, #140]	; (8005d68 <_svfiprintf_r+0x1f4>)
 8005cda:	bb1b      	cbnz	r3, 8005d24 <_svfiprintf_r+0x1b0>
 8005cdc:	9b03      	ldr	r3, [sp, #12]
 8005cde:	3307      	adds	r3, #7
 8005ce0:	f023 0307 	bic.w	r3, r3, #7
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	9303      	str	r3, [sp, #12]
 8005ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cea:	4433      	add	r3, r6
 8005cec:	9309      	str	r3, [sp, #36]	; 0x24
 8005cee:	e768      	b.n	8005bc2 <_svfiprintf_r+0x4e>
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	2001      	movs	r0, #1
 8005cf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cf8:	e7a6      	b.n	8005c48 <_svfiprintf_r+0xd4>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	f04f 0c0a 	mov.w	ip, #10
 8005d00:	4619      	mov	r1, r3
 8005d02:	3401      	adds	r4, #1
 8005d04:	9305      	str	r3, [sp, #20]
 8005d06:	4620      	mov	r0, r4
 8005d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d0c:	3a30      	subs	r2, #48	; 0x30
 8005d0e:	2a09      	cmp	r2, #9
 8005d10:	d903      	bls.n	8005d1a <_svfiprintf_r+0x1a6>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0c6      	beq.n	8005ca4 <_svfiprintf_r+0x130>
 8005d16:	9105      	str	r1, [sp, #20]
 8005d18:	e7c4      	b.n	8005ca4 <_svfiprintf_r+0x130>
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d22:	e7f0      	b.n	8005d06 <_svfiprintf_r+0x192>
 8005d24:	ab03      	add	r3, sp, #12
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	462a      	mov	r2, r5
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <_svfiprintf_r+0x1f8>)
 8005d2e:	a904      	add	r1, sp, #16
 8005d30:	f3af 8000 	nop.w
 8005d34:	1c42      	adds	r2, r0, #1
 8005d36:	4606      	mov	r6, r0
 8005d38:	d1d6      	bne.n	8005ce8 <_svfiprintf_r+0x174>
 8005d3a:	89ab      	ldrh	r3, [r5, #12]
 8005d3c:	065b      	lsls	r3, r3, #25
 8005d3e:	f53f af2d 	bmi.w	8005b9c <_svfiprintf_r+0x28>
 8005d42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d44:	b01d      	add	sp, #116	; 0x74
 8005d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d4a:	ab03      	add	r3, sp, #12
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	462a      	mov	r2, r5
 8005d50:	4638      	mov	r0, r7
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <_svfiprintf_r+0x1f8>)
 8005d54:	a904      	add	r1, sp, #16
 8005d56:	f000 f9bf 	bl	80060d8 <_printf_i>
 8005d5a:	e7eb      	b.n	8005d34 <_svfiprintf_r+0x1c0>
 8005d5c:	08007a56 	.word	0x08007a56
 8005d60:	08007a5c 	.word	0x08007a5c
 8005d64:	08007a60 	.word	0x08007a60
 8005d68:	00000000 	.word	0x00000000
 8005d6c:	08005ac1 	.word	0x08005ac1

08005d70 <__sfputc_r>:
 8005d70:	6893      	ldr	r3, [r2, #8]
 8005d72:	b410      	push	{r4}
 8005d74:	3b01      	subs	r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	6093      	str	r3, [r2, #8]
 8005d7a:	da07      	bge.n	8005d8c <__sfputc_r+0x1c>
 8005d7c:	6994      	ldr	r4, [r2, #24]
 8005d7e:	42a3      	cmp	r3, r4
 8005d80:	db01      	blt.n	8005d86 <__sfputc_r+0x16>
 8005d82:	290a      	cmp	r1, #10
 8005d84:	d102      	bne.n	8005d8c <__sfputc_r+0x1c>
 8005d86:	bc10      	pop	{r4}
 8005d88:	f7ff bc3b 	b.w	8005602 <__swbuf_r>
 8005d8c:	6813      	ldr	r3, [r2, #0]
 8005d8e:	1c58      	adds	r0, r3, #1
 8005d90:	6010      	str	r0, [r2, #0]
 8005d92:	7019      	strb	r1, [r3, #0]
 8005d94:	4608      	mov	r0, r1
 8005d96:	bc10      	pop	{r4}
 8005d98:	4770      	bx	lr

08005d9a <__sfputs_r>:
 8005d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9c:	4606      	mov	r6, r0
 8005d9e:	460f      	mov	r7, r1
 8005da0:	4614      	mov	r4, r2
 8005da2:	18d5      	adds	r5, r2, r3
 8005da4:	42ac      	cmp	r4, r5
 8005da6:	d101      	bne.n	8005dac <__sfputs_r+0x12>
 8005da8:	2000      	movs	r0, #0
 8005daa:	e007      	b.n	8005dbc <__sfputs_r+0x22>
 8005dac:	463a      	mov	r2, r7
 8005dae:	4630      	mov	r0, r6
 8005db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db4:	f7ff ffdc 	bl	8005d70 <__sfputc_r>
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	d1f3      	bne.n	8005da4 <__sfputs_r+0xa>
 8005dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005dc0 <_vfiprintf_r>:
 8005dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	460d      	mov	r5, r1
 8005dc6:	4614      	mov	r4, r2
 8005dc8:	4698      	mov	r8, r3
 8005dca:	4606      	mov	r6, r0
 8005dcc:	b09d      	sub	sp, #116	; 0x74
 8005dce:	b118      	cbz	r0, 8005dd8 <_vfiprintf_r+0x18>
 8005dd0:	6a03      	ldr	r3, [r0, #32]
 8005dd2:	b90b      	cbnz	r3, 8005dd8 <_vfiprintf_r+0x18>
 8005dd4:	f7ff fb6a 	bl	80054ac <__sinit>
 8005dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dda:	07d9      	lsls	r1, r3, #31
 8005ddc:	d405      	bmi.n	8005dea <_vfiprintf_r+0x2a>
 8005dde:	89ab      	ldrh	r3, [r5, #12]
 8005de0:	059a      	lsls	r2, r3, #22
 8005de2:	d402      	bmi.n	8005dea <_vfiprintf_r+0x2a>
 8005de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005de6:	f7ff fd5e 	bl	80058a6 <__retarget_lock_acquire_recursive>
 8005dea:	89ab      	ldrh	r3, [r5, #12]
 8005dec:	071b      	lsls	r3, r3, #28
 8005dee:	d501      	bpl.n	8005df4 <_vfiprintf_r+0x34>
 8005df0:	692b      	ldr	r3, [r5, #16]
 8005df2:	b99b      	cbnz	r3, 8005e1c <_vfiprintf_r+0x5c>
 8005df4:	4629      	mov	r1, r5
 8005df6:	4630      	mov	r0, r6
 8005df8:	f7ff fc40 	bl	800567c <__swsetup_r>
 8005dfc:	b170      	cbz	r0, 8005e1c <_vfiprintf_r+0x5c>
 8005dfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e00:	07dc      	lsls	r4, r3, #31
 8005e02:	d504      	bpl.n	8005e0e <_vfiprintf_r+0x4e>
 8005e04:	f04f 30ff 	mov.w	r0, #4294967295
 8005e08:	b01d      	add	sp, #116	; 0x74
 8005e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0e:	89ab      	ldrh	r3, [r5, #12]
 8005e10:	0598      	lsls	r0, r3, #22
 8005e12:	d4f7      	bmi.n	8005e04 <_vfiprintf_r+0x44>
 8005e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e16:	f7ff fd47 	bl	80058a8 <__retarget_lock_release_recursive>
 8005e1a:	e7f3      	b.n	8005e04 <_vfiprintf_r+0x44>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e20:	2320      	movs	r3, #32
 8005e22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e26:	2330      	movs	r3, #48	; 0x30
 8005e28:	f04f 0901 	mov.w	r9, #1
 8005e2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e30:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005fe0 <_vfiprintf_r+0x220>
 8005e34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e38:	4623      	mov	r3, r4
 8005e3a:	469a      	mov	sl, r3
 8005e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e40:	b10a      	cbz	r2, 8005e46 <_vfiprintf_r+0x86>
 8005e42:	2a25      	cmp	r2, #37	; 0x25
 8005e44:	d1f9      	bne.n	8005e3a <_vfiprintf_r+0x7a>
 8005e46:	ebba 0b04 	subs.w	fp, sl, r4
 8005e4a:	d00b      	beq.n	8005e64 <_vfiprintf_r+0xa4>
 8005e4c:	465b      	mov	r3, fp
 8005e4e:	4622      	mov	r2, r4
 8005e50:	4629      	mov	r1, r5
 8005e52:	4630      	mov	r0, r6
 8005e54:	f7ff ffa1 	bl	8005d9a <__sfputs_r>
 8005e58:	3001      	adds	r0, #1
 8005e5a:	f000 80a9 	beq.w	8005fb0 <_vfiprintf_r+0x1f0>
 8005e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e60:	445a      	add	r2, fp
 8005e62:	9209      	str	r2, [sp, #36]	; 0x24
 8005e64:	f89a 3000 	ldrb.w	r3, [sl]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 80a1 	beq.w	8005fb0 <_vfiprintf_r+0x1f0>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f04f 32ff 	mov.w	r2, #4294967295
 8005e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e78:	f10a 0a01 	add.w	sl, sl, #1
 8005e7c:	9304      	str	r3, [sp, #16]
 8005e7e:	9307      	str	r3, [sp, #28]
 8005e80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e84:	931a      	str	r3, [sp, #104]	; 0x68
 8005e86:	4654      	mov	r4, sl
 8005e88:	2205      	movs	r2, #5
 8005e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e8e:	4854      	ldr	r0, [pc, #336]	; (8005fe0 <_vfiprintf_r+0x220>)
 8005e90:	f000 fb82 	bl	8006598 <memchr>
 8005e94:	9a04      	ldr	r2, [sp, #16]
 8005e96:	b9d8      	cbnz	r0, 8005ed0 <_vfiprintf_r+0x110>
 8005e98:	06d1      	lsls	r1, r2, #27
 8005e9a:	bf44      	itt	mi
 8005e9c:	2320      	movmi	r3, #32
 8005e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ea2:	0713      	lsls	r3, r2, #28
 8005ea4:	bf44      	itt	mi
 8005ea6:	232b      	movmi	r3, #43	; 0x2b
 8005ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eac:	f89a 3000 	ldrb.w	r3, [sl]
 8005eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8005eb2:	d015      	beq.n	8005ee0 <_vfiprintf_r+0x120>
 8005eb4:	4654      	mov	r4, sl
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	f04f 0c0a 	mov.w	ip, #10
 8005ebc:	9a07      	ldr	r2, [sp, #28]
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ec4:	3b30      	subs	r3, #48	; 0x30
 8005ec6:	2b09      	cmp	r3, #9
 8005ec8:	d94d      	bls.n	8005f66 <_vfiprintf_r+0x1a6>
 8005eca:	b1b0      	cbz	r0, 8005efa <_vfiprintf_r+0x13a>
 8005ecc:	9207      	str	r2, [sp, #28]
 8005ece:	e014      	b.n	8005efa <_vfiprintf_r+0x13a>
 8005ed0:	eba0 0308 	sub.w	r3, r0, r8
 8005ed4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	46a2      	mov	sl, r4
 8005edc:	9304      	str	r3, [sp, #16]
 8005ede:	e7d2      	b.n	8005e86 <_vfiprintf_r+0xc6>
 8005ee0:	9b03      	ldr	r3, [sp, #12]
 8005ee2:	1d19      	adds	r1, r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	9103      	str	r1, [sp, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	bfbb      	ittet	lt
 8005eec:	425b      	neglt	r3, r3
 8005eee:	f042 0202 	orrlt.w	r2, r2, #2
 8005ef2:	9307      	strge	r3, [sp, #28]
 8005ef4:	9307      	strlt	r3, [sp, #28]
 8005ef6:	bfb8      	it	lt
 8005ef8:	9204      	strlt	r2, [sp, #16]
 8005efa:	7823      	ldrb	r3, [r4, #0]
 8005efc:	2b2e      	cmp	r3, #46	; 0x2e
 8005efe:	d10c      	bne.n	8005f1a <_vfiprintf_r+0x15a>
 8005f00:	7863      	ldrb	r3, [r4, #1]
 8005f02:	2b2a      	cmp	r3, #42	; 0x2a
 8005f04:	d134      	bne.n	8005f70 <_vfiprintf_r+0x1b0>
 8005f06:	9b03      	ldr	r3, [sp, #12]
 8005f08:	3402      	adds	r4, #2
 8005f0a:	1d1a      	adds	r2, r3, #4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	9203      	str	r2, [sp, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	bfb8      	it	lt
 8005f14:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f18:	9305      	str	r3, [sp, #20]
 8005f1a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005fe4 <_vfiprintf_r+0x224>
 8005f1e:	2203      	movs	r2, #3
 8005f20:	4650      	mov	r0, sl
 8005f22:	7821      	ldrb	r1, [r4, #0]
 8005f24:	f000 fb38 	bl	8006598 <memchr>
 8005f28:	b138      	cbz	r0, 8005f3a <_vfiprintf_r+0x17a>
 8005f2a:	2240      	movs	r2, #64	; 0x40
 8005f2c:	9b04      	ldr	r3, [sp, #16]
 8005f2e:	eba0 000a 	sub.w	r0, r0, sl
 8005f32:	4082      	lsls	r2, r0
 8005f34:	4313      	orrs	r3, r2
 8005f36:	3401      	adds	r4, #1
 8005f38:	9304      	str	r3, [sp, #16]
 8005f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f3e:	2206      	movs	r2, #6
 8005f40:	4829      	ldr	r0, [pc, #164]	; (8005fe8 <_vfiprintf_r+0x228>)
 8005f42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f46:	f000 fb27 	bl	8006598 <memchr>
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d03f      	beq.n	8005fce <_vfiprintf_r+0x20e>
 8005f4e:	4b27      	ldr	r3, [pc, #156]	; (8005fec <_vfiprintf_r+0x22c>)
 8005f50:	bb1b      	cbnz	r3, 8005f9a <_vfiprintf_r+0x1da>
 8005f52:	9b03      	ldr	r3, [sp, #12]
 8005f54:	3307      	adds	r3, #7
 8005f56:	f023 0307 	bic.w	r3, r3, #7
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	9303      	str	r3, [sp, #12]
 8005f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f60:	443b      	add	r3, r7
 8005f62:	9309      	str	r3, [sp, #36]	; 0x24
 8005f64:	e768      	b.n	8005e38 <_vfiprintf_r+0x78>
 8005f66:	460c      	mov	r4, r1
 8005f68:	2001      	movs	r0, #1
 8005f6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f6e:	e7a6      	b.n	8005ebe <_vfiprintf_r+0xfe>
 8005f70:	2300      	movs	r3, #0
 8005f72:	f04f 0c0a 	mov.w	ip, #10
 8005f76:	4619      	mov	r1, r3
 8005f78:	3401      	adds	r4, #1
 8005f7a:	9305      	str	r3, [sp, #20]
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f82:	3a30      	subs	r2, #48	; 0x30
 8005f84:	2a09      	cmp	r2, #9
 8005f86:	d903      	bls.n	8005f90 <_vfiprintf_r+0x1d0>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0c6      	beq.n	8005f1a <_vfiprintf_r+0x15a>
 8005f8c:	9105      	str	r1, [sp, #20]
 8005f8e:	e7c4      	b.n	8005f1a <_vfiprintf_r+0x15a>
 8005f90:	4604      	mov	r4, r0
 8005f92:	2301      	movs	r3, #1
 8005f94:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f98:	e7f0      	b.n	8005f7c <_vfiprintf_r+0x1bc>
 8005f9a:	ab03      	add	r3, sp, #12
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	462a      	mov	r2, r5
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	4b13      	ldr	r3, [pc, #76]	; (8005ff0 <_vfiprintf_r+0x230>)
 8005fa4:	a904      	add	r1, sp, #16
 8005fa6:	f3af 8000 	nop.w
 8005faa:	4607      	mov	r7, r0
 8005fac:	1c78      	adds	r0, r7, #1
 8005fae:	d1d6      	bne.n	8005f5e <_vfiprintf_r+0x19e>
 8005fb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fb2:	07d9      	lsls	r1, r3, #31
 8005fb4:	d405      	bmi.n	8005fc2 <_vfiprintf_r+0x202>
 8005fb6:	89ab      	ldrh	r3, [r5, #12]
 8005fb8:	059a      	lsls	r2, r3, #22
 8005fba:	d402      	bmi.n	8005fc2 <_vfiprintf_r+0x202>
 8005fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fbe:	f7ff fc73 	bl	80058a8 <__retarget_lock_release_recursive>
 8005fc2:	89ab      	ldrh	r3, [r5, #12]
 8005fc4:	065b      	lsls	r3, r3, #25
 8005fc6:	f53f af1d 	bmi.w	8005e04 <_vfiprintf_r+0x44>
 8005fca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fcc:	e71c      	b.n	8005e08 <_vfiprintf_r+0x48>
 8005fce:	ab03      	add	r3, sp, #12
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	462a      	mov	r2, r5
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <_vfiprintf_r+0x230>)
 8005fd8:	a904      	add	r1, sp, #16
 8005fda:	f000 f87d 	bl	80060d8 <_printf_i>
 8005fde:	e7e4      	b.n	8005faa <_vfiprintf_r+0x1ea>
 8005fe0:	08007a56 	.word	0x08007a56
 8005fe4:	08007a5c 	.word	0x08007a5c
 8005fe8:	08007a60 	.word	0x08007a60
 8005fec:	00000000 	.word	0x00000000
 8005ff0:	08005d9b 	.word	0x08005d9b

08005ff4 <_printf_common>:
 8005ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff8:	4616      	mov	r6, r2
 8005ffa:	4699      	mov	r9, r3
 8005ffc:	688a      	ldr	r2, [r1, #8]
 8005ffe:	690b      	ldr	r3, [r1, #16]
 8006000:	4607      	mov	r7, r0
 8006002:	4293      	cmp	r3, r2
 8006004:	bfb8      	it	lt
 8006006:	4613      	movlt	r3, r2
 8006008:	6033      	str	r3, [r6, #0]
 800600a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800600e:	460c      	mov	r4, r1
 8006010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006014:	b10a      	cbz	r2, 800601a <_printf_common+0x26>
 8006016:	3301      	adds	r3, #1
 8006018:	6033      	str	r3, [r6, #0]
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	0699      	lsls	r1, r3, #26
 800601e:	bf42      	ittt	mi
 8006020:	6833      	ldrmi	r3, [r6, #0]
 8006022:	3302      	addmi	r3, #2
 8006024:	6033      	strmi	r3, [r6, #0]
 8006026:	6825      	ldr	r5, [r4, #0]
 8006028:	f015 0506 	ands.w	r5, r5, #6
 800602c:	d106      	bne.n	800603c <_printf_common+0x48>
 800602e:	f104 0a19 	add.w	sl, r4, #25
 8006032:	68e3      	ldr	r3, [r4, #12]
 8006034:	6832      	ldr	r2, [r6, #0]
 8006036:	1a9b      	subs	r3, r3, r2
 8006038:	42ab      	cmp	r3, r5
 800603a:	dc2b      	bgt.n	8006094 <_printf_common+0xa0>
 800603c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006040:	1e13      	subs	r3, r2, #0
 8006042:	6822      	ldr	r2, [r4, #0]
 8006044:	bf18      	it	ne
 8006046:	2301      	movne	r3, #1
 8006048:	0692      	lsls	r2, r2, #26
 800604a:	d430      	bmi.n	80060ae <_printf_common+0xba>
 800604c:	4649      	mov	r1, r9
 800604e:	4638      	mov	r0, r7
 8006050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006054:	47c0      	blx	r8
 8006056:	3001      	adds	r0, #1
 8006058:	d023      	beq.n	80060a2 <_printf_common+0xae>
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	6922      	ldr	r2, [r4, #16]
 800605e:	f003 0306 	and.w	r3, r3, #6
 8006062:	2b04      	cmp	r3, #4
 8006064:	bf14      	ite	ne
 8006066:	2500      	movne	r5, #0
 8006068:	6833      	ldreq	r3, [r6, #0]
 800606a:	f04f 0600 	mov.w	r6, #0
 800606e:	bf08      	it	eq
 8006070:	68e5      	ldreq	r5, [r4, #12]
 8006072:	f104 041a 	add.w	r4, r4, #26
 8006076:	bf08      	it	eq
 8006078:	1aed      	subeq	r5, r5, r3
 800607a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800607e:	bf08      	it	eq
 8006080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006084:	4293      	cmp	r3, r2
 8006086:	bfc4      	itt	gt
 8006088:	1a9b      	subgt	r3, r3, r2
 800608a:	18ed      	addgt	r5, r5, r3
 800608c:	42b5      	cmp	r5, r6
 800608e:	d11a      	bne.n	80060c6 <_printf_common+0xd2>
 8006090:	2000      	movs	r0, #0
 8006092:	e008      	b.n	80060a6 <_printf_common+0xb2>
 8006094:	2301      	movs	r3, #1
 8006096:	4652      	mov	r2, sl
 8006098:	4649      	mov	r1, r9
 800609a:	4638      	mov	r0, r7
 800609c:	47c0      	blx	r8
 800609e:	3001      	adds	r0, #1
 80060a0:	d103      	bne.n	80060aa <_printf_common+0xb6>
 80060a2:	f04f 30ff 	mov.w	r0, #4294967295
 80060a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060aa:	3501      	adds	r5, #1
 80060ac:	e7c1      	b.n	8006032 <_printf_common+0x3e>
 80060ae:	2030      	movs	r0, #48	; 0x30
 80060b0:	18e1      	adds	r1, r4, r3
 80060b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060bc:	4422      	add	r2, r4
 80060be:	3302      	adds	r3, #2
 80060c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060c4:	e7c2      	b.n	800604c <_printf_common+0x58>
 80060c6:	2301      	movs	r3, #1
 80060c8:	4622      	mov	r2, r4
 80060ca:	4649      	mov	r1, r9
 80060cc:	4638      	mov	r0, r7
 80060ce:	47c0      	blx	r8
 80060d0:	3001      	adds	r0, #1
 80060d2:	d0e6      	beq.n	80060a2 <_printf_common+0xae>
 80060d4:	3601      	adds	r6, #1
 80060d6:	e7d9      	b.n	800608c <_printf_common+0x98>

080060d8 <_printf_i>:
 80060d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060dc:	7e0f      	ldrb	r7, [r1, #24]
 80060de:	4691      	mov	r9, r2
 80060e0:	2f78      	cmp	r7, #120	; 0x78
 80060e2:	4680      	mov	r8, r0
 80060e4:	460c      	mov	r4, r1
 80060e6:	469a      	mov	sl, r3
 80060e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060ee:	d807      	bhi.n	8006100 <_printf_i+0x28>
 80060f0:	2f62      	cmp	r7, #98	; 0x62
 80060f2:	d80a      	bhi.n	800610a <_printf_i+0x32>
 80060f4:	2f00      	cmp	r7, #0
 80060f6:	f000 80d5 	beq.w	80062a4 <_printf_i+0x1cc>
 80060fa:	2f58      	cmp	r7, #88	; 0x58
 80060fc:	f000 80c1 	beq.w	8006282 <_printf_i+0x1aa>
 8006100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006104:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006108:	e03a      	b.n	8006180 <_printf_i+0xa8>
 800610a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800610e:	2b15      	cmp	r3, #21
 8006110:	d8f6      	bhi.n	8006100 <_printf_i+0x28>
 8006112:	a101      	add	r1, pc, #4	; (adr r1, 8006118 <_printf_i+0x40>)
 8006114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006118:	08006171 	.word	0x08006171
 800611c:	08006185 	.word	0x08006185
 8006120:	08006101 	.word	0x08006101
 8006124:	08006101 	.word	0x08006101
 8006128:	08006101 	.word	0x08006101
 800612c:	08006101 	.word	0x08006101
 8006130:	08006185 	.word	0x08006185
 8006134:	08006101 	.word	0x08006101
 8006138:	08006101 	.word	0x08006101
 800613c:	08006101 	.word	0x08006101
 8006140:	08006101 	.word	0x08006101
 8006144:	0800628b 	.word	0x0800628b
 8006148:	080061b1 	.word	0x080061b1
 800614c:	08006245 	.word	0x08006245
 8006150:	08006101 	.word	0x08006101
 8006154:	08006101 	.word	0x08006101
 8006158:	080062ad 	.word	0x080062ad
 800615c:	08006101 	.word	0x08006101
 8006160:	080061b1 	.word	0x080061b1
 8006164:	08006101 	.word	0x08006101
 8006168:	08006101 	.word	0x08006101
 800616c:	0800624d 	.word	0x0800624d
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	1d1a      	adds	r2, r3, #4
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	602a      	str	r2, [r5, #0]
 8006178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800617c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006180:	2301      	movs	r3, #1
 8006182:	e0a0      	b.n	80062c6 <_printf_i+0x1ee>
 8006184:	6820      	ldr	r0, [r4, #0]
 8006186:	682b      	ldr	r3, [r5, #0]
 8006188:	0607      	lsls	r7, r0, #24
 800618a:	f103 0104 	add.w	r1, r3, #4
 800618e:	6029      	str	r1, [r5, #0]
 8006190:	d501      	bpl.n	8006196 <_printf_i+0xbe>
 8006192:	681e      	ldr	r6, [r3, #0]
 8006194:	e003      	b.n	800619e <_printf_i+0xc6>
 8006196:	0646      	lsls	r6, r0, #25
 8006198:	d5fb      	bpl.n	8006192 <_printf_i+0xba>
 800619a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800619e:	2e00      	cmp	r6, #0
 80061a0:	da03      	bge.n	80061aa <_printf_i+0xd2>
 80061a2:	232d      	movs	r3, #45	; 0x2d
 80061a4:	4276      	negs	r6, r6
 80061a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061aa:	230a      	movs	r3, #10
 80061ac:	4859      	ldr	r0, [pc, #356]	; (8006314 <_printf_i+0x23c>)
 80061ae:	e012      	b.n	80061d6 <_printf_i+0xfe>
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	6820      	ldr	r0, [r4, #0]
 80061b4:	1d19      	adds	r1, r3, #4
 80061b6:	6029      	str	r1, [r5, #0]
 80061b8:	0605      	lsls	r5, r0, #24
 80061ba:	d501      	bpl.n	80061c0 <_printf_i+0xe8>
 80061bc:	681e      	ldr	r6, [r3, #0]
 80061be:	e002      	b.n	80061c6 <_printf_i+0xee>
 80061c0:	0641      	lsls	r1, r0, #25
 80061c2:	d5fb      	bpl.n	80061bc <_printf_i+0xe4>
 80061c4:	881e      	ldrh	r6, [r3, #0]
 80061c6:	2f6f      	cmp	r7, #111	; 0x6f
 80061c8:	bf0c      	ite	eq
 80061ca:	2308      	moveq	r3, #8
 80061cc:	230a      	movne	r3, #10
 80061ce:	4851      	ldr	r0, [pc, #324]	; (8006314 <_printf_i+0x23c>)
 80061d0:	2100      	movs	r1, #0
 80061d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061d6:	6865      	ldr	r5, [r4, #4]
 80061d8:	2d00      	cmp	r5, #0
 80061da:	bfa8      	it	ge
 80061dc:	6821      	ldrge	r1, [r4, #0]
 80061de:	60a5      	str	r5, [r4, #8]
 80061e0:	bfa4      	itt	ge
 80061e2:	f021 0104 	bicge.w	r1, r1, #4
 80061e6:	6021      	strge	r1, [r4, #0]
 80061e8:	b90e      	cbnz	r6, 80061ee <_printf_i+0x116>
 80061ea:	2d00      	cmp	r5, #0
 80061ec:	d04b      	beq.n	8006286 <_printf_i+0x1ae>
 80061ee:	4615      	mov	r5, r2
 80061f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80061f4:	fb03 6711 	mls	r7, r3, r1, r6
 80061f8:	5dc7      	ldrb	r7, [r0, r7]
 80061fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061fe:	4637      	mov	r7, r6
 8006200:	42bb      	cmp	r3, r7
 8006202:	460e      	mov	r6, r1
 8006204:	d9f4      	bls.n	80061f0 <_printf_i+0x118>
 8006206:	2b08      	cmp	r3, #8
 8006208:	d10b      	bne.n	8006222 <_printf_i+0x14a>
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	07de      	lsls	r6, r3, #31
 800620e:	d508      	bpl.n	8006222 <_printf_i+0x14a>
 8006210:	6923      	ldr	r3, [r4, #16]
 8006212:	6861      	ldr	r1, [r4, #4]
 8006214:	4299      	cmp	r1, r3
 8006216:	bfde      	ittt	le
 8006218:	2330      	movle	r3, #48	; 0x30
 800621a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800621e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006222:	1b52      	subs	r2, r2, r5
 8006224:	6122      	str	r2, [r4, #16]
 8006226:	464b      	mov	r3, r9
 8006228:	4621      	mov	r1, r4
 800622a:	4640      	mov	r0, r8
 800622c:	f8cd a000 	str.w	sl, [sp]
 8006230:	aa03      	add	r2, sp, #12
 8006232:	f7ff fedf 	bl	8005ff4 <_printf_common>
 8006236:	3001      	adds	r0, #1
 8006238:	d14a      	bne.n	80062d0 <_printf_i+0x1f8>
 800623a:	f04f 30ff 	mov.w	r0, #4294967295
 800623e:	b004      	add	sp, #16
 8006240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	f043 0320 	orr.w	r3, r3, #32
 800624a:	6023      	str	r3, [r4, #0]
 800624c:	2778      	movs	r7, #120	; 0x78
 800624e:	4832      	ldr	r0, [pc, #200]	; (8006318 <_printf_i+0x240>)
 8006250:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	6829      	ldr	r1, [r5, #0]
 8006258:	061f      	lsls	r7, r3, #24
 800625a:	f851 6b04 	ldr.w	r6, [r1], #4
 800625e:	d402      	bmi.n	8006266 <_printf_i+0x18e>
 8006260:	065f      	lsls	r7, r3, #25
 8006262:	bf48      	it	mi
 8006264:	b2b6      	uxthmi	r6, r6
 8006266:	07df      	lsls	r7, r3, #31
 8006268:	bf48      	it	mi
 800626a:	f043 0320 	orrmi.w	r3, r3, #32
 800626e:	6029      	str	r1, [r5, #0]
 8006270:	bf48      	it	mi
 8006272:	6023      	strmi	r3, [r4, #0]
 8006274:	b91e      	cbnz	r6, 800627e <_printf_i+0x1a6>
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	f023 0320 	bic.w	r3, r3, #32
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	2310      	movs	r3, #16
 8006280:	e7a6      	b.n	80061d0 <_printf_i+0xf8>
 8006282:	4824      	ldr	r0, [pc, #144]	; (8006314 <_printf_i+0x23c>)
 8006284:	e7e4      	b.n	8006250 <_printf_i+0x178>
 8006286:	4615      	mov	r5, r2
 8006288:	e7bd      	b.n	8006206 <_printf_i+0x12e>
 800628a:	682b      	ldr	r3, [r5, #0]
 800628c:	6826      	ldr	r6, [r4, #0]
 800628e:	1d18      	adds	r0, r3, #4
 8006290:	6961      	ldr	r1, [r4, #20]
 8006292:	6028      	str	r0, [r5, #0]
 8006294:	0635      	lsls	r5, r6, #24
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	d501      	bpl.n	800629e <_printf_i+0x1c6>
 800629a:	6019      	str	r1, [r3, #0]
 800629c:	e002      	b.n	80062a4 <_printf_i+0x1cc>
 800629e:	0670      	lsls	r0, r6, #25
 80062a0:	d5fb      	bpl.n	800629a <_printf_i+0x1c2>
 80062a2:	8019      	strh	r1, [r3, #0]
 80062a4:	2300      	movs	r3, #0
 80062a6:	4615      	mov	r5, r2
 80062a8:	6123      	str	r3, [r4, #16]
 80062aa:	e7bc      	b.n	8006226 <_printf_i+0x14e>
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	2100      	movs	r1, #0
 80062b0:	1d1a      	adds	r2, r3, #4
 80062b2:	602a      	str	r2, [r5, #0]
 80062b4:	681d      	ldr	r5, [r3, #0]
 80062b6:	6862      	ldr	r2, [r4, #4]
 80062b8:	4628      	mov	r0, r5
 80062ba:	f000 f96d 	bl	8006598 <memchr>
 80062be:	b108      	cbz	r0, 80062c4 <_printf_i+0x1ec>
 80062c0:	1b40      	subs	r0, r0, r5
 80062c2:	6060      	str	r0, [r4, #4]
 80062c4:	6863      	ldr	r3, [r4, #4]
 80062c6:	6123      	str	r3, [r4, #16]
 80062c8:	2300      	movs	r3, #0
 80062ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ce:	e7aa      	b.n	8006226 <_printf_i+0x14e>
 80062d0:	462a      	mov	r2, r5
 80062d2:	4649      	mov	r1, r9
 80062d4:	4640      	mov	r0, r8
 80062d6:	6923      	ldr	r3, [r4, #16]
 80062d8:	47d0      	blx	sl
 80062da:	3001      	adds	r0, #1
 80062dc:	d0ad      	beq.n	800623a <_printf_i+0x162>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	079b      	lsls	r3, r3, #30
 80062e2:	d413      	bmi.n	800630c <_printf_i+0x234>
 80062e4:	68e0      	ldr	r0, [r4, #12]
 80062e6:	9b03      	ldr	r3, [sp, #12]
 80062e8:	4298      	cmp	r0, r3
 80062ea:	bfb8      	it	lt
 80062ec:	4618      	movlt	r0, r3
 80062ee:	e7a6      	b.n	800623e <_printf_i+0x166>
 80062f0:	2301      	movs	r3, #1
 80062f2:	4632      	mov	r2, r6
 80062f4:	4649      	mov	r1, r9
 80062f6:	4640      	mov	r0, r8
 80062f8:	47d0      	blx	sl
 80062fa:	3001      	adds	r0, #1
 80062fc:	d09d      	beq.n	800623a <_printf_i+0x162>
 80062fe:	3501      	adds	r5, #1
 8006300:	68e3      	ldr	r3, [r4, #12]
 8006302:	9903      	ldr	r1, [sp, #12]
 8006304:	1a5b      	subs	r3, r3, r1
 8006306:	42ab      	cmp	r3, r5
 8006308:	dcf2      	bgt.n	80062f0 <_printf_i+0x218>
 800630a:	e7eb      	b.n	80062e4 <_printf_i+0x20c>
 800630c:	2500      	movs	r5, #0
 800630e:	f104 0619 	add.w	r6, r4, #25
 8006312:	e7f5      	b.n	8006300 <_printf_i+0x228>
 8006314:	08007a67 	.word	0x08007a67
 8006318:	08007a78 	.word	0x08007a78

0800631c <__sflush_r>:
 800631c:	898a      	ldrh	r2, [r1, #12]
 800631e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006320:	4605      	mov	r5, r0
 8006322:	0710      	lsls	r0, r2, #28
 8006324:	460c      	mov	r4, r1
 8006326:	d457      	bmi.n	80063d8 <__sflush_r+0xbc>
 8006328:	684b      	ldr	r3, [r1, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	dc04      	bgt.n	8006338 <__sflush_r+0x1c>
 800632e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006330:	2b00      	cmp	r3, #0
 8006332:	dc01      	bgt.n	8006338 <__sflush_r+0x1c>
 8006334:	2000      	movs	r0, #0
 8006336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800633a:	2e00      	cmp	r6, #0
 800633c:	d0fa      	beq.n	8006334 <__sflush_r+0x18>
 800633e:	2300      	movs	r3, #0
 8006340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006344:	682f      	ldr	r7, [r5, #0]
 8006346:	6a21      	ldr	r1, [r4, #32]
 8006348:	602b      	str	r3, [r5, #0]
 800634a:	d032      	beq.n	80063b2 <__sflush_r+0x96>
 800634c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	075a      	lsls	r2, r3, #29
 8006352:	d505      	bpl.n	8006360 <__sflush_r+0x44>
 8006354:	6863      	ldr	r3, [r4, #4]
 8006356:	1ac0      	subs	r0, r0, r3
 8006358:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800635a:	b10b      	cbz	r3, 8006360 <__sflush_r+0x44>
 800635c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800635e:	1ac0      	subs	r0, r0, r3
 8006360:	2300      	movs	r3, #0
 8006362:	4602      	mov	r2, r0
 8006364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006366:	4628      	mov	r0, r5
 8006368:	6a21      	ldr	r1, [r4, #32]
 800636a:	47b0      	blx	r6
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	89a3      	ldrh	r3, [r4, #12]
 8006370:	d106      	bne.n	8006380 <__sflush_r+0x64>
 8006372:	6829      	ldr	r1, [r5, #0]
 8006374:	291d      	cmp	r1, #29
 8006376:	d82b      	bhi.n	80063d0 <__sflush_r+0xb4>
 8006378:	4a28      	ldr	r2, [pc, #160]	; (800641c <__sflush_r+0x100>)
 800637a:	410a      	asrs	r2, r1
 800637c:	07d6      	lsls	r6, r2, #31
 800637e:	d427      	bmi.n	80063d0 <__sflush_r+0xb4>
 8006380:	2200      	movs	r2, #0
 8006382:	6062      	str	r2, [r4, #4]
 8006384:	6922      	ldr	r2, [r4, #16]
 8006386:	04d9      	lsls	r1, r3, #19
 8006388:	6022      	str	r2, [r4, #0]
 800638a:	d504      	bpl.n	8006396 <__sflush_r+0x7a>
 800638c:	1c42      	adds	r2, r0, #1
 800638e:	d101      	bne.n	8006394 <__sflush_r+0x78>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	b903      	cbnz	r3, 8006396 <__sflush_r+0x7a>
 8006394:	6560      	str	r0, [r4, #84]	; 0x54
 8006396:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006398:	602f      	str	r7, [r5, #0]
 800639a:	2900      	cmp	r1, #0
 800639c:	d0ca      	beq.n	8006334 <__sflush_r+0x18>
 800639e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063a2:	4299      	cmp	r1, r3
 80063a4:	d002      	beq.n	80063ac <__sflush_r+0x90>
 80063a6:	4628      	mov	r0, r5
 80063a8:	f7ff fa96 	bl	80058d8 <_free_r>
 80063ac:	2000      	movs	r0, #0
 80063ae:	6360      	str	r0, [r4, #52]	; 0x34
 80063b0:	e7c1      	b.n	8006336 <__sflush_r+0x1a>
 80063b2:	2301      	movs	r3, #1
 80063b4:	4628      	mov	r0, r5
 80063b6:	47b0      	blx	r6
 80063b8:	1c41      	adds	r1, r0, #1
 80063ba:	d1c8      	bne.n	800634e <__sflush_r+0x32>
 80063bc:	682b      	ldr	r3, [r5, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0c5      	beq.n	800634e <__sflush_r+0x32>
 80063c2:	2b1d      	cmp	r3, #29
 80063c4:	d001      	beq.n	80063ca <__sflush_r+0xae>
 80063c6:	2b16      	cmp	r3, #22
 80063c8:	d101      	bne.n	80063ce <__sflush_r+0xb2>
 80063ca:	602f      	str	r7, [r5, #0]
 80063cc:	e7b2      	b.n	8006334 <__sflush_r+0x18>
 80063ce:	89a3      	ldrh	r3, [r4, #12]
 80063d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063d4:	81a3      	strh	r3, [r4, #12]
 80063d6:	e7ae      	b.n	8006336 <__sflush_r+0x1a>
 80063d8:	690f      	ldr	r7, [r1, #16]
 80063da:	2f00      	cmp	r7, #0
 80063dc:	d0aa      	beq.n	8006334 <__sflush_r+0x18>
 80063de:	0793      	lsls	r3, r2, #30
 80063e0:	bf18      	it	ne
 80063e2:	2300      	movne	r3, #0
 80063e4:	680e      	ldr	r6, [r1, #0]
 80063e6:	bf08      	it	eq
 80063e8:	694b      	ldreq	r3, [r1, #20]
 80063ea:	1bf6      	subs	r6, r6, r7
 80063ec:	600f      	str	r7, [r1, #0]
 80063ee:	608b      	str	r3, [r1, #8]
 80063f0:	2e00      	cmp	r6, #0
 80063f2:	dd9f      	ble.n	8006334 <__sflush_r+0x18>
 80063f4:	4633      	mov	r3, r6
 80063f6:	463a      	mov	r2, r7
 80063f8:	4628      	mov	r0, r5
 80063fa:	6a21      	ldr	r1, [r4, #32]
 80063fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006400:	47e0      	blx	ip
 8006402:	2800      	cmp	r0, #0
 8006404:	dc06      	bgt.n	8006414 <__sflush_r+0xf8>
 8006406:	89a3      	ldrh	r3, [r4, #12]
 8006408:	f04f 30ff 	mov.w	r0, #4294967295
 800640c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006410:	81a3      	strh	r3, [r4, #12]
 8006412:	e790      	b.n	8006336 <__sflush_r+0x1a>
 8006414:	4407      	add	r7, r0
 8006416:	1a36      	subs	r6, r6, r0
 8006418:	e7ea      	b.n	80063f0 <__sflush_r+0xd4>
 800641a:	bf00      	nop
 800641c:	dfbffffe 	.word	0xdfbffffe

08006420 <_fflush_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	690b      	ldr	r3, [r1, #16]
 8006424:	4605      	mov	r5, r0
 8006426:	460c      	mov	r4, r1
 8006428:	b913      	cbnz	r3, 8006430 <_fflush_r+0x10>
 800642a:	2500      	movs	r5, #0
 800642c:	4628      	mov	r0, r5
 800642e:	bd38      	pop	{r3, r4, r5, pc}
 8006430:	b118      	cbz	r0, 800643a <_fflush_r+0x1a>
 8006432:	6a03      	ldr	r3, [r0, #32]
 8006434:	b90b      	cbnz	r3, 800643a <_fflush_r+0x1a>
 8006436:	f7ff f839 	bl	80054ac <__sinit>
 800643a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0f3      	beq.n	800642a <_fflush_r+0xa>
 8006442:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006444:	07d0      	lsls	r0, r2, #31
 8006446:	d404      	bmi.n	8006452 <_fflush_r+0x32>
 8006448:	0599      	lsls	r1, r3, #22
 800644a:	d402      	bmi.n	8006452 <_fflush_r+0x32>
 800644c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800644e:	f7ff fa2a 	bl	80058a6 <__retarget_lock_acquire_recursive>
 8006452:	4628      	mov	r0, r5
 8006454:	4621      	mov	r1, r4
 8006456:	f7ff ff61 	bl	800631c <__sflush_r>
 800645a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800645c:	4605      	mov	r5, r0
 800645e:	07da      	lsls	r2, r3, #31
 8006460:	d4e4      	bmi.n	800642c <_fflush_r+0xc>
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	059b      	lsls	r3, r3, #22
 8006466:	d4e1      	bmi.n	800642c <_fflush_r+0xc>
 8006468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800646a:	f7ff fa1d 	bl	80058a8 <__retarget_lock_release_recursive>
 800646e:	e7dd      	b.n	800642c <_fflush_r+0xc>

08006470 <__swhatbuf_r>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	460c      	mov	r4, r1
 8006474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006478:	4615      	mov	r5, r2
 800647a:	2900      	cmp	r1, #0
 800647c:	461e      	mov	r6, r3
 800647e:	b096      	sub	sp, #88	; 0x58
 8006480:	da0c      	bge.n	800649c <__swhatbuf_r+0x2c>
 8006482:	89a3      	ldrh	r3, [r4, #12]
 8006484:	2100      	movs	r1, #0
 8006486:	f013 0f80 	tst.w	r3, #128	; 0x80
 800648a:	bf0c      	ite	eq
 800648c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006490:	2340      	movne	r3, #64	; 0x40
 8006492:	2000      	movs	r0, #0
 8006494:	6031      	str	r1, [r6, #0]
 8006496:	602b      	str	r3, [r5, #0]
 8006498:	b016      	add	sp, #88	; 0x58
 800649a:	bd70      	pop	{r4, r5, r6, pc}
 800649c:	466a      	mov	r2, sp
 800649e:	f000 f849 	bl	8006534 <_fstat_r>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	dbed      	blt.n	8006482 <__swhatbuf_r+0x12>
 80064a6:	9901      	ldr	r1, [sp, #4]
 80064a8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80064ac:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80064b0:	4259      	negs	r1, r3
 80064b2:	4159      	adcs	r1, r3
 80064b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064b8:	e7eb      	b.n	8006492 <__swhatbuf_r+0x22>

080064ba <__smakebuf_r>:
 80064ba:	898b      	ldrh	r3, [r1, #12]
 80064bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064be:	079d      	lsls	r5, r3, #30
 80064c0:	4606      	mov	r6, r0
 80064c2:	460c      	mov	r4, r1
 80064c4:	d507      	bpl.n	80064d6 <__smakebuf_r+0x1c>
 80064c6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064ca:	6023      	str	r3, [r4, #0]
 80064cc:	6123      	str	r3, [r4, #16]
 80064ce:	2301      	movs	r3, #1
 80064d0:	6163      	str	r3, [r4, #20]
 80064d2:	b002      	add	sp, #8
 80064d4:	bd70      	pop	{r4, r5, r6, pc}
 80064d6:	466a      	mov	r2, sp
 80064d8:	ab01      	add	r3, sp, #4
 80064da:	f7ff ffc9 	bl	8006470 <__swhatbuf_r>
 80064de:	9900      	ldr	r1, [sp, #0]
 80064e0:	4605      	mov	r5, r0
 80064e2:	4630      	mov	r0, r6
 80064e4:	f7ff fa60 	bl	80059a8 <_malloc_r>
 80064e8:	b948      	cbnz	r0, 80064fe <__smakebuf_r+0x44>
 80064ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ee:	059a      	lsls	r2, r3, #22
 80064f0:	d4ef      	bmi.n	80064d2 <__smakebuf_r+0x18>
 80064f2:	f023 0303 	bic.w	r3, r3, #3
 80064f6:	f043 0302 	orr.w	r3, r3, #2
 80064fa:	81a3      	strh	r3, [r4, #12]
 80064fc:	e7e3      	b.n	80064c6 <__smakebuf_r+0xc>
 80064fe:	89a3      	ldrh	r3, [r4, #12]
 8006500:	6020      	str	r0, [r4, #0]
 8006502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006506:	81a3      	strh	r3, [r4, #12]
 8006508:	9b00      	ldr	r3, [sp, #0]
 800650a:	6120      	str	r0, [r4, #16]
 800650c:	6163      	str	r3, [r4, #20]
 800650e:	9b01      	ldr	r3, [sp, #4]
 8006510:	b15b      	cbz	r3, 800652a <__smakebuf_r+0x70>
 8006512:	4630      	mov	r0, r6
 8006514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006518:	f000 f81e 	bl	8006558 <_isatty_r>
 800651c:	b128      	cbz	r0, 800652a <__smakebuf_r+0x70>
 800651e:	89a3      	ldrh	r3, [r4, #12]
 8006520:	f023 0303 	bic.w	r3, r3, #3
 8006524:	f043 0301 	orr.w	r3, r3, #1
 8006528:	81a3      	strh	r3, [r4, #12]
 800652a:	89a3      	ldrh	r3, [r4, #12]
 800652c:	431d      	orrs	r5, r3
 800652e:	81a5      	strh	r5, [r4, #12]
 8006530:	e7cf      	b.n	80064d2 <__smakebuf_r+0x18>
	...

08006534 <_fstat_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	2300      	movs	r3, #0
 8006538:	4d06      	ldr	r5, [pc, #24]	; (8006554 <_fstat_r+0x20>)
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	4611      	mov	r1, r2
 8006540:	602b      	str	r3, [r5, #0]
 8006542:	f7fc fa11 	bl	8002968 <_fstat>
 8006546:	1c43      	adds	r3, r0, #1
 8006548:	d102      	bne.n	8006550 <_fstat_r+0x1c>
 800654a:	682b      	ldr	r3, [r5, #0]
 800654c:	b103      	cbz	r3, 8006550 <_fstat_r+0x1c>
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	bd38      	pop	{r3, r4, r5, pc}
 8006552:	bf00      	nop
 8006554:	20000928 	.word	0x20000928

08006558 <_isatty_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	2300      	movs	r3, #0
 800655c:	4d05      	ldr	r5, [pc, #20]	; (8006574 <_isatty_r+0x1c>)
 800655e:	4604      	mov	r4, r0
 8006560:	4608      	mov	r0, r1
 8006562:	602b      	str	r3, [r5, #0]
 8006564:	f7fc fa0f 	bl	8002986 <_isatty>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d102      	bne.n	8006572 <_isatty_r+0x1a>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	b103      	cbz	r3, 8006572 <_isatty_r+0x1a>
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	20000928 	.word	0x20000928

08006578 <_sbrk_r>:
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	2300      	movs	r3, #0
 800657c:	4d05      	ldr	r5, [pc, #20]	; (8006594 <_sbrk_r+0x1c>)
 800657e:	4604      	mov	r4, r0
 8006580:	4608      	mov	r0, r1
 8006582:	602b      	str	r3, [r5, #0]
 8006584:	f7fc fa16 	bl	80029b4 <_sbrk>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d102      	bne.n	8006592 <_sbrk_r+0x1a>
 800658c:	682b      	ldr	r3, [r5, #0]
 800658e:	b103      	cbz	r3, 8006592 <_sbrk_r+0x1a>
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	20000928 	.word	0x20000928

08006598 <memchr>:
 8006598:	4603      	mov	r3, r0
 800659a:	b510      	push	{r4, lr}
 800659c:	b2c9      	uxtb	r1, r1
 800659e:	4402      	add	r2, r0
 80065a0:	4293      	cmp	r3, r2
 80065a2:	4618      	mov	r0, r3
 80065a4:	d101      	bne.n	80065aa <memchr+0x12>
 80065a6:	2000      	movs	r0, #0
 80065a8:	e003      	b.n	80065b2 <memchr+0x1a>
 80065aa:	7804      	ldrb	r4, [r0, #0]
 80065ac:	3301      	adds	r3, #1
 80065ae:	428c      	cmp	r4, r1
 80065b0:	d1f6      	bne.n	80065a0 <memchr+0x8>
 80065b2:	bd10      	pop	{r4, pc}

080065b4 <_realloc_r>:
 80065b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b8:	4680      	mov	r8, r0
 80065ba:	4614      	mov	r4, r2
 80065bc:	460e      	mov	r6, r1
 80065be:	b921      	cbnz	r1, 80065ca <_realloc_r+0x16>
 80065c0:	4611      	mov	r1, r2
 80065c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065c6:	f7ff b9ef 	b.w	80059a8 <_malloc_r>
 80065ca:	b92a      	cbnz	r2, 80065d8 <_realloc_r+0x24>
 80065cc:	f7ff f984 	bl	80058d8 <_free_r>
 80065d0:	4625      	mov	r5, r4
 80065d2:	4628      	mov	r0, r5
 80065d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065d8:	f000 f81b 	bl	8006612 <_malloc_usable_size_r>
 80065dc:	4284      	cmp	r4, r0
 80065de:	4607      	mov	r7, r0
 80065e0:	d802      	bhi.n	80065e8 <_realloc_r+0x34>
 80065e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065e6:	d812      	bhi.n	800660e <_realloc_r+0x5a>
 80065e8:	4621      	mov	r1, r4
 80065ea:	4640      	mov	r0, r8
 80065ec:	f7ff f9dc 	bl	80059a8 <_malloc_r>
 80065f0:	4605      	mov	r5, r0
 80065f2:	2800      	cmp	r0, #0
 80065f4:	d0ed      	beq.n	80065d2 <_realloc_r+0x1e>
 80065f6:	42bc      	cmp	r4, r7
 80065f8:	4622      	mov	r2, r4
 80065fa:	4631      	mov	r1, r6
 80065fc:	bf28      	it	cs
 80065fe:	463a      	movcs	r2, r7
 8006600:	f7ff f95b 	bl	80058ba <memcpy>
 8006604:	4631      	mov	r1, r6
 8006606:	4640      	mov	r0, r8
 8006608:	f7ff f966 	bl	80058d8 <_free_r>
 800660c:	e7e1      	b.n	80065d2 <_realloc_r+0x1e>
 800660e:	4635      	mov	r5, r6
 8006610:	e7df      	b.n	80065d2 <_realloc_r+0x1e>

08006612 <_malloc_usable_size_r>:
 8006612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006616:	1f18      	subs	r0, r3, #4
 8006618:	2b00      	cmp	r3, #0
 800661a:	bfbc      	itt	lt
 800661c:	580b      	ldrlt	r3, [r1, r0]
 800661e:	18c0      	addlt	r0, r0, r3
 8006620:	4770      	bx	lr
	...

08006624 <_init>:
 8006624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006626:	bf00      	nop
 8006628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800662a:	bc08      	pop	{r3}
 800662c:	469e      	mov	lr, r3
 800662e:	4770      	bx	lr

08006630 <_fini>:
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	bf00      	nop
 8006634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006636:	bc08      	pop	{r3}
 8006638:	469e      	mov	lr, r3
 800663a:	4770      	bx	lr
